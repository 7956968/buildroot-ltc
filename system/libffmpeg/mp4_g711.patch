diff --git a/libffmpeg/libavformat/isom.c b/libffmpeg/libavformat/isom.c
index 2ca1265..537d371 100644
--- a/libffmpeg/libavformat/isom.c
+++ b/libffmpeg/libavformat/isom.c
@@ -59,6 +59,9 @@ const AVCodecTag ff_mp4_obj_type[] = {
     { AV_CODEC_ID_AC3         , 0xA5 },
     { AV_CODEC_ID_EAC3        , 0xA6 },
     { AV_CODEC_ID_DTS         , 0xA9 }, /* mp4ra.org */
+    { AV_CODEC_ID_PCM_MULAW   , 0xE3 }, /* mp4ra.org */
+    { AV_CODEC_ID_PCM_ALAW    , 0xE4 }, /* mp4ra.org */
+    { AV_CODEC_ID_DTS         , 0xA9 }, /* mp4ra.org */
     { AV_CODEC_ID_TSCC2       , 0xD0 }, /* non standard, camtasia uses it */
     { AV_CODEC_ID_VORBIS      , 0xDD }, /* non standard, gpac uses it */
     { AV_CODEC_ID_DVD_SUBTITLE, 0xE0 }, /* non standard, see unsupported-embedded-subs-2.mp4 */
@@ -297,6 +300,7 @@ const AVCodecTag ff_codec_movaudio_tags[] = {
     { AV_CODEC_ID_MP3,             0x6D730055                },
     { AV_CODEC_ID_NELLYMOSER,      MKTAG('n', 'm', 'o', 's') }, /* Flash Media Server */
     { AV_CODEC_ID_PCM_ALAW,        MKTAG('a', 'l', 'a', 'w') },
+    { AV_CODEC_ID_PCM_MULAW,       MKTAG('u', 'l', 'a', 'w') },
     { AV_CODEC_ID_PCM_F32BE,       MKTAG('f', 'l', '3', '2') },
     { AV_CODEC_ID_PCM_F32LE,       MKTAG('f', 'l', '3', '2') },
     { AV_CODEC_ID_PCM_F64BE,       MKTAG('f', 'l', '6', '4') },
diff --git a/libffmpeg/libavformat/mov_chan.c b/libffmpeg/libavformat/mov_chan.c
index cba07c5..63ff047 100644
--- a/libffmpeg/libavformat/mov_chan.c
+++ b/libffmpeg/libavformat/mov_chan.c
@@ -137,7 +137,11 @@ struct MovChannelLayoutMap {
     uint32_t tag;
     uint64_t layout;
 };
-
+static const enum MovChannelLayoutTag mov_ch_layouts_law[] = {
+	MOV_CH_LAYOUT_MONO,
+	MOV_CH_LAYOUT_STEREO,
+	0,
+}; 
 static const struct MovChannelLayoutMap mov_ch_layout_map_misc[] = {
     { MOV_CH_LAYOUT_USE_DESCRIPTIONS,   0 },
     { MOV_CH_LAYOUT_USE_BITMAP,         0 },
@@ -447,7 +451,9 @@ static const struct {
     { AV_CODEC_ID_PCM_F32LE, mov_ch_layouts_wav    },
     { AV_CODEC_ID_PCM_F32BE, mov_ch_layouts_wav    },
     { AV_CODEC_ID_PCM_F64LE, mov_ch_layouts_wav    },
-    { AV_CODEC_ID_PCM_F64BE, mov_ch_layouts_wav    },
+	{ AV_CODEC_ID_PCM_F64BE, mov_ch_layouts_wav    },
+	{ AV_CODEC_ID_PCM_MULAW, mov_ch_layouts_law    },
+	{ AV_CODEC_ID_PCM_ALAW,  mov_ch_layouts_law    },
     { AV_CODEC_ID_NONE,    NULL                    },
 };
 
diff --git a/libffmpeg/libavformat/movenc.c b/libffmpeg/libavformat/movenc.c
index 2bcd92f..bda58af 100644
--- a/libffmpeg/libavformat/movenc.c
+++ b/libffmpeg/libavformat/movenc.c
@@ -712,6 +712,9 @@ static int mov_write_wave_tag(AVIOContext *pb, MOVTrack *track)
     } else if (track->enc->codec_id == AV_CODEC_ID_ADPCM_MS ||
                track->enc->codec_id == AV_CODEC_ID_ADPCM_IMA_WAV) {
         mov_write_ms_tag(pb, track);
+    } else if (track->enc->codec_id == AV_CODEC_ID_PCM_MULAW ||
+               track->enc->codec_id == AV_CODEC_ID_PCM_ALAW) {
+        mov_write_ms_tag(pb, track);
     }
 
     avio_wb32(pb, 8);     /* size */
@@ -989,6 +992,8 @@ static int mov_write_audio_tag(AVIOContext *pb, MOVMuxContext *mov, MOVTrack *tr
          track->enc->codec_id == AV_CODEC_ID_ADPCM_MS      ||
          track->enc->codec_id == AV_CODEC_ID_ADPCM_IMA_WAV ||
          track->enc->codec_id == AV_CODEC_ID_QDM2          ||
+         track->enc->codec_id == AV_CODEC_ID_PCM_MULAW          ||
+         track->enc->codec_id == AV_CODEC_ID_PCM_ALAW          ||
          (mov_pcm_le_gt16(track->enc->codec_id) && version==1) ||
          (mov_pcm_be_gt16(track->enc->codec_id) && version==1)))
         mov_write_wave_tag(pb, track);
@@ -1007,7 +1012,8 @@ static int mov_write_audio_tag(AVIOContext *pb, MOVMuxContext *mov, MOVTrack *tr
     else if (track->vos_len > 0)
         mov_write_glbl_tag(pb, track);
 
-    if (track->mode == MODE_MOV && track->enc->codec_type == AVMEDIA_TYPE_AUDIO)
+    //if (track->mode == MODE_MOV && track->enc->codec_type == AVMEDIA_TYPE_AUDIO)
+    if ( track->enc->codec_type == AVMEDIA_TYPE_AUDIO)
         mov_write_chan_tag(pb, track);
 
     if (mov->encryption_scheme != MOV_ENC_NONE) {
@@ -1144,6 +1150,8 @@ static int mp4_get_codec_tag(AVFormatContext *s, MOVTrack *track)
     if      (track->enc->codec_id == AV_CODEC_ID_H264)      tag = MKTAG('a','v','c','1');
     else if (track->enc->codec_id == AV_CODEC_ID_HEVC)      tag = MKTAG('h','e','v','1');
     else if (track->enc->codec_id == AV_CODEC_ID_AC3)       tag = MKTAG('a','c','-','3');
+    else if (track->enc->codec_id == AV_CODEC_ID_PCM_ALAW)  tag = MKTAG('a','l','a','w');
+    else if (track->enc->codec_id == AV_CODEC_ID_PCM_MULAW)  tag = MKTAG('u','l','a','w');
     else if (track->enc->codec_id == AV_CODEC_ID_EAC3)      tag = MKTAG('e','c','-','3');
     else if (track->enc->codec_id == AV_CODEC_ID_DIRAC)     tag = MKTAG('d','r','a','c');
     else if (track->enc->codec_id == AV_CODEC_ID_MOV_TEXT)  tag = MKTAG('t','x','3','g');
@@ -1163,6 +1171,8 @@ static const AVCodecTag codec_ipod_tags[] = {
     { AV_CODEC_ID_AC3,      MKTAG('a','c','-','3') },
     { AV_CODEC_ID_MOV_TEXT, MKTAG('t','x','3','g') },
     { AV_CODEC_ID_MOV_TEXT, MKTAG('t','e','x','t') },
+    { AV_CODEC_ID_PCM_MULAW, MKTAG('u','l','a','w') },
+    { AV_CODEC_ID_PCM_ALAW, MKTAG('a','l','a','w') },
     { AV_CODEC_ID_NONE, 0 },
 };
 
@@ -1441,6 +1451,8 @@ static const AVCodecTag codec_3gp_tags[] = {
     { AV_CODEC_ID_AAC,      MKTAG('m','p','4','a') },
     { AV_CODEC_ID_AMR_NB,   MKTAG('s','a','m','r') },
     { AV_CODEC_ID_AMR_WB,   MKTAG('s','a','w','b') },
+    { AV_CODEC_ID_PCM_MULAW, MKTAG('u','l','a','w') },
+    { AV_CODEC_ID_PCM_ALAW, MKTAG('a','l','a','w') },
     { AV_CODEC_ID_MOV_TEXT, MKTAG('t','x','3','g') },
     { AV_CODEC_ID_NONE, 0 },
 };
@@ -1451,6 +1463,8 @@ static const AVCodecTag codec_f4v_tags[] = { // XXX: add GIF/PNG/JPEG?
     { AV_CODEC_ID_H264,   MKTAG('a','v','c','1') },
     { AV_CODEC_ID_VP6A,   MKTAG('V','P','6','A') },
     { AV_CODEC_ID_VP6F,   MKTAG('V','P','6','F') },
+    { AV_CODEC_ID_PCM_MULAW, MKTAG('u','l','a','w') },
+    { AV_CODEC_ID_PCM_ALAW, MKTAG('a','l','a','w') },
     { AV_CODEC_ID_NONE, 0 },
 };
 
@@ -5258,6 +5272,15 @@ static int mov_write_header(AVFormatContext *s)
                        "file may not be playable by quicktime. Specify a shorter timebase\n"
                        "or choose different container.\n");
         } else if (st->codec->codec_type == AVMEDIA_TYPE_AUDIO) {
+			if(st->codec->codec_id == AV_CODEC_ID_PCM_ALAW ||
+				st->codec->codec_id == 	AV_CODEC_ID_PCM_MULAW){
+				st->codec->channels = 1;
+				st->codec->sample_rate = 8000;
+				st->codec->sample_fmt = AV_SAMPLE_FMT_S16;
+				track->enc->channels = 1;
+				track->enc->channel_layout = AV_CH_LAYOUT_MONO;
+
+			}
             track->timescale = st->codec->sample_rate;
             if (!st->codec->frame_size && !av_get_bits_per_sample(st->codec->codec_id)) {
                 av_log(s, AV_LOG_WARNING, "track %d: codec frame size is not set\n", i);
