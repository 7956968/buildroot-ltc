/**
*******************************************************************************
 @file ModuleTNM.h

 @brief Declaration of ISPC::ModuleTNM

 @copyright Imagination Technologies Ltd. All Rights Reserved. 

 @license Strictly Confidential. 
   No part of this software, either material or conceptual may be copied or 
   distributed, transmitted, transcribed, stored in a retrieval system or  
   translated into any human or computer language in any form by any means, 
   electronic, mechanical, manual or other-wise, or disclosed to third  
   parties without the express written permission of  
   Imagination Technologies Limited,  
   Unit 8, HomePark Industrial Estate, 
   King's Langley, Hertfordshire, 
   WD4 8LZ, U.K.

******************************************************************************/
#ifndef ISPC_MODULE_TNM_H_
#define ISPC_MODULE_TNM_H_

#include <felix_hw_info.h>

#include <vector>

#include "ispc/Parameter.h"
#include "ispc/Module.h"

namespace ISPC {

#define TNM_IN_MIN_C (-64)
#define TNM_IN_MAX_C (64)

/**
 * @ingroup ISPC2_SETUPMODULES
 * @brief Tone Mapper (TNM) HW configuration
 *
 * Setup function configures the @ref MC_TNM elements of the MC_PIPELINE
 * attached to the owner Pipeline.
 */
class ModuleTNM: public SetupModuleBase<STP_TNM>
{
public:  // attributes
    /**
     * @brief [module bit-depth] Valid range of input luma values. Values outside get clipped.
     *
     * Loaded using @ref TNM_IN_Y
     */
    double aInY[2];

    /**
#ifdef INFOTM_ISP
     * @brief [module bit-depth] Valid range of output luma values. Values outside get clipped.
     *
     * Loaded using @ref TNM_OUT_Y
     */
    double aOutY[2];

#ifdef INFOTM_ISP
    double aOutC[2];

#endif //INFOTM_ISP
    /**
#endif //INFOTM_ISP
     * @brief Strength of local tone mapping
     *
     * Loaded using @ref TNM_WEIGHT_LOCAL
     */
    double fWeightLocal;
    /**
     * @brief Rate at which local tone mapping curves adapt (cca per line)
     *
     * Loaded using @ref TNM_WEIGHT_LINE
     */
    double fWeightLine;
    /**
     * @brief Strength of histogram flattening
     *
     * Loaded using @ref TNM_FLAT_FACTOR
     */
    double fFlatFactor;
    /**
     * @brief Minimum histogram flattening applied
     *
     * Loaded using @ref TNM_FLAT_MIN
     */
    double fFlatMin;
    /**
     * @brief Colour confidence factor
     *
     * Loaded using @ref TNM_COLOUR_CONFIDENCE
     */
    double fColourConfidence;
    /**
     * @brief Colour saturation factor.
     */
    double fColourSaturation;
    /**
     * @brief Global Tone mapping curve.
     *
     * Default is linear 1:1 mapping generated by computeDefaultCurve()
     *
     * Loaded using @ref TNM_CURVE
     */
    double aCurve[TNM_CURVE_NPOINTS];
    /**
     * @brief Bypass the tone-mapping (Y range is still applied)
     *
     * Loaded using @ref TNM_BYPASS
     */
    bool bBypass;

#ifdef INFOTM_ISP
    bool bStaticCurve;

#endif //INFOTM_ISP
public:  // methods
    ModuleTNM();

    /** @copydoc ISPC::SetupModule::load() */
    virtual IMG_RESULT load(const ParameterList &parameters);

    /** @copydoc ISPC::SetupModule::save() */
    virtual IMG_RESULT save(ParameterList &parameters, SaveType t) const;

    /** @copydoc ISPC::SetupModule::setup() */
    virtual IMG_RESULT setup();

    static std::vector<double> computeDefaultCurve();

public:  // parameters
    static const ParamDefArray<double> TNM_IN_Y;
#ifdef INFOTM_ISP
    static const ParamDefArray<double> TNM_OUT_Y;
    static const ParamDefArray<double> TNM_OUT_C;
#endif //INFOTM_ISP
    static const ParamDefSingle<bool> TNM_BYPASS;
    static const ParamDef<double> TNM_WEIGHT_LOCAL;
    static const ParamDef<double> TNM_WEIGHT_LINE;
    static const ParamDef<double> TNM_FLAT_FACTOR;
    static const ParamDef<double> TNM_FLAT_MIN;
    static const ParamDef<double> TNM_COLOUR_CONFIDENCE;
    static const ParamDef<double> TNM_COLOUR_SATURATION;
    static const ParamDefArray<double> TNM_CURVE;
#ifdef INFOTM_ISP
    static const ParamDefSingle<bool> TNM_STATIC_CURVE;
#endif //INFOTM_ISP

    static ParameterGroup getGroup();
};

} /* namespace ISPC */

#endif /* ISPC_MODULE_TNM_H_ */
