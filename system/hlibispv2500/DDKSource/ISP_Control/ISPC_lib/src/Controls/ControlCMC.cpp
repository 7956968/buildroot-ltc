/**
******************************************************************************
 @file ControlCMC.cpp

 @brief ISPC::ControlCMC implementation

 @copyright Imagination Technologies Ltd. All Rights Reserved.

 @license Strictly Confidential.
   No part of this software, either material or conceptual may be copied or
   distributed, transmitted, transcribed, stored in a retrieval system or
   translated into any human or computer language in any form by any means,
   electronic, mechanical, manual or other-wise, or disclosed to third
   parties without the express written permission of
   Imagination Technologies Limited,
   Unit 8, HomePark Industrial Estate,
   King's Langley, Hertfordshire,
   WD4 8LZ, U.K.

******************************************************************************/
#include "ispc/ControlCMC.h"

#include <felixcommon/userlog.h>
#define LOG_TAG "ISPC_CTRL_CMC"

#include "ispc/ModuleSHA.h"
#include "ispc/ModuleR2Y.h"
#include "ispc/ModuleTNM.h"
#include "ispc/ModuleBLC.h"
#include "ispc/ModuleHIS.h"
#include "ispc/ModuleDPF.h"
#include "ispc/ModuleDNS.h"

#include "ispc/Pipeline.h"
#include "ispc/Sensor.h"
//#include <cmath>

#include <sys/time.h>
#include <unistd.h>


static const int CMC_BLC_SENSOR_BLACK_DEF[4] = {-128, -128, -128, -128 };

const double CMC_R2Y_RANGE_MUL_DEF[3] = {1.0f, 1.0f, 1.0f};
const double CMC_R2Y_RANGE_MUL_INVALID_DEF[3] = {0.0f, 0.0f, 0.0f};

#define R2Y_BRIGHTNESS_INVALID_DEF -1.0

static const int CMC_HIS_GRIDSTART_DEF[2] = {0, 0};
static const int HIS_GRIDSIZE_DEF[2] = { HIS_MIN_TILE_WIDTH, HIS_MIN_TILE_HEIGHT };

static const int CMC_HIS_GRIDSTART_DEF_MIN[2] = {-1, -1};
static const int HIS_GRIDSIZE_DEF_MIN[2] = {-1, -1};

const double CMC_TNM_IN_Y_INVALID[2] = {128, 128};
const double CMC_TNM_OUT_Y_INVALID[2] = {255, 255};
const double CMC_TNM_OUT_C_INVALID[2] = {255, 255};

const double CMC_TNM_IN_Y_DEF[2] = {-64, 64};
const double CMC_TNM_OUT_Y_DEF[2] = {10, 250};
const double CMC_TNM_OUT_C_DEF[2] = {10, 250};

static const double CMC_TNMC_WDR_CEILING_DEF[TNMC_WDR_SEGMENT_CNT] =
{
    1.1, 1.3, 1.4, 1.4, 1.3, 1.0, 1.0, 1.0
};
static const double CMC_TNMC_WDR_FLOOR_DEF[TNMC_WDR_SEGMENT_CNT] =
{
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
};


const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_ENABLE("CMC_ENABLE", false);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_DN_TARGET_IDX_CHANGE_ENABLE("CMC_DN_TARGET_IDX_CHANGE_ENABLE", false);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_ENABLE_AVG_GAIN("CMC_ENABLE_AVG_GAIN", false);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_EXPECT("CMC_R2Y_SATURATION_EXPECT", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX/5, R2Y_SATURATION_DEF);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_EXPECT("CMC_SHA_STRENGTH_EXPECT", SHA_STRENGTH_MIN, SHA_STRENGTH_MAX, SHA_STRENGTH_DEF);

const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_NIGHT_MODE_DETECT_ENABLE("CMC_NIGHT_MODE_DETECT_ENABLE", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER("CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER", -1.0, 1.0, -0.65);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT("CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT", -1.0, 1.0, -0.45);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_NIGHT_MODE_DETECT_GAIN_ENTER("CMC_NIGHT_MODE_DETECT_GAIN_ENTER", 1.0, 300.0, 20.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_NIGHT_MODE_DETECT_GAIN_EXIT("CMC_NIGHT_MODE_DETECT_GAIN_EXIT", 1.0, 300.0, 15.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_NIGHT_MODE_DETECT_WEIGHTING("CMC_NIGHT_MODE_DETECT_WEIGHTING", 0.0, 1.0, 0.10);

const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_ENABLE_CAPTURE_IQ("CMC_ENABLE_CAPTURE_IQ", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_CAPTURE_CCM_RATIO("CMC_CAPTURE_CCM_RATIO", 0.0, 2.0, 1.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_CAPTURE_RANGE_MUL("CMC_R2Y_CAPTURE_RANGE_MUL", 0.0, 2.0, CMC_R2Y_RANGE_MUL_DEF, 3);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_CAPTURE_IN_Y("CMC_TNM_CAPTURE_IN_Y", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_CAPTURE_OUT_Y("CMC_TNM_CAPTURE_OUT_Y", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_CAPTURE_OUT_C("CMC_TNM_CAPTURE_OUT_C", 0, 255, CMC_TNM_OUT_C_INVALID, 2);

//3D-Denoise target index.
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_FCM("CMC_DN_TARGET_IDX_FCM", 0, 63, 0);
#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) || defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)


#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
///////////////////////////////////////Flat Color Mode setting
//BLC SENSOR BLACK
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_FCM("CMC_BLC_SENSOR_BLACK_FCM", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_FCM("CMC_BLC_SYS_BLACK_FCM", 0, 32767, 0);

//DNS
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_FCM("CMC_DNS_STRENGTH_FCM", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_FCM("CMC_DNS_READ_NOISE_FCM",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_FCM("CMC_DNS_WELL_DEPTH_FCM",0, 65535, 0);

//SHA
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_FCM("CMC_SHA_RADIUS_FCM", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_FCM("CMC_SHA_STRENGTH_FCM", SHA_STRENGTH_MIN, SHA_STRENGTH_MAX, SHA_STRENGTH_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_FCM("CMC_SHA_THRESH_FCM", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_FCM("CMC_SHA_DETAIL_FCM", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_FCM("CMC_SHA_EDGE_SCALE_FCM", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_FCM("CMC_SHA_EDGE_OFFSET_FCM", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_FCM("CMC_SHA_DENOISE_BYPASS_FCM", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_FCM("CMC_SHA_DN_TAU_MULTIPLIER_FCM", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_FCM("CMC_SHA_DN_SIGMA_MULTIPLIER_FCM", 0.0, 16.0, 1.0);

//R2Y
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_FCM("CMC_R2Y_BRIGHTNESS_FCM", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_FCM("CMC_R2Y_CONTRAST_FCM", R2Y_CONTRAST_MIN, R2Y_CONTRAST_MAX, R2Y_CONTRAST_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_FCM("CMC_R2Y_RANGE_MUL_FCM", 0.0, 2.0, CMC_R2Y_RANGE_MUL_DEF, 3);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_FCM("CMC_R2Y_SATURATION_FCM", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);

//HIS
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_FCM("CMC_HIS_GRID_START_COORDS_FCM", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_FCM("CMC_HIS_GRID_TILE_DIMENSIONS_FCM", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

//DPF
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_FCM("CMC_DPF_WEIGHT_FCM", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_FCM("CMC_DPF_THRESHOLD_FCM", -1, 63, -1);

//TNM

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_FCM("CMC_TNMC_HIST_CLIP_MIN_FCM", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_FCM("CMC_TNMC_HIST_CLIP_MAX_FCM", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_FCM("TNMC_ADAPTIVE_FCM", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_FCM("CMC_TNM_IN_Y_FCM", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_FCM("CMC_TNM_OUT_Y_FCM", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_FCM("CMC_TNM_OUT_C_FCM", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_FCM("CMC_TNM_FLAT_FACTOR_FCM", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_FCM("CMC_TNM_WEIGHT_LINE_FCM", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_FCM("CMC_TNM_COLOUR_CONFIDENCE_FCM", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_FCM("CMC_TNM_COLOUR_SATURATION_FCM", 0.0, 16.0, 1.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ENABLE_GAMMA_FCM("CMC_TNMC_ENABLE_GAMMA_FCM", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_FCM("CMC_TNMC_OVERSHOT_THRESHOLD_FCM", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_FCM("CMC_TNMC_WDR_CEILING_FCM", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_FCM("CMC_TNMC_WDR_FLOOR_FCM", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_FCM("CMC_TNMC_GAMMA_CRV_MODE_FCM", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_FCM("TNMC_GAMMA_FCM", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_FCM("CMC_TNMC_BEZIER_CTRL_PNT_FCM", 0.0, 1.0, 0.83);

//AE
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_AE_TARGET_BRIGHTNESS_FCM("CMC_AE_TARGET_BRIGHTNESS_FCM", -1.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_AE_TARGET_MIN_FCM("CMC_AE_TARGET_MIN_FCM", -1.0, 1.0, 0.0);

//Sensor Max Gain
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SENSOR_MAX_GAIN_FCM("CMC_SENSOR_MAX_GAIN_FCM", 1.0, 300.0, 8.0);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_FCM_LV1("CMC_DN_TARGET_IDX_FCM_LV1", 0, 63, 0);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_FCM_LV1("CMC_BLC_SENSOR_BLACK_FCM_LV1", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_FCM_LV1("CMC_BLC_SYS_BLACK_FCM_LV1", 0, 32767, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_FCM_LV1("CMC_DNS_STRENGTH_FCM_LV1", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_FCM_LV1("CMC_DNS_READ_NOISE_FCM_LV1",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_FCM_LV1("CMC_DNS_WELL_DEPTH_FCM_LV1",0, 65535, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_FCM_LV1("CMC_SHA_RADIUS_FCM_LV1", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_FCM_LV1("CMC_SHA_STRENGTH_FCM_LV1", 0.0, 1.0, 0.4);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_FCM_LV1("CMC_SHA_THRESH_FCM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_FCM_LV1("CMC_SHA_DETAIL_FCM_LV1", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_FCM_LV1("CMC_SHA_EDGE_SCALE_FCM_LV1", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_FCM_LV1("CMC_SHA_EDGE_OFFSET_FCM_LV1", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_FCM_LV1("CMC_SHA_DENOISE_BYPASS_FCM_LV1", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_FCM_LV1("CMC_SHA_DN_TAU_MULTIPLIER_FCM_LV1", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_FCM_LV1("CMC_SHA_DN_SIGMA_MULTIPLIER_FCM_LV1", 0.0, 16.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_FCM_LV1("CMC_R2Y_BRIGHTNESS_FCM_LV1", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_INVALID_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_FCM_LV1("CMC_R2Y_CONTRAST_FCM_LV1", -1.0, R2Y_CONTRAST_MAX, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_FCM_LV1("CMC_R2Y_SATURATION_FCM_LV1", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_FCM_LV1("CMC_R2Y_RANGE_MUL_FCM_LV1", 0.0, 2.0, CMC_R2Y_RANGE_MUL_INVALID_DEF, 3);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_FCM_LV1("CMC_HIS_GRID_START_COORDS_FCM_LV1", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1("CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_FCM_LV1("CMC_DPF_WEIGHT_FCM_LV1", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_FCM_LV1("CMC_DPF_THRESHOLD_FCM_LV1", -1, 63, -1);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_FCM_LV1("CMC_TNMC_HIST_CLIP_MIN_FCM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_FCM_LV1("CMC_TNMC_HIST_CLIP_MAX_FCM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_FCM_LV1("CMC_TNMC_ADAPTIVE_FCM_LV1", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_FCM_LV1("CMC_TNM_IN_Y_FCM_LV1", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_FCM_LV1("CMC_TNM_OUT_Y_FCM_LV1", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_FCM_LV1("CMC_TNM_OUT_C_FCM_LV1", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_FCM_LV1("CMC_TNM_FLAT_FACTOR_FCM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_FCM_LV1("CMC_TNM_WEIGHT_LINE_FCM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1("CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_FCM_LV1("CMC_TNM_COLOUR_SATURATION_FCM_LV1", -1.0, 16.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1("CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_FCM_LV1("CMC_TNMC_WDR_CEILING_FCM_LV1", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_FCM_LV1("CMC_TNMC_WDR_FLOOR_FCM_LV1", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1("CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_FCM_LV1("CMC_TNMC_GAMMA_FCM_LV1", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1("CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1", 0.0, 1.0, 0.83);

const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_FCM_LV2("CMC_DN_TARGET_IDX_FCM_LV2", 0, 63, 0);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_FCM_LV2("CMC_BLC_SENSOR_BLACK_FCM_LV2", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_FCM_LV2("CMC_BLC_SYS_BLACK_FCM_LV2", 0, 32767, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_FCM_LV2("CMC_DNS_STRENGTH_FCM_LV2", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_FCM_LV2("CMC_DNS_READ_NOISE_FCM_LV2",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_FCM_LV2("CMC_DNS_WELL_DEPTH_FCM_LV2",0, 65535, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_FCM_LV2("CMC_SHA_RADIUS_FCM_LV2", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_FCM_LV2("CMC_SHA_STRENGTH_FCM_LV2", 0.0, 1.0, 0.4);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_FCM_LV2("CMC_SHA_THRESH_FCM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_FCM_LV2("CMC_SHA_DETAIL_FCM_LV2", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_FCM_LV2("CMC_SHA_EDGE_SCALE_FCM_LV2", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_FCM_LV2("CMC_SHA_EDGE_OFFSET_FCM_LV2", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_FCM_LV2("CMC_SHA_DENOISE_BYPASS_FCM_LV2", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_FCM_LV2("CMC_SHA_DN_TAU_MULTIPLIER_FCM_LV2", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_FCM_LV2("CMC_SHA_DN_SIGMA_MULTIPLIER_FCM_LV2", 0.0, 16.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_FCM_LV2("CMC_R2Y_BRIGHTNESS_FCM_LV2", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_INVALID_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_FCM_LV2("CMC_R2Y_CONTRAST_FCM_LV2", -1.0, R2Y_CONTRAST_MAX, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_FCM_LV2("CMC_R2Y_SATURATION_FCM_LV2", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_FCM_LV2("CMC_R2Y_RANGE_MUL_FCM_LV2", 0.0, 2.0, CMC_R2Y_RANGE_MUL_INVALID_DEF, 3);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_FCM_LV2("CMC_HIS_GRID_START_COORDS_FCM_LV2", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2("CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_FCM_LV2("CMC_DPF_WEIGHT_FCM_LV2", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_FCM_LV2("CMC_DPF_THRESHOLD_FCM_LV2", -1, 63, -1);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_FCM_LV2("CMC_TNMC_HIST_CLIP_MIN_FCM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_FCM_LV2("CMC_TNMC_HIST_CLIP_MAX_FCM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_FCM_LV2("CMC_TNMC_ADAPTIVE_FCM_LV2", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_FCM_LV2("CMC_TNM_IN_Y_FCM_LV2", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_FCM_LV2("CMC_TNM_OUT_Y_FCM_LV2", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_FCM_LV2("CMC_TNM_OUT_C_FCM_LV2", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_FCM_LV2("CMC_TNM_FLAT_FACTOR_FCM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_FCM_LV2("CMC_TNM_WEIGHT_LINE_FCM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2("CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_FCM_LV2("CMC_TNM_COLOUR_SATURATION_FCM_LV2", -1.0, 16.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2("CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_FCM_LV2("CMC_TNMC_WDR_CEILING_FCM_LV2", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_FCM_LV2("CMC_TNMC_WDR_FLOOR_FCM_LV2", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2("CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_FCM_LV2("CMC_TNMC_GAMMA_FCM_LV2", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2("CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2", 0.0, 1.0, 0.83);

const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_FCM_LV3("CMC_DN_TARGET_IDX_FCM_LV3", 0, 63, 0);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_FCM_LV3("CMC_BLC_SENSOR_BLACK_FCM_LV3", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_FCM_LV3("CMC_BLC_SYS_BLACK_FCM_LV3", 0, 32767, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_FCM_LV3("CMC_DNS_STRENGTH_FCM_LV3", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_FCM_LV3("CMC_DNS_READ_NOISE_FCM_LV3",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_FCM_LV3("CMC_DNS_WELL_DEPTH_FCM_LV3",0, 65535, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_FCM_LV3("CMC_SHA_RADIUS_FCM_LV3", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_FCM_LV3("CMC_SHA_STRENGTH_FCM_LV3", 0.0, 1.0, 0.4);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_FCM_LV3("CMC_SHA_THRESH_FCM_LV3", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_FCM_LV3("CMC_SHA_DETAIL_FCM_LV3", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_FCM_LV3("CMC_SHA_EDGE_SCALE_FCM_LV3", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_FCM_LV3("CMC_SHA_EDGE_OFFSET_FCM_LV3", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_FCM_LV3("CMC_SHA_DENOISE_BYPASS_FCM_LV3", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_FCM_LV3("CMC_SHA_DN_TAU_MULTIPLIER_FCM_LV3", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_FCM_LV3("CMC_SHA_DN_SIGMA_MULTIPLIER_FCM_LV3", 0.0, 16.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_FCM_LV3("CMC_R2Y_BRIGHTNESS_FCM_LV3", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_INVALID_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_FCM_LV3("CMC_R2Y_CONTRAST_FCM_LV3", -1.0, R2Y_CONTRAST_MAX, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_FCM_LV3("CMC_R2Y_SATURATION_FCM_LV3", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_FCM_LV3("CMC_R2Y_RANGE_MUL_FCM_LV3", 0.0, 2.0, CMC_R2Y_RANGE_MUL_INVALID_DEF, 3);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_FCM_LV3("CMC_HIS_GRID_START_COORDS_FCM_LV3", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3("CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_FCM_LV3("CMC_DPF_WEIGHT_FCM_LV3", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_FCM_LV3("CMC_DPF_THRESHOLD_FCM_LV3", -1, 63, -1);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_FCM_LV3("CMC_TNMC_HIST_CLIP_MIN_FCM_LV3", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_FCM_LV3("CMC_TNMC_HIST_CLIP_MAX_FCM_LV3", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_FCM_LV3("CMC_TNMC_ADAPTIVE_FCM_LV3", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_FCM_LV3("CMC_TNM_IN_Y_FCM_LV3", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_FCM_LV3("CMC_TNM_OUT_Y_FCM_LV3", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_FCM_LV3("CMC_TNM_OUT_C_FCM_LV3", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_FCM_LV3("CMC_TNM_FLAT_FACTOR_FCM_LV3", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_FCM_LV3("CMC_TNM_WEIGHT_LINE_FCM_LV3", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3("CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_FCM_LV3("CMC_TNM_COLOUR_SATURATION_FCM_LV3", -1.0, 16.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3("CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_FCM_LV3("CMC_TNMC_WDR_CEILING_FCM_LV3", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_FCM_LV3("CMC_TNMC_WDR_FLOOR_FCM_LV3", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3("CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_FCM_LV3("CMC_TNMC_GAMMA_FCM_LV3", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3("CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3", 0.0, 1.0, 0.83);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX


//3D-Denoise target index.
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_ACM("CMC_DN_TARGET_IDX_ACM", 0, 63, 0);
#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
///////////////////////////////////////Advanced Color Mode setting
//BLC SENSOR BLACK
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_ACM("BLC_SENSOR_BLACK", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_ACM("BLC_SYS_BLACK", 0, 32767, 64);


//DNS
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_ACM("DNS_STRENGTH", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_ACM("DNS_READ_NOISE", 0.0, 100.0, 1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_ACM("DNS_WELL_DEPTH",0, 65535, 5000);

//SHA
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_ACM("SHA_RADIUS", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_ACM("SHA_STRENGTH", SHA_STRENGTH_MIN, SHA_STRENGTH_MAX, SHA_STRENGTH_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_ACM("SHA_THRESH", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_ACM("SHA_DETAIL", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_ACM("SHA_EDGE_SCALE", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_ACM("SHA_EDGE_OFFSET", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_ACM("SHA_DENOISE_BYPASS", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_ACM("SHA_DN_TAU_MULTIPLIER", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_ACM("SHA_DN_SIGMA_MULTIPLIER", 0.0, 16.0, 1.0);

//R2Y
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_ACM("R2Y_BRIGHTNESS", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_ACM("R2Y_CONTRAST", R2Y_CONTRAST_MIN, R2Y_CONTRAST_MAX, R2Y_CONTRAST_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_ACM("R2Y_RANGE_MUL", 0.0, 2.0, CMC_R2Y_RANGE_MUL_DEF, 3);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_ACM("R2Y_SATURATION", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);

//HIS
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_ACM("HIS_GRID_START_COORDS", 0, 8191, CMC_HIS_GRIDSTART_DEF, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_ACM("HIS_GRID_TILE_DIMENSIONS", 8, 4095, HIS_GRIDSIZE_DEF, 2);

//DPF
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_ACM("DPF_WEIGHT", 0.0, 255.0, 16.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_ACM("DPF_THRESHOLD", 0, 63, 0);

//TNM
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_ACM("TNMC_HIST_CLIP_MIN", 0.0, 1.0, 0.035);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_ACM("TNMC_HIST_CLIP_MAX", 0.0, 1.0, 0.25);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_ACM("TNMC_ADAPTIVE", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_ACM("TNM_IN_Y", -128, 128, CMC_TNM_IN_Y_DEF, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_ACM("TNM_OUT_Y", 0, 255, CMC_TNM_OUT_Y_DEF, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_ACM("TNM_OUT_C", 0, 255, CMC_TNM_OUT_C_DEF, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_ACM("TNM_FLAT_FACTOR", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_ACM("TNM_WEIGHT_LINE", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_ACM("TNM_COLOUR_CONFIDENCE", 0.0, 64.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_ACM("TNM_COLOUR_SATURATION", 0.0, 16.0, 1.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ENABLE_GAMMA_ACM("TNMC_ENABLE_GAMMA", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM("TNMC_EQUAL_BRIGHTSUPRESSRATIO", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM("TNMC_EQUAL_DARKSUPRESSRATIO", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_ACM("TNMC_OVERSHOT_THRESHOLD", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_ACM("TNMC_WDR_CEILING", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_ACM("TNMC_WDR_FLOOR", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_ACM("TNMC_GAMMA_CRV_MODE", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_ACM("TNMC_GAMMA_ACM", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_ACM("TNMC_BEZIER_CTRL_PNT", 0.0, 1.0, 0.83);

//AE
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_AE_TARGET_BRIGHTNESS_ACM("AE_TARGET_BRIGHTNESS", -1.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_AE_TARGET_MIN_ACM("AE_TARGET_MIN", -1.0, 1.0, 0.0);

//Sensor Max Gain
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SENSOR_MAX_GAIN_ACM("CMC_SENSOR_MAX_GAIN_ACM", 1.0, 300.0, 4.0);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE


#if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SENSOR_GAIN_LEVEL_CTRL("CMC_SENSOR_GAIN_LEVEL_CTRL", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SENSOR_GAIN_LV1("CMC_SENSOR_GAIN_LV1", 0.0, 300.0, 4.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SENSOR_GAIN_LV2("CMC_SENSOR_GAIN_LV2", 0.0, 300.0, 8.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SENSOR_GAIN_LV1_INTERPOLATION("CMC_SENSOR_GAIN_LV1_INTERPOLATION", 0, 300.0, 8);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SENSOR_GAIN_LV2_INTERPOLATION("CMC_SENSOR_GAIN_LV2_INTERPOLATION", 0, 300.0, 14);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_ENABLE_INTERPOLATION_GAMMA("CMC_ENABLE_INTERPOLATION_GAMMA", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_INTERPOLATION_GAMMA_0("CMC_INTERPOLATION_GAMMA_0", 0.0, 5.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_INTERPOLATION_GAMMA_1("CMC_INTERPOLATION_GAMMA_1", 0.0, 5.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_INTERPOLATION_GAMMA_2("CMC_INTERPOLATION_GAMMA_2", 0.0, 5.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_CCM_ATTENUATION_LV1("CMC_CCM_ATTENUATION_LV1", 1.0, 100.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_CCM_ATTENUATION_LV2("CMC_CCM_ATTENUATION_LV2", 1.0, 100.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_CCM_ATTENUATION_LV3("CMC_CCM_ATTENUATION_MAX", 1.0, 100.0, 1.0);

const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_ACM_LV1("CMC_DN_TARGET_IDX_ACM_LV1", 0, 63, 0);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_ACM_LV1("CMC_BLC_SENSOR_BLACK_ACM_LV1", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_ACM_LV1("CMC_BLC_SYS_BLACK_ACM_LV1", 0, 32767, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_ACM_LV1("CMC_DNS_STRENGTH_ACM_LV1", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_ACM_LV1("CMC_DNS_READ_NOISE_ACM_LV1",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_ACM_LV1("CMC_DNS_WELL_DEPTH_ACM_LV1",0, 65535, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_ACM_LV1("CMC_SHA_RADIUS_ACM_LV1", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_ACM_LV1("CMC_SHA_STRENGTH_ACM_LV1", 0.0, 1.0, 0.4);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_ACM_LV1("CMC_SHA_THRESH_ACM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_ACM_LV1("CMC_SHA_DETAIL_ACM_LV1", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_ACM_LV1("CMC_SHA_EDGE_SCALE_ACM_LV1", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_ACM_LV1("CMC_SHA_EDGE_OFFSET_ACM_LV1", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_ACM_LV1("CMC_SHA_DENOISE_BYPASS_ACM_LV1", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_ACM_LV1("CMC_SHA_DN_TAU_MULTIPLIER_ACM_LV1", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_ACM_LV1("CMC_SHA_DN_SIGMA_MULTIPLIER_ACM_LV1", 0.0, 16.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_ACM_LV1("CMC_R2Y_BRIGHTNESS_ACM_LV1", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_INVALID_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_ACM_LV1("CMC_R2Y_CONTRAST_ACM_LV1", -1.0, R2Y_CONTRAST_MAX, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_ACM_LV1("CMC_R2Y_SATURATION_ACM_LV1", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_ACM_LV1("CMC_R2Y_RANGE_MUL_ACM_LV1", 0.0, 2.0, CMC_R2Y_RANGE_MUL_INVALID_DEF, 3);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_ACM_LV1("CMC_HIS_GRID_START_COORDS_ACM_LV1", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1("CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_ACM_LV1("CMC_DPF_WEIGHT_ACM_LV1", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_ACM_LV1("CMC_DPF_THRESHOLD_ACM_LV1", -1, 63, -1);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_ACM_LV1("CMC_TNMC_HIST_CLIP_MIN_ACM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_ACM_LV1("CMC_TNMC_HIST_CLIP_MAX_ACM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_ACM_LV1("CMC_TNMC_ADAPTIVE_ACM_LV1", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_ACM_LV1("CMC_TNM_IN_Y_ACM_LV1", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_ACM_LV1("CMC_TNM_OUT_Y_ACM_LV1", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_ACM_LV1("CMC_TNM_OUT_C_ACM_LV1", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_ACM_LV1("CMC_TNM_FLAT_FACTOR_ACM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_ACM_LV1("CMC_TNM_WEIGHT_LINE_ACM_LV1", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1("CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_ACM_LV1("CMC_TNM_COLOUR_SATURATION_ACM_LV1", -1.0, 16.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1("CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_ACM_LV1("CMC_TNMC_WDR_CEILING_ACM_LV1", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_ACM_LV1("CMC_TNMC_WDR_FLOOR_ACM_LV1", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1("CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_ACM_LV1("CMC_TNMC_GAMMA_ACM_LV1", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1("CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1", 0.0, 1.0, 0.83);

const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_ACM_LV2("CMC_DN_TARGET_IDX_ACM_LV2", 0, 63, 0);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_ACM_LV2("CMC_BLC_SENSOR_BLACK_ACM_LV2", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_ACM_LV2("CMC_BLC_SYS_BLACK_ACM_LV2", 0, 32767, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_ACM_LV2("CMC_DNS_STRENGTH_ACM_LV2", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_ACM_LV2("CMC_DNS_READ_NOISE_ACM_LV2",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_ACM_LV2("CMC_DNS_WELL_DEPTH_ACM_LV2",0, 65535, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_ACM_LV2("CMC_SHA_RADIUS_ACM_LV2", 0.5, 10.0, 2.5);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_ACM_LV2("CMC_SHA_STRENGTH_ACM_LV2", 0.0, 1.0, 0.4);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_ACM_LV2("CMC_SHA_THRESH_ACM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_ACM_LV2("CMC_SHA_DETAIL_ACM_LV2", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_ACM_LV2("CMC_SHA_EDGE_SCALE_ACM_LV2", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_ACM_LV2("CMC_SHA_EDGE_OFFSET_ACM_LV2", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_ACM_LV2("CMC_SHA_DENOISE_BYPASS_ACM_LV2", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_ACM_LV2("CMC_SHA_DN_TAU_MULTIPLIER_ACM_LV2", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_ACM_LV2("CMC_SHA_DN_SIGMA_MULTIPLIER_ACM_LV2", 0.0, 16.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_ACM_LV2("CMC_R2Y_BRIGHTNESS_ACM_LV2", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_INVALID_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_ACM_LV2("CMC_R2Y_CONTRAST_ACM_LV2", -1.0, R2Y_CONTRAST_MAX, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_ACM_LV2("CMC_R2Y_SATURATION_ACM_LV2", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_ACM_LV2("CMC_R2Y_RANGE_MUL_ACM_LV2", 0.0, 2.0, CMC_R2Y_RANGE_MUL_INVALID_DEF, 3);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_ACM_LV2("CMC_HIS_GRID_START_COORDS_ACM_LV2", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2("CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_ACM_LV2("CMC_DPF_WEIGHT_ACM_LV2", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_ACM_LV2("CMC_DPF_THRESHOLD_ACM_LV2", -1, 63, -1);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_ACM_LV2("CMC_TNMC_HIST_CLIP_MIN_ACM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_ACM_LV2("CMC_TNMC_HIST_CLIP_MAX_ACM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_ACM_LV2("CMC_TNMC_ADAPTIVE_ACM_LV2", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_ACM_LV2("CMC_TNM_IN_Y_ACM_LV2", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_ACM_LV2("CMC_TNM_OUT_Y_ACM_LV2", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_ACM_LV2("CMC_TNM_OUT_C_ACM_LV2", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_ACM_LV2("CMC_TNM_FLAT_FACTOR_ACM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_ACM_LV2("CMC_TNM_WEIGHT_LINE_ACM_LV2", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2("CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_ACM_LV2("CMC_TNM_COLOUR_SATURATION_ACM_LV2", -1.0, 16.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2("CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_ACM_LV2("CMC_TNMC_WDR_CEILING_ACM_LV2", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_ACM_LV2("CMC_TNMC_WDR_FLOOR_ACM_LV2", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2("CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_ACM_LV2("CMC_TNMC_GAMMA_ACM_LV2", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2("CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2", 0.0, 1.0, 0.83);

const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DN_TARGET_IDX_ACM_LV3("CMC_DN_TARGET_IDX_ACM_MAX", 0, 63, 0);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_BLC_SENSOR_BLACK_ACM_LV3("CMC_BLC_SENSOR_BLACK_ACM_MAX", -128, 127, CMC_BLC_SENSOR_BLACK_DEF, 4);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_BLC_SYS_BLACK_ACM_LV3("CMC_BLC_SYS_BLACK_ACM_MAX", 0, 32767, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_STRENGTH_ACM_LV3("CMC_DNS_STRENGTH_ACM_MAX", 0.0, 6.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DNS_READ_NOISE_ACM_LV3("CMC_DNS_READ_NOISE_ACM_MAX",0.0,100.0,0.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DNS_WELLDEPTH_ACM_LV3("CMC_DNS_WELL_DEPTH_ACM_MAX",0, 65535, 0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_RADIUS_ACM_LV3("CMC_SHA_RADIUS_ACM_MAX", 0.05, 10.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_STRENGTH_ACM_LV3("CMC_SHA_STRENGTH_ACM_MAX", 0.0, 1.0, 0.4);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_THRESH_ACM_LV3("CMC_SHA_THRESH_ACM_MAX", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_DETAIL_ACM_LV3("CMC_SHA_DETAIL_ACM_MAX", 0.0, 1.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_SCALE_ACM_LV3("CMC_SHA_EDGE_SCALE_ACM_MAX", 0.0, 1.0, 0.25);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHA_EDGE_OFFSET_ACM_LV3("CMC_SHA_EDGE_OFFSET_ACM_MAX", -1.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_SHA_DENOISE_BYPASS_ACM_LV3("CMC_SHA_DENOISE_BYPASS_ACM_MAX", false);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_TAU_ACM_LV3("CMC_SHA_DN_TAU_MULTIPLIER_ACM_MAX", 0.0, 16.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_SHADN_SIGMA_ACM_LV3("CMC_SHA_DN_SIGMA_MULTIPLIER_ACM_MAX", 0.0, 16.0, 1.0);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_BRIGHTNESS_ACM_LV3("CMC_R2Y_BRIGHTNESS_ACM_MAX", R2Y_BRIGHTNESS_MIN, R2Y_BRIGHTNESS_MAX, R2Y_BRIGHTNESS_INVALID_DEF);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_CONTRAST_ACM_LV3("CMC_R2Y_CONTRAST_ACM_MAX", -1.0, R2Y_CONTRAST_MAX, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_R2Y_SATURATION_ACM_LV3("CMC_R2Y_SATURATION_ACM_MAX", R2Y_SATURATION_MIN, R2Y_SATURATION_MAX, R2Y_SATURATION_DEF);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_R2Y_RANGE_MUL_ACM_LV3("CMC_R2Y_RANGE_MUL_ACM_MAX", 0.0, 2.0, CMC_R2Y_RANGE_MUL_INVALID_DEF, 3);

const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_START_COORDS_ACM_LV3("CMC_HIS_GRID_START_COORDS_ACM_MAX", -1, 8191, CMC_HIS_GRIDSTART_DEF_MIN, 2);
const ISPC::ParamDefArray<int> ISPC::ControlCMC::CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3("CMC_HIS_GRID_TILE_DIMENSIONS_ACM_MAX", -1, 4095, HIS_GRIDSIZE_DEF_MIN, 2);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_DPF_WEIGHT_ACM_LV3("CMC_DPF_WEIGHT_ACM_MAX", -1.0, 255.0, -1.0);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_DPF_THRESHOLD_ACM_LV3("CMC_DPF_THRESHOLD_ACM_MAX", -1, 63, -1);

const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMIN_ACM_LV3("CMC_TNMC_HIST_CLIP_MIN_ACM_MAX", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_HISTMAX_ACM_LV3("CMC_TNMC_HIST_CLIP_MAX_ACM_MAX", 0.0, 1.0, 0.0);
const ISPC::ParamDefSingle<bool> ISPC::ControlCMC::CMC_TNMC_ADAPTIVE_ACM_LV3("CMC_TNMC_ADAPTIVE_ACM_MAX", false);

const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_IN_Y_ACM_LV3("CMC_TNM_IN_Y_ACM_MAX", -128, 128, CMC_TNM_IN_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_Y_ACM_LV3("CMC_TNM_OUT_Y_ACM_MAX", 0, 255, CMC_TNM_OUT_Y_INVALID, 2);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNM_OUT_C_ACM_LV3("CMC_TNM_OUT_C_ACM_MAX", 0, 255, CMC_TNM_OUT_C_INVALID, 2);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_FLAT_FACTOR_ACM_LV3("CMC_TNM_FLAT_FACTOR_ACM_MAX", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_WEIGHT_LINE_ACM_LV3("CMC_TNM_WEIGHT_LINE_ACM_MAX", 0.0, 1.0, 0.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3("CMC_TNM_COLOUR_CONFIDENCE_ACM_MAX", -1.0, 64.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNM_COLOUR_SATURATION_ACM_LV3("CMC_TNM_COLOUR_SATURATION_ACM_MAX", -1.0, 16.0, -1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3("CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_MAX", 0.0, 1.0, 0.002);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3("CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_MAX", 0.0, 1.0, 0.01);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3("CMC_TNMC_OVERSHOT_THRESHOLD_ACM_MAX", 0.0, 5.0, 2.0);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_CEILING_ACM_LV3("CMC_TNMC_WDR_CEILING_ACM_MAX", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_CEILING_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDefArray<double> ISPC::ControlCMC::CMC_TNMC_WDR_FLOOR_ACM_LV3("CMC_TNMC_WDR_FLOOR_ACM_MAX", TNMC_WDR_MIN, TNMC_WDR_MAX, CMC_TNMC_WDR_FLOOR_DEF, TNMC_WDR_SEGMENT_CNT);
const ISPC::ParamDef<int> ISPC::ControlCMC::CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3("CMC_TNMC_GAMMA_CRV_MODE_ACM_MAX", 0, 2, 0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_GAMMA_ACM_LV3("CMC_TNMC_GAMMA_ACM_MAX", 0.0, 2.0, 1.0);
const ISPC::ParamDef<double> ISPC::ControlCMC::CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3("CMC_TNMC_BEZIER_CTRL_PNT_ACM_MAX", 0.0, 1.0, 0.83);
#endif //INFOTM_ENABLE_GAIN_LEVEL_IDX


ISPC::ParameterGroup ISPC::ControlCMC::getGroup()
{
    ParameterGroup group;

#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) || defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    group.header = "// Color Mode Change Control parameters";
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

    group.parameters.insert(CMC_ENABLE.name);
    group.parameters.insert(CMC_DN_TARGET_IDX_CHANGE_ENABLE.name);
    group.parameters.insert(CMC_ENABLE_AVG_GAIN.name);

    group.parameters.insert(CMC_R2Y_SATURATION_EXPECT.name);

    group.parameters.insert(CMC_SHA_STRENGTH_EXPECT.name);

    group.parameters.insert(CMC_NIGHT_MODE_DETECT_ENABLE.name);
    group.parameters.insert(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.name);
    group.parameters.insert(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.name);
    group.parameters.insert(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.name);
    group.parameters.insert(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.name);
    group.parameters.insert(CMC_NIGHT_MODE_DETECT_WEIGHTING.name);

    group.parameters.insert(CMC_ENABLE_CAPTURE_IQ.name);
    group.parameters.insert(CMC_CAPTURE_CCM_RATIO.name);
    group.parameters.insert(CMC_R2Y_CAPTURE_RANGE_MUL.name);
    group.parameters.insert(CMC_TNM_CAPTURE_IN_Y.name);
    group.parameters.insert(CMC_TNM_CAPTURE_OUT_Y.name);
    group.parameters.insert(CMC_TNM_CAPTURE_OUT_C.name);

    //3D-Denoise target index.
    group.parameters.insert(CMC_DN_TARGET_IDX_FCM.name);
#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
    ///////////////////////////////////////Flat Color Mode setting
    //BLC SENSOR BLACK
    group.parameters.insert(CMC_BLC_SENSOR_BLACK_FCM.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_FCM.name);

    //DNS
    group.parameters.insert(CMC_DNS_STRENGTH_FCM.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_FCM.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_FCM.name);

    //SHA
    group.parameters.insert(CMC_SHA_RADIUS_FCM.name);
    group.parameters.insert(CMC_SHA_STRENGTH_FCM.name);
    group.parameters.insert(CMC_SHA_THRESH_FCM.name);
    group.parameters.insert(CMC_SHA_DETAIL_FCM.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_FCM.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_FCM.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_FCM.name);
    group.parameters.insert(CMC_SHADN_TAU_FCM.name);
    group.parameters.insert(CMC_SHADN_SIGMA_FCM.name);

    //R2Y
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_FCM.name);
    group.parameters.insert(CMC_R2Y_CONTRAST_FCM.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_FCM.name);
    group.parameters.insert(CMC_R2Y_SATURATION_FCM.name);

    //HIS
    group.parameters.insert(CMC_HIS_GRID_START_COORDS_FCM.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.name);

    //DPF
    group.parameters.insert(CMC_DPF_WEIGHT_FCM.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_FCM.name);

    //TNM
    group.parameters.insert(CMC_TNMC_HISTMIN_FCM.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_FCM.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_FCM.name);
    
    group.parameters.insert(CMC_TNM_IN_Y_FCM.name);
    group.parameters.insert(CMC_TNM_OUT_Y_FCM.name);
    group.parameters.insert(CMC_TNM_OUT_C_FCM.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_FCM.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_FCM.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_FCM.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_FCM.name);
    group.parameters.insert(CMC_TNMC_ENABLE_GAMMA_FCM.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_FCM.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_FCM.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_FCM.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_FCM.name);

    //AE
    group.parameters.insert(CMC_AE_TARGET_BRIGHTNESS_FCM.name);
    group.parameters.insert(CMC_AE_TARGET_MIN_FCM.name);

    //Sensor Max Gain
    group.parameters.insert(CMC_SENSOR_MAX_GAIN_FCM.name);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    group.parameters.insert(CMC_DN_TARGET_IDX_FCM_LV1.name);

    group.parameters.insert(CMC_BLC_SENSOR_BLACK_FCM_LV1.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_FCM_LV1.name);

    group.parameters.insert(CMC_DNS_STRENGTH_FCM_LV1.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_FCM_LV1.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_FCM_LV1.name);

    group.parameters.insert(CMC_SHA_RADIUS_FCM_LV1.name);
    group.parameters.insert(CMC_SHA_STRENGTH_FCM_LV1.name);
    group.parameters.insert(CMC_SHA_THRESH_FCM_LV1.name);
    group.parameters.insert(CMC_SHA_DETAIL_FCM_LV1.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_FCM_LV1.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_FCM_LV1.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_FCM_LV1.name);
    group.parameters.insert(CMC_SHADN_TAU_FCM_LV1.name);
    group.parameters.insert(CMC_SHADN_SIGMA_FCM_LV1.name);

    group.parameters.insert(CMC_R2Y_CONTRAST_FCM_LV1.name);
    group.parameters.insert(CMC_R2Y_SATURATION_FCM_LV1.name);
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_FCM_LV1.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_FCM_LV1.name);

    group.parameters.insert(CMC_HIS_GRID_START_COORDS_FCM_LV1.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.name);

    group.parameters.insert(CMC_DPF_WEIGHT_FCM_LV1.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_FCM_LV1.name);

    group.parameters.insert(CMC_TNMC_HISTMIN_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_FCM_LV1.name);

    group.parameters.insert(CMC_TNM_IN_Y_FCM_LV1.name);
    group.parameters.insert(CMC_TNM_OUT_Y_FCM_LV1.name);
    group.parameters.insert(CMC_TNM_OUT_C_FCM_LV1.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_FCM_LV1.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_FCM_LV1.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_GAMMA_FCM_LV1.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.name);

    group.parameters.insert(CMC_DN_TARGET_IDX_FCM_LV2.name);

    group.parameters.insert(CMC_BLC_SENSOR_BLACK_FCM_LV2.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_FCM_LV2.name);

    group.parameters.insert(CMC_DNS_STRENGTH_FCM_LV2.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_FCM_LV2.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_FCM_LV2.name);

    group.parameters.insert(CMC_SHA_RADIUS_FCM_LV2.name);
    group.parameters.insert(CMC_SHA_STRENGTH_FCM_LV2.name);
    group.parameters.insert(CMC_SHA_THRESH_FCM_LV2.name);
    group.parameters.insert(CMC_SHA_DETAIL_FCM_LV2.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_FCM_LV2.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_FCM_LV2.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_FCM_LV2.name);
    group.parameters.insert(CMC_SHADN_TAU_FCM_LV2.name);
    group.parameters.insert(CMC_SHADN_SIGMA_FCM_LV2.name);

    group.parameters.insert(CMC_R2Y_CONTRAST_FCM_LV2.name);
    group.parameters.insert(CMC_R2Y_SATURATION_FCM_LV2.name);
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_FCM_LV2.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_FCM_LV2.name);

    group.parameters.insert(CMC_HIS_GRID_START_COORDS_FCM_LV2.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.name);

    group.parameters.insert(CMC_DPF_WEIGHT_FCM_LV2.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_FCM_LV2.name);

    group.parameters.insert(CMC_TNMC_HISTMIN_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_IN_Y_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_OUT_Y_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_OUT_C_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_GAMMA_FCM_LV2.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.name);

    group.parameters.insert(CMC_DN_TARGET_IDX_FCM_LV3.name);

    group.parameters.insert(CMC_BLC_SENSOR_BLACK_FCM_LV3.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_FCM_LV3.name);

    group.parameters.insert(CMC_DNS_STRENGTH_FCM_LV3.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_FCM_LV3.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_FCM_LV3.name);

    group.parameters.insert(CMC_SHA_RADIUS_FCM_LV3.name);
    group.parameters.insert(CMC_SHA_STRENGTH_FCM_LV3.name);
    group.parameters.insert(CMC_SHA_THRESH_FCM_LV3.name);
    group.parameters.insert(CMC_SHA_DETAIL_FCM_LV3.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_FCM_LV3.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_FCM_LV3.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_FCM_LV3.name);
    group.parameters.insert(CMC_SHADN_TAU_FCM_LV3.name);
    group.parameters.insert(CMC_SHADN_SIGMA_FCM_LV3.name);

    group.parameters.insert(CMC_R2Y_CONTRAST_FCM_LV3.name);
    group.parameters.insert(CMC_R2Y_SATURATION_FCM_LV3.name);
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_FCM_LV3.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_FCM_LV3.name);

    group.parameters.insert(CMC_HIS_GRID_START_COORDS_FCM_LV3.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.name);

    group.parameters.insert(CMC_DPF_WEIGHT_FCM_LV3.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_FCM_LV3.name);

    group.parameters.insert(CMC_TNMC_HISTMIN_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_IN_Y_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_OUT_Y_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_OUT_C_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_GAMMA_FCM_LV3.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.name);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

    ///////////////////////////////////////Advanced Color Mode setting
    //3D-Denoise target index.
    group.parameters.insert(CMC_DN_TARGET_IDX_ACM.name);
#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
    //some SHA, R2Y, TNM, AE same as the module it is.
    //..

    //Sensor Max Gain
    group.parameters.insert(CMC_SENSOR_MAX_GAIN_ACM.name);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

#if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    group.parameters.insert(CMC_SENSOR_GAIN_LEVEL_CTRL.name);
    group.parameters.insert(CMC_SENSOR_GAIN_LV1.name);
    group.parameters.insert(CMC_SENSOR_GAIN_LV2.name);
    group.parameters.insert(CMC_SENSOR_GAIN_LV1_INTERPOLATION.name);
    group.parameters.insert(CMC_SENSOR_GAIN_LV2_INTERPOLATION.name);
    group.parameters.insert(CMC_ENABLE_INTERPOLATION_GAMMA.name);
    group.parameters.insert(CMC_INTERPOLATION_GAMMA_0.name);
    group.parameters.insert(CMC_INTERPOLATION_GAMMA_1.name);
    group.parameters.insert(CMC_INTERPOLATION_GAMMA_2.name);

    group.parameters.insert(CMC_CCM_ATTENUATION_LV1.name);
    group.parameters.insert(CMC_CCM_ATTENUATION_LV2.name);
    group.parameters.insert(CMC_CCM_ATTENUATION_LV3.name);

    group.parameters.insert(CMC_DN_TARGET_IDX_ACM_LV1.name);

    group.parameters.insert(CMC_BLC_SENSOR_BLACK_ACM_LV1.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_ACM_LV1.name);

    group.parameters.insert(CMC_DNS_STRENGTH_ACM_LV1.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_ACM_LV1.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_ACM_LV1.name);

    group.parameters.insert(CMC_SHA_RADIUS_ACM_LV1.name);
    group.parameters.insert(CMC_SHA_STRENGTH_ACM_LV1.name);
    group.parameters.insert(CMC_SHA_THRESH_ACM_LV1.name);
    group.parameters.insert(CMC_SHA_DETAIL_ACM_LV1.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_ACM_LV1.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_ACM_LV1.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_ACM_LV1.name);
    group.parameters.insert(CMC_SHADN_TAU_ACM_LV1.name);
    group.parameters.insert(CMC_SHADN_SIGMA_ACM_LV1.name);

    group.parameters.insert(CMC_R2Y_CONTRAST_ACM_LV1.name);
    group.parameters.insert(CMC_R2Y_SATURATION_ACM_LV1.name);
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_ACM_LV1.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_ACM_LV1.name);

    group.parameters.insert(CMC_HIS_GRID_START_COORDS_ACM_LV1.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.name);

    group.parameters.insert(CMC_DPF_WEIGHT_ACM_LV1.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_ACM_LV1.name);

    group.parameters.insert(CMC_TNMC_HISTMIN_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_ACM_LV1.name);
    
    group.parameters.insert(CMC_TNM_IN_Y_ACM_LV1.name);
    group.parameters.insert(CMC_TNM_OUT_Y_ACM_LV1.name);
    group.parameters.insert(CMC_TNM_OUT_C_ACM_LV1.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_ACM_LV1.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_ACM_LV1.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_GAMMA_ACM_LV1.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.name);

    group.parameters.insert(CMC_DN_TARGET_IDX_ACM_LV2.name);

    group.parameters.insert(CMC_BLC_SENSOR_BLACK_ACM_LV2.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_ACM_LV2.name);

    group.parameters.insert(CMC_DNS_STRENGTH_ACM_LV2.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_ACM_LV2.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_ACM_LV2.name);

    group.parameters.insert(CMC_SHA_RADIUS_ACM_LV2.name);
    group.parameters.insert(CMC_SHA_STRENGTH_ACM_LV2.name);
    group.parameters.insert(CMC_SHA_THRESH_ACM_LV2.name);
    group.parameters.insert(CMC_SHA_DETAIL_ACM_LV2.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_ACM_LV2.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_ACM_LV2.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_ACM_LV2.name);
    group.parameters.insert(CMC_SHADN_TAU_ACM_LV2.name);
    group.parameters.insert(CMC_SHADN_SIGMA_ACM_LV2.name);

    group.parameters.insert(CMC_R2Y_CONTRAST_ACM_LV2.name);
    group.parameters.insert(CMC_R2Y_SATURATION_ACM_LV2.name);
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_ACM_LV2.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_ACM_LV2.name);

    group.parameters.insert(CMC_HIS_GRID_START_COORDS_ACM_LV2.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.name);

    group.parameters.insert(CMC_DPF_WEIGHT_ACM_LV2.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_ACM_LV2.name);

    group.parameters.insert(CMC_TNMC_HISTMIN_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_ACM_LV2.name);

    group.parameters.insert(CMC_TNM_IN_Y_ACM_LV2.name);
    group.parameters.insert(CMC_TNM_OUT_Y_ACM_LV2.name);
    group.parameters.insert(CMC_TNM_OUT_C_ACM_LV2.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_ACM_LV2.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_ACM_LV2.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_GAMMA_ACM_LV2.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.name);

    group.parameters.insert(CMC_DN_TARGET_IDX_ACM_LV3.name);

    group.parameters.insert(CMC_BLC_SENSOR_BLACK_ACM_LV3.name);
    group.parameters.insert(CMC_BLC_SYS_BLACK_ACM_LV3.name);

    group.parameters.insert(CMC_DNS_STRENGTH_ACM_LV3.name);
    group.parameters.insert(CMC_DNS_READ_NOISE_ACM_LV3.name);
    group.parameters.insert(CMC_DNS_WELLDEPTH_ACM_LV3.name);

    group.parameters.insert(CMC_SHA_RADIUS_ACM_LV3.name);
    group.parameters.insert(CMC_SHA_STRENGTH_ACM_LV3.name);
    group.parameters.insert(CMC_SHA_THRESH_ACM_LV3.name);
    group.parameters.insert(CMC_SHA_DETAIL_ACM_LV3.name);
    group.parameters.insert(CMC_SHA_EDGE_SCALE_ACM_LV3.name);
    group.parameters.insert(CMC_SHA_EDGE_OFFSET_ACM_LV3.name);
    group.parameters.insert(CMC_SHA_DENOISE_BYPASS_ACM_LV3.name);
    group.parameters.insert(CMC_SHADN_TAU_ACM_LV3.name);
    group.parameters.insert(CMC_SHADN_SIGMA_ACM_LV3.name);

    group.parameters.insert(CMC_R2Y_CONTRAST_ACM_LV3.name);
    group.parameters.insert(CMC_R2Y_SATURATION_ACM_LV3.name);
    group.parameters.insert(CMC_R2Y_BRIGHTNESS_ACM_LV3.name);
    group.parameters.insert(CMC_R2Y_RANGE_MUL_ACM_LV3.name);

    group.parameters.insert(CMC_HIS_GRID_START_COORDS_ACM_LV3.name);
    group.parameters.insert(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.name);

    group.parameters.insert(CMC_DPF_WEIGHT_ACM_LV3.name);
    group.parameters.insert(CMC_DPF_THRESHOLD_ACM_LV3.name);

    group.parameters.insert(CMC_TNMC_HISTMIN_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_HISTMAX_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_ADAPTIVE_ACM_LV3.name);

    group.parameters.insert(CMC_TNM_IN_Y_ACM_LV3.name);
    group.parameters.insert(CMC_TNM_OUT_Y_ACM_LV3.name);
    group.parameters.insert(CMC_TNM_OUT_C_ACM_LV3.name);
    group.parameters.insert(CMC_TNM_FLAT_FACTOR_ACM_LV3.name);
    group.parameters.insert(CMC_TNM_WEIGHT_LINE_ACM_LV3.name);
    group.parameters.insert(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.name);
    group.parameters.insert(CMC_TNM_COLOUR_SATURATION_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_WDR_CEILING_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_WDR_FLOOR_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_GAMMA_ACM_LV3.name);
    group.parameters.insert(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.name);
#endif //INFOTM_ENABLE_GAIN_LEVEL_IDX

    return group;
}

ISPC::ControlCMC::ControlCMC(const std::string &logTag)
    : ControlModuleBase(logTag)
{

    bCmcHasChange = false;
    bShaStrengthChange = false;;
}

////////////////////////////////
//#define GMA_DBG
//Precompensation=1/gamma
IMG_RESULT ISPC::ControlCMC::BuildGammaCurve(double* fPrecompensation, IMG_INT cnt)
{
    int i, j;
    IMG_FLOAT f;

    for (i=0; i<cnt; i++) {
#ifdef GMA_DBG
        printf("\n=====gma(%d, %f)======\n", i, fPrecompensation[i]);
#endif

        for (j=0; j<GMA_P_CNT; j++) {
            f = (j + 0.5F) / GMA_P_CNT;
#ifdef USE_MATH_NEON
            f = powf_neon(f, (IMG_FLOAT)1/fPrecompensation[i]);
#else
            f = (float) pow(f, (IMG_FLOAT)1/fPrecompensation[i]);
#endif
            afGammaLUT[i][j] = (f*GMA_P_CNT - 0.5F)/256;

#ifdef GMA_DBG
            if (0 == (j % 10)) {
                printf("%f \n", afGammaLUT[i][j]);
            } else {
                printf("%f ", afGammaLUT[i][j]);
            }
//            afGammaLUT[i] = (UNIT8)(f * 256 - 0.5F);
#endif
        }
#ifdef GMA_DBG
        printf("\n==================\n");
#endif
    }

    return IMG_SUCCESS;
}
////////////////////////////////

IMG_RESULT ISPC::ControlCMC::load(const ParameterList &parameters)
{    
    int i;

    bCmcEnable = parameters.getParameter(CMC_ENABLE);
    bDnTargetIdxChageEnable = parameters.getParameter(CMC_DN_TARGET_IDX_CHANGE_ENABLE);
    bEnableCalcAvgGain = parameters.getParameter(CMC_ENABLE_AVG_GAIN);
    bEnableInterpolationGamma = parameters.getParameter(CMC_ENABLE_INTERPOLATION_GAMMA);

    fR2YSaturationExpect = parameters.getParameter(CMC_R2Y_SATURATION_EXPECT);

    fShaStrengthExpect = parameters.getParameter(CMC_SHA_STRENGTH_EXPECT);

    bCmcNightModeDetectEnable = parameters.getParameter(CMC_NIGHT_MODE_DETECT_ENABLE);
    fCmcNightModeDetectBrightnessEnter = parameters.getParameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER);
    fCmcNightModeDetectBrightnessExit = parameters.getParameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT);
    fCmcNightModeDetectGainEnter = parameters.getParameter(CMC_NIGHT_MODE_DETECT_GAIN_ENTER);
    fCmcNightModeDetectGainExit = parameters.getParameter(CMC_NIGHT_MODE_DETECT_GAIN_EXIT);
    fCmcNightModeDetectWeighting = parameters.getParameter(CMC_NIGHT_MODE_DETECT_WEIGHTING);

    bEnableCaptureIQ = parameters.getParameter(CMC_ENABLE_CAPTURE_IQ);
    fCmcCaptureModeCCMRatio = parameters.getParameter(CMC_CAPTURE_CCM_RATIO);
    for (i = 0 ; i < 3 ; i++) {
        fCmcCaptureR2YRangeMul[i] = parameters.getParameter(CMC_R2Y_CAPTURE_RANGE_MUL, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iCmcCaptureInY[i] = parameters.getParameter(CMC_TNM_CAPTURE_IN_Y, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iCmcCaptureOutY[i] = parameters.getParameter(CMC_TNM_CAPTURE_OUT_Y, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iCmcCaptureOutC[i] = parameters.getParameter(CMC_TNM_CAPTURE_OUT_C, i);
    }

    //3D-Denoise target index.
    ui32DnTargetIdx_fcm = parameters.getParameter(CMC_DN_TARGET_IDX_FCM);
#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
    ///////////////////////////////////////Flat Color Mode setting
    //BLC_SENSOR_BLACK
    for (i = 0 ; i < 4 ; i++) {
        ui32BlcSensorBlack_fcm[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_FCM, i);
    }
    ui32SystemBlack_fcm = parameters.getParameter(CMC_BLC_SYS_BLACK_FCM);
    if (ui32SystemBlack_fcm <= 0) {
        ui32SystemBlack_fcm = parameters.getParameter(CMC_BLC_SYS_BLACK_ACM);
    }

    //DNS
    fDnsStrength_fcm = parameters.getParameter(CMC_DNS_STRENGTH_FCM);
    fDnsReadNoise_fcm = parameters.getParameter(CMC_DNS_READ_NOISE_FCM);
    if (fDnsReadNoise_fcm == 0) {
        fDnsReadNoise_fcm = parameters.getParameter(CMC_DNS_READ_NOISE_ACM);
    }
    iDnsWellDepth_fcm = parameters.getParameter(CMC_DNS_WELLDEPTH_FCM);
    if (iDnsWellDepth_fcm == 0) {
        iDnsWellDepth_fcm = parameters.getParameter(CMC_DNS_WELLDEPTH_ACM);
    }

    //SHA
    fRadius_fcm = parameters.getParameter(CMC_SHA_RADIUS_FCM);
    fStrength_fcm = parameters.getParameter(CMC_SHA_STRENGTH_FCM);
    fThreshold_fcm = parameters.getParameter(CMC_SHA_THRESH_FCM);
    fDetail_fcm = parameters.getParameter(CMC_SHA_DETAIL_FCM);
    fEdgeScale_fcm = parameters.getParameter(CMC_SHA_EDGE_SCALE_FCM);
    fEdgeOffset_fcm = parameters.getParameter(CMC_SHA_EDGE_OFFSET_FCM);
    bBypassDenoise_fcm = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_FCM);
    fDenoiseTau_fcm = parameters.getParameter(CMC_SHADN_TAU_FCM);
    fDenoiseSigma_fcm = parameters.getParameter(CMC_SHADN_SIGMA_FCM);

    //R2Y
    fBrightness_fcm = parameters.getParameter(CMC_R2Y_BRIGHTNESS_FCM);
    fContrast_fcm = parameters.getParameter(CMC_R2Y_CONTRAST_FCM);
    fSaturation_fcm = parameters.getParameter(CMC_R2Y_SATURATION_FCM);
    for (i = 0 ; i < 3 ; i++) {
        aRangeMult_fcm[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_FCM, i);
    }

    //HIS
    for (i = 0 ; i < 2 ; i++) {
        iGridStartCoords_fcm[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_FCM, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iGridTileDimensions_fcm[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM, i);
    }

    //DPF
    fDpfWeight_fcm = parameters.getParameter(CMC_DPF_WEIGHT_FCM);
    iDpfThreshold_fcm = parameters.getParameter(CMC_DPF_THRESHOLD_FCM);

    //TNM

    fHisMin_fcm = parameters.getParameter(CMC_TNMC_HISTMIN_FCM);
    if (fHisMin_fcm == 0.0)
    {
        fHisMin_fcm = parameters.getParameter(CMC_TNMC_HISTMIN_ACM);
    }
    fHisMax_fcm = parameters.getParameter(CMC_TNMC_HISTMAX_FCM);
    if (fHisMax_acm == 0.0)
    {
        fHisMax_acm = parameters.getParameter(CMC_TNMC_HISTMAX_ACM);
    }
    bTnmcAdaptive_fcm = parameters.getParameter(CMC_TNMC_ADAPTIVE_FCM);
        
    for (i = 0 ; i < 2 ; i++) {
        iInY_fcm[i] = parameters.getParameter(CMC_TNM_IN_Y_FCM, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutY_fcm[i] = parameters.getParameter(CMC_TNM_OUT_Y_FCM, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutC_fcm[i] = parameters.getParameter(CMC_TNM_OUT_C_FCM, i);
    }
    fFlatFactor_fcm = parameters.getParameter(CMC_TNM_FLAT_FACTOR_FCM);
    fWeightLine_fcm = parameters.getParameter(CMC_TNM_WEIGHT_LINE_FCM);
    fColourConfidence_fcm = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_FCM);
    fColourSaturation_fcm = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_FCM);
    bEnableGamma_fcm = parameters.getParameter(CMC_TNMC_ENABLE_GAMMA_FCM);
    fEqualBrightSupressRatio_fcm = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM);
    fEqualDarkSupressRatio_fcm = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM);
    fOvershotThreshold_fcm = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM);
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrCeiling_fcm[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_FCM, i);
    }
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrFloor_fcm[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_FCM, i);
    }
    ui32GammaCrvMode_fcm = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_FCM);
    fTnmGamma_fcm = parameters.getParameter(CMC_TNMC_GAMMA_FCM);
    fBezierCtrlPnt_fcm = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM);

    //AE
    targetBrightness_fcm = parameters.getParameter(CMC_AE_TARGET_BRIGHTNESS_FCM);
    fAeTargetMin_fcm = parameters.getParameter(CMC_AE_TARGET_MIN_FCM);

    //Sensor Max Gain
    fSensorMaxGain_fcm = parameters.getParameter(CMC_SENSOR_MAX_GAIN_FCM);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    ui32DnTargetIdx_fcm_lv1 = parameters.getParameter(CMC_DN_TARGET_IDX_FCM_LV1);

    for (i = 0 ; i < 4 ; i++) {
        ui32BlcSensorBlack_fcm_lv1[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_FCM_LV1, i);
    }
    ui32SystemBlack_fcm_lv1 = parameters.getParameter(CMC_BLC_SYS_BLACK_FCM_LV1);
    if (ui32SystemBlack_fcm_lv1 <= 0) {
        ui32SystemBlack_fcm_lv1 = ui32SystemBlack_fcm;
    }

    fDnsStrength_fcm_lv1 = parameters.getParameter(CMC_DNS_STRENGTH_FCM_LV1);
    fDnsReadNoise_fcm_lv1 = parameters.getParameter(CMC_DNS_READ_NOISE_FCM_LV1);
    if (fDnsReadNoise_fcm_lv1 == 0) {
        fDnsReadNoise_fcm_lv1 = fDnsReadNoise_fcm;
    }
    iDnsWellDepth_fcm_lv1 = parameters.getParameter(CMC_DNS_WELLDEPTH_FCM_LV1);
    if (iDnsWellDepth_fcm_lv1 == 0) {
        iDnsWellDepth_fcm_lv1 = iDnsWellDepth_fcm;
    }

    fRadius_fcm_lv1 = parameters.getParameter(CMC_SHA_RADIUS_FCM_LV1);
    fStrength_fcm_lv1 = parameters.getParameter(CMC_SHA_STRENGTH_FCM_LV1);
    fThreshold_fcm_lv1 = parameters.getParameter(CMC_SHA_THRESH_FCM_LV1);
    fDetail_fcm_lv1 = parameters.getParameter(CMC_SHA_DETAIL_FCM_LV1);
    fEdgeScale_fcm_lv1 = parameters.getParameter(CMC_SHA_EDGE_SCALE_FCM_LV1);
    fEdgeOffset_fcm_lv1 = parameters.getParameter(CMC_SHA_EDGE_OFFSET_FCM_LV1);
    bBypassDenoise_fcm_lv1 = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_FCM_LV1);
    fDenoiseTau_fcm_lv1 = parameters.getParameter(CMC_SHADN_TAU_FCM_LV1);
    fDenoiseSigma_fcm_lv1 = parameters.getParameter(CMC_SHADN_SIGMA_FCM_LV1);

    fContrast_fcm_lv1 = parameters.getParameter(CMC_R2Y_CONTRAST_FCM_LV1);
    fSaturation_fcm_lv1 = parameters.getParameter(CMC_R2Y_SATURATION_FCM_LV1);

    fBrightness_fcm_lv1 = parameters.getParameter(CMC_R2Y_BRIGHTNESS_FCM_LV1);
    for (i = 0 ; i < 3 ; i++) {
        aRangeMult_fcm_lv1[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_FCM_LV1, i);
    }

    for (i = 0 ; i < 2 ; i++) {
        iGridStartCoords_fcm_lv1[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_FCM_LV1, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iGridTileDimensions_fcm_lv1[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1, i);
    }

    fDpfWeight_fcm_lv1 = parameters.getParameter(CMC_DPF_WEIGHT_FCM_LV1);
    iDpfThreshold_fcm_lv1 = parameters.getParameter(CMC_DPF_THRESHOLD_FCM_LV1);

    fHisMin_fcm_lv1 = parameters.getParameter(CMC_TNMC_HISTMIN_FCM_LV1);
    if (fHisMin_fcm_lv1 == 0.0)
    {
        fHisMin_fcm_lv1 = fHisMin_fcm;
    }
    fHisMax_fcm_lv1 = parameters.getParameter(CMC_TNMC_HISTMAX_FCM_LV1);
    if (fHisMax_fcm_lv1 == 0.0)
    {
        fHisMax_fcm_lv1 = fHisMax_fcm;
    }
    bTnmcAdaptive_fcm_lv1 = parameters.getParameter(CMC_TNMC_ADAPTIVE_FCM_LV1);

    for (i = 0 ; i < 2 ; i++) {
        iInY_fcm_lv1[i] = parameters.getParameter(CMC_TNM_IN_Y_FCM_LV1, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutY_fcm_lv1[i] = parameters.getParameter(CMC_TNM_OUT_Y_FCM_LV1, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutC_fcm_lv1[i] = parameters.getParameter(CMC_TNM_OUT_C_FCM_LV1, i);
    }
    fFlatFactor_fcm_lv1 = parameters.getParameter(CMC_TNM_FLAT_FACTOR_FCM_LV1);
    fWeightLine_fcm_lv1 = parameters.getParameter(CMC_TNM_WEIGHT_LINE_FCM_LV1);
    fColourConfidence_fcm_lv1 = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1);
    fColourSaturation_fcm_lv1 = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_FCM_LV1);
    fEqualBrightSupressRatio_fcm_lv1 = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1);
    fEqualDarkSupressRatio_fcm_lv1 = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1);
    fOvershotThreshold_fcm_lv1 = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1);
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrCeiling_fcm_lv1[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_FCM_LV1, i);
    }
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrFloor_fcm_lv1[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_FCM_LV1, i);
    }
    ui32GammaCrvMode_fcm_lv1 = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1);
    fTnmGamma_fcm_lv1 = parameters.getParameter(CMC_TNMC_GAMMA_FCM_LV1);
    fBezierCtrlPnt_fcm_lv1 = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1);

    ui32DnTargetIdx_fcm_lv2 = parameters.getParameter(CMC_DN_TARGET_IDX_FCM_LV2);

    for (i = 0 ; i < 4 ; i++) {
        ui32BlcSensorBlack_fcm_lv2[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_FCM_LV2, i);
    }
    ui32SystemBlack_fcm_lv2 = parameters.getParameter(CMC_BLC_SYS_BLACK_FCM_LV2);
    if (ui32SystemBlack_fcm_lv2 <= 0) {
        ui32SystemBlack_fcm_lv2 = ui32SystemBlack_fcm;
    }

    fDnsStrength_fcm_lv2 = parameters.getParameter(CMC_DNS_STRENGTH_FCM_LV2);
    fDnsReadNoise_fcm_lv2 = parameters.getParameter(CMC_DNS_READ_NOISE_FCM_LV2);
    if (fDnsReadNoise_fcm_lv2 == 0) {
        fDnsReadNoise_fcm_lv2 = fDnsReadNoise_fcm;
    }
    iDnsWellDepth_fcm_lv2 = parameters.getParameter(CMC_DNS_WELLDEPTH_FCM_LV2);
    if (iDnsWellDepth_fcm_lv2 == 0) {
        iDnsWellDepth_fcm_lv2 = iDnsWellDepth_fcm;
    }

    fRadius_fcm_lv2 = parameters.getParameter(CMC_SHA_RADIUS_FCM_LV2);
    fStrength_fcm_lv2 = parameters.getParameter(CMC_SHA_STRENGTH_FCM_LV2);
    fThreshold_fcm_lv2 = parameters.getParameter(CMC_SHA_THRESH_FCM_LV2);
    fDetail_fcm_lv2 = parameters.getParameter(CMC_SHA_DETAIL_FCM_LV2);
    fEdgeScale_fcm_lv2 = parameters.getParameter(CMC_SHA_EDGE_SCALE_FCM_LV2);
    fEdgeOffset_fcm_lv2 = parameters.getParameter(CMC_SHA_EDGE_OFFSET_FCM_LV2);
    bBypassDenoise_fcm_lv2 = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_FCM_LV2);
    fDenoiseTau_fcm_lv2 = parameters.getParameter(CMC_SHADN_TAU_FCM_LV2);
    fDenoiseSigma_fcm_lv2 = parameters.getParameter(CMC_SHADN_SIGMA_FCM_LV2);

    fContrast_fcm_lv2 = parameters.getParameter(CMC_R2Y_CONTRAST_FCM_LV2);
    fSaturation_fcm_lv2 = parameters.getParameter(CMC_R2Y_SATURATION_FCM_LV2);
    
    fBrightness_fcm_lv2 = parameters.getParameter(CMC_R2Y_BRIGHTNESS_FCM_LV2);
    for (i = 0 ; i < 3 ; i++) {
        aRangeMult_fcm_lv2[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_FCM_LV2, i);
    }

    for (i = 0 ; i < 2 ; i++) {
        iGridStartCoords_fcm_lv2[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_FCM_LV2, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iGridTileDimensions_fcm_lv2[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2, i);
    }

    fDpfWeight_fcm_lv2 = parameters.getParameter(CMC_DPF_WEIGHT_FCM_LV2);
    iDpfThreshold_fcm_lv2 = parameters.getParameter(CMC_DPF_THRESHOLD_FCM_LV2);

    fHisMin_fcm_lv2 = parameters.getParameter(CMC_TNMC_HISTMIN_FCM_LV2);
    if (fHisMin_fcm_lv2 == 0.0)
    {
        fHisMin_fcm_lv2 = fHisMin_fcm;
    }
    fHisMax_fcm_lv2 = parameters.getParameter(CMC_TNMC_HISTMAX_FCM_LV2);
    if (fHisMax_fcm_lv2 == 0.0)
    {
        fHisMax_fcm_lv2 = fHisMax_fcm;
    }
    bTnmcAdaptive_fcm_lv2 = parameters.getParameter(CMC_TNMC_ADAPTIVE_FCM_LV2);

    for (i = 0 ; i < 2 ; i++) {
        iInY_fcm_lv2[i] = parameters.getParameter(CMC_TNM_IN_Y_FCM_LV2, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutY_fcm_lv2[i] = parameters.getParameter(CMC_TNM_OUT_Y_FCM_LV2, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutC_fcm_lv2[i] = parameters.getParameter(CMC_TNM_OUT_C_FCM_LV2, i);
    }
    fFlatFactor_fcm_lv2 = parameters.getParameter(CMC_TNM_FLAT_FACTOR_FCM_LV2);
    fWeightLine_fcm_lv2 = parameters.getParameter(CMC_TNM_WEIGHT_LINE_FCM_LV2);
    fColourConfidence_fcm_lv2 = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2);
    fColourSaturation_fcm_lv2 = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_FCM_LV2);
    fEqualBrightSupressRatio_fcm_lv2 = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2);
    fEqualDarkSupressRatio_fcm_lv2 = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2);
    fOvershotThreshold_fcm_lv2 = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2);
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrCeiling_fcm_lv2[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_FCM_LV2, i);
    }
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrFloor_fcm_lv2[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_FCM_LV2, i);
    }
    ui32GammaCrvMode_fcm_lv2 = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2);
    fTnmGamma_fcm_lv2 = parameters.getParameter(CMC_TNMC_GAMMA_FCM_LV2);
    fBezierCtrlPnt_fcm_lv2 = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2);

    if (bEnableInterpolationGamma) {
        ui32DnTargetIdx_fcm_lv3 = parameters.getParameter(CMC_DN_TARGET_IDX_FCM_LV3);

        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_fcm_lv3[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_FCM_LV3, i);
        }
        ui32SystemBlack_fcm_lv3 = parameters.getParameter(CMC_BLC_SYS_BLACK_FCM_LV3);
        if (ui32SystemBlack_fcm_lv3 <= 0) {
            ui32SystemBlack_fcm_lv3 = ui32SystemBlack_fcm;
        }

        fDnsStrength_fcm_lv3 = parameters.getParameter(CMC_DNS_STRENGTH_FCM_LV3);
        fDnsReadNoise_fcm_lv3 = parameters.getParameter(CMC_DNS_READ_NOISE_FCM_LV3);
        if (fDnsReadNoise_fcm_lv3 == 0) {
            fDnsReadNoise_fcm_lv3 = fDnsReadNoise_fcm;
        }
        iDnsWellDepth_fcm_lv3 = parameters.getParameter(CMC_DNS_WELLDEPTH_FCM_LV3);
        if (iDnsWellDepth_fcm_lv3 == 0) {
            iDnsWellDepth_fcm_lv3 = iDnsWellDepth_fcm;
        }

        fRadius_fcm_lv3 = parameters.getParameter(CMC_SHA_RADIUS_FCM_LV3);
        fStrength_fcm_lv3 = parameters.getParameter(CMC_SHA_STRENGTH_FCM_LV3);
        fThreshold_fcm_lv3 = parameters.getParameter(CMC_SHA_THRESH_FCM_LV3);
        fDetail_fcm_lv3 = parameters.getParameter(CMC_SHA_DETAIL_FCM_LV3);
        fEdgeScale_fcm_lv3 = parameters.getParameter(CMC_SHA_EDGE_SCALE_FCM_LV3);
        fEdgeOffset_fcm_lv3 = parameters.getParameter(CMC_SHA_EDGE_OFFSET_FCM_LV3);
        bBypassDenoise_fcm_lv3 = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_FCM_LV3);
        fDenoiseTau_fcm_lv3 = parameters.getParameter(CMC_SHADN_TAU_FCM_LV3);
        fDenoiseSigma_fcm_lv3 = parameters.getParameter(CMC_SHADN_SIGMA_FCM_LV3);

        fContrast_fcm_lv3 = parameters.getParameter(CMC_R2Y_CONTRAST_FCM_LV3);
        fSaturation_fcm_lv3 = parameters.getParameter(CMC_R2Y_SATURATION_FCM_LV3);
        
        fBrightness_fcm_lv3 = parameters.getParameter(CMC_R2Y_BRIGHTNESS_FCM_LV3);
        for (i = 0 ; i < 3 ; i++) {
            aRangeMult_fcm_lv3[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_FCM_LV3, i);
        }
        
        for (i = 0 ; i < 2 ; i++) {
            iGridStartCoords_fcm_lv3[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_FCM_LV3, i);
        }
        for (i = 0 ; i < 2 ; i++) {
            iGridTileDimensions_fcm_lv3[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3, i);
        }

        fDpfWeight_fcm_lv3 = parameters.getParameter(CMC_DPF_WEIGHT_FCM_LV3);
        iDpfThreshold_fcm_lv3 = parameters.getParameter(CMC_DPF_THRESHOLD_FCM_LV3);

        fHisMin_fcm_lv3 = parameters.getParameter(CMC_TNMC_HISTMIN_FCM_LV3);
        if (fHisMin_fcm_lv3 == 0.0)
        {
            fHisMin_fcm_lv3 = fHisMin_fcm;
        }
        fHisMax_fcm_lv3 = parameters.getParameter(CMC_TNMC_HISTMAX_FCM_LV3);
        if (fHisMax_fcm_lv3 == 0.0)
        {
            fHisMax_fcm_lv3 = fHisMax_fcm;
        }
        bTnmcAdaptive_fcm_lv3 = parameters.getParameter(CMC_TNMC_ADAPTIVE_FCM_LV3);

        for (i = 0 ; i < 2 ; i++) {
            iInY_fcm_lv3[i] = parameters.getParameter(CMC_TNM_IN_Y_FCM_LV3, i);
        }
        for (i = 0 ; i < 2 ; i++) {
            iOutY_fcm_lv3[i] = parameters.getParameter(CMC_TNM_OUT_Y_FCM_LV3, i);
        }
        for (i = 0 ; i < 2 ; i++) {
            iOutC_fcm_lv3[i] = parameters.getParameter(CMC_TNM_OUT_C_FCM_LV3, i);
        }
        fFlatFactor_fcm_lv3 = parameters.getParameter(CMC_TNM_FLAT_FACTOR_FCM_LV3);
        fWeightLine_fcm_lv3 = parameters.getParameter(CMC_TNM_WEIGHT_LINE_FCM_LV3);
        fColourConfidence_fcm_lv3 = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3);
        fColourSaturation_fcm_lv3 = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_FCM_LV3);
        fEqualBrightSupressRatio_fcm_lv3 = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3);
        fEqualDarkSupressRatio_fcm_lv3 = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3);
        fOvershotThreshold_fcm_lv3 = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3);
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            fWdrCeiling_fcm_lv3[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_FCM_LV3, i);
        }
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            fWdrFloor_fcm_lv3[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_FCM_LV3, i);
        }
        ui32GammaCrvMode_fcm_lv3 = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3);
        fTnmGamma_fcm_lv3 = parameters.getParameter(CMC_TNMC_GAMMA_FCM_LV3);
        fBezierCtrlPnt_fcm_lv3 = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3);
    }
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

    //3D-Denoise target index.
    ui32DnTargetIdx_acm = parameters.getParameter(CMC_DN_TARGET_IDX_ACM);
#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
    ///////////////////////////////////////Advanced Color Mode setting
    //BLC_SENSOR_BLACK
    for (i = 0 ; i < 4 ; i++) {
        ui32BlcSensorBlack_acm[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_ACM, i);
    }
    ui32SystemBlack_acm = parameters.getParameter(CMC_BLC_SYS_BLACK_ACM);

    //DNS
    fDnsStrength_acm = parameters.getParameter(CMC_DNS_STRENGTH_ACM);
    fDnsReadNoise_acm = parameters.getParameter(CMC_DNS_READ_NOISE_ACM);
    iDnsWellDepth_acm = parameters.getParameter(CMC_DNS_WELLDEPTH_ACM);

    //SHA
    fRadius_acm = parameters.getParameter(CMC_SHA_RADIUS_ACM);
    fStrength_acm = parameters.getParameter(CMC_SHA_STRENGTH_ACM);
    fThreshold_acm = parameters.getParameter(CMC_SHA_THRESH_ACM);
    fDetail_acm = parameters.getParameter(CMC_SHA_DETAIL_ACM);
    fEdgeScale_acm = parameters.getParameter(CMC_SHA_EDGE_SCALE_ACM);
    fEdgeOffset_acm = parameters.getParameter(CMC_SHA_EDGE_OFFSET_ACM);
    bBypassDenoise_acm = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_ACM);
    fDenoiseTau_acm = parameters.getParameter(CMC_SHADN_TAU_ACM);
    fDenoiseSigma_acm = parameters.getParameter(CMC_SHADN_SIGMA_ACM);

    //R2Y
    fBrightness_acm = parameters.getParameter(CMC_R2Y_BRIGHTNESS_ACM);
    fContrast_acm = parameters.getParameter(CMC_R2Y_CONTRAST_ACM);
    fSaturation_acm = parameters.getParameter(CMC_R2Y_SATURATION_ACM);
    for (i = 0 ; i < 3 ; i++) {
        aRangeMult_acm[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_ACM, i);
    }

    //HIS
    for (i = 0 ; i < 2 ; i++) {
        iGridStartCoords_acm[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_ACM, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iGridTileDimensions_acm[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM, i);
    }

    //DPF
    fDpfWeight_acm = parameters.getParameter(CMC_DPF_WEIGHT_ACM);
    iDpfThreshold_acm = parameters.getParameter(CMC_DPF_THRESHOLD_ACM);

    //TNM
    fHisMin_acm = parameters.getParameter(CMC_TNMC_HISTMIN_ACM);
    fHisMax_acm = parameters.getParameter(CMC_TNMC_HISTMAX_ACM);
    bTnmcAdaptive_acm = parameters.getParameter(CMC_TNMC_ADAPTIVE_ACM);

    for (i = 0 ; i < 2 ; i++) {
        iInY_acm[i] = parameters.getParameter(CMC_TNM_IN_Y_ACM, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutY_acm[i] = parameters.getParameter(CMC_TNM_OUT_Y_ACM, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutC_acm[i] = parameters.getParameter(CMC_TNM_OUT_C_ACM, i);
    }
    fFlatFactor_acm = parameters.getParameter(CMC_TNM_FLAT_FACTOR_ACM);
    fWeightLine_acm = parameters.getParameter(CMC_TNM_WEIGHT_LINE_ACM);
    fColourConfidence_acm = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_ACM);
    fColourSaturation_acm = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_ACM);
    bEnableGamma_acm = parameters.getParameter(CMC_TNMC_ENABLE_GAMMA_ACM);
    fEqualBrightSupressRatio_acm = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM);
    fEqualDarkSupressRatio_acm = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM);
    fOvershotThreshold_acm = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM);
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrCeiling_acm[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_ACM, i);
    }
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrFloor_acm[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_ACM, i);
    }
    ui32GammaCrvMode_acm = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_ACM);
    fTnmGamma_acm = parameters.getParameter(CMC_TNMC_GAMMA_ACM);
    fBezierCtrlPnt_acm = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM);

    //AE
    targetBrightness_acm = parameters.getParameter(CMC_AE_TARGET_BRIGHTNESS_ACM);
    fAeTargetMin_acm = parameters.getParameter(CMC_AE_TARGET_MIN_ACM);

    //Sensor Max Gain
    fSensorMaxGain_acm = parameters.getParameter(CMC_SENSOR_MAX_GAIN_ACM);
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

#if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    blSensorGainLevelCtrl = parameters.getParameter(CMC_SENSOR_GAIN_LEVEL_CTRL);
    fSensorGain_lv1 = parameters.getParameter(CMC_SENSOR_GAIN_LV1);
    fSensorGain_lv2 = parameters.getParameter(CMC_SENSOR_GAIN_LV2);
    fSensorGainLv1Interpolation = parameters.getParameter(CMC_SENSOR_GAIN_LV1_INTERPOLATION);
    fSensorGainLv2Interpolation = parameters.getParameter(CMC_SENSOR_GAIN_LV2_INTERPOLATION);

    fCmcInterpolationGamma[0] = parameters.getParameter(CMC_INTERPOLATION_GAMMA_0);
    fCmcInterpolationGamma[1] = parameters.getParameter(CMC_INTERPOLATION_GAMMA_1);
    fCmcInterpolationGamma[2] = parameters.getParameter(CMC_INTERPOLATION_GAMMA_2);
    BuildGammaCurve(fCmcInterpolationGamma, 3);

    dbCcmAttenuation_lv1 = parameters.getParameter(CMC_CCM_ATTENUATION_LV1);
    dbCcmAttenuation_lv2 = parameters.getParameter(CMC_CCM_ATTENUATION_LV2);
    dbCcmAttenuation_lv3 = parameters.getParameter(CMC_CCM_ATTENUATION_LV3);

    ui32DnTargetIdx_acm_lv1 = parameters.getParameter(CMC_DN_TARGET_IDX_ACM_LV1);

    for (i = 0 ; i < 4 ; i++) {
        ui32BlcSensorBlack_acm_lv1[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_ACM_LV1, i);
    }
    ui32SystemBlack_acm_lv1 = parameters.getParameter(CMC_BLC_SYS_BLACK_ACM_LV1);
    if (ui32SystemBlack_acm_lv1 <= 0) {
        ui32SystemBlack_acm_lv1 = ui32SystemBlack_acm;
    }

    fDnsStrength_acm_lv1 = parameters.getParameter(CMC_DNS_STRENGTH_ACM_LV1);
    fDnsReadNoise_acm_lv1 = parameters.getParameter(CMC_DNS_READ_NOISE_ACM_LV1);
    if (fDnsReadNoise_acm_lv1 == 0) {
        fDnsReadNoise_acm_lv1 = fDnsReadNoise_acm;
    }
    iDnsWellDepth_acm_lv1 = parameters.getParameter(CMC_DNS_WELLDEPTH_ACM_LV1);
    if (iDnsWellDepth_acm_lv1 == 0) {
        iDnsWellDepth_acm_lv1 = iDnsWellDepth_acm;
    }

    fRadius_acm_lv1 = parameters.getParameter(CMC_SHA_RADIUS_ACM_LV1);
    fStrength_acm_lv1 = parameters.getParameter(CMC_SHA_STRENGTH_ACM_LV1);
    fThreshold_acm_lv1 = parameters.getParameter(CMC_SHA_THRESH_ACM_LV1);
    fDetail_acm_lv1 = parameters.getParameter(CMC_SHA_DETAIL_ACM_LV1);
    fEdgeScale_acm_lv1 = parameters.getParameter(CMC_SHA_EDGE_SCALE_ACM_LV1);
    fEdgeOffset_acm_lv1 = parameters.getParameter(CMC_SHA_EDGE_OFFSET_ACM_LV1);
    bBypassDenoise_acm_lv1 = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_ACM_LV1);
    fDenoiseTau_acm_lv1 = parameters.getParameter(CMC_SHADN_TAU_ACM_LV1);
    fDenoiseSigma_acm_lv1 = parameters.getParameter(CMC_SHADN_SIGMA_ACM_LV1);

    fContrast_acm_lv1 = parameters.getParameter(CMC_R2Y_CONTRAST_ACM_LV1);
    fSaturation_acm_lv1 = parameters.getParameter(CMC_R2Y_SATURATION_ACM_LV1);

    fBrightness_acm_lv1 = parameters.getParameter(CMC_R2Y_BRIGHTNESS_ACM_LV1);
    for (i = 0 ; i < 3 ; i++) {
        aRangeMult_acm_lv1[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_ACM_LV1, i);
    }

    for (i = 0 ; i < 2 ; i++) {
        iGridStartCoords_acm_lv1[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_ACM_LV1, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iGridTileDimensions_acm_lv1[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1, i);
    }

    fDpfWeight_acm_lv1 = parameters.getParameter(CMC_DPF_WEIGHT_ACM_LV1);
    iDpfThreshold_acm_lv1 = parameters.getParameter(CMC_DPF_THRESHOLD_ACM_LV1);

    fHisMin_acm_lv1 = parameters.getParameter(CMC_TNMC_HISTMIN_ACM_LV1);
    if (fHisMin_acm_lv1 == 0.0)
    {
        fHisMin_acm_lv1 = fHisMin_acm;
    }
    fHisMax_acm_lv1 = parameters.getParameter(CMC_TNMC_HISTMAX_ACM_LV1);
    if (fHisMax_acm_lv1 == 0.0)
    {
        fHisMax_acm_lv1 = fHisMax_acm;
    }
    bTnmcAdaptive_acm_lv1 = parameters.getParameter(CMC_TNMC_ADAPTIVE_ACM_LV1);

    for (i = 0 ; i < 2 ; i++) {
        iInY_acm_lv1[i] = parameters.getParameter(CMC_TNM_IN_Y_ACM_LV1, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutY_acm_lv1[i] = parameters.getParameter(CMC_TNM_OUT_Y_ACM_LV1, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutC_acm_lv1[i] = parameters.getParameter(CMC_TNM_OUT_C_ACM_LV1, i);
    }
    fFlatFactor_acm_lv1 = parameters.getParameter(CMC_TNM_FLAT_FACTOR_ACM_LV1);
    fWeightLine_acm_lv1 = parameters.getParameter(CMC_TNM_WEIGHT_LINE_ACM_LV1);
    fColourConfidence_acm_lv1 = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1);
    fColourSaturation_acm_lv1 = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_ACM_LV1);
    fEqualBrightSupressRatio_acm_lv1 = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1);
    fEqualDarkSupressRatio_acm_lv1 = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1);
    fOvershotThreshold_acm_lv1 = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1);
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrCeiling_acm_lv1[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_ACM_LV1, i);
    }
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrFloor_acm_lv1[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_ACM_LV1, i);
    }
    ui32GammaCrvMode_acm_lv1 = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1);
    fTnmGamma_acm_lv1 = parameters.getParameter(CMC_TNMC_GAMMA_ACM_LV1);
    fBezierCtrlPnt_acm_lv1 = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1);

    ui32DnTargetIdx_acm_lv2 = parameters.getParameter(CMC_DN_TARGET_IDX_ACM_LV2);

    for (i = 0 ; i < 4 ; i++) {
        ui32BlcSensorBlack_acm_lv2[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_ACM_LV2, i);
    }
    ui32SystemBlack_acm_lv2 = parameters.getParameter(CMC_BLC_SYS_BLACK_ACM_LV2);
    if (ui32SystemBlack_acm_lv2 <= 0) {
        ui32SystemBlack_acm_lv2 = ui32SystemBlack_acm;
    }

    fDnsStrength_acm_lv2 = parameters.getParameter(CMC_DNS_STRENGTH_ACM_LV2);
    fDnsReadNoise_acm_lv2 = parameters.getParameter(CMC_DNS_READ_NOISE_ACM_LV2);
    if (fDnsReadNoise_acm_lv2 == 0) {
        fDnsReadNoise_acm_lv2 = fDnsReadNoise_acm;
    }
    iDnsWellDepth_acm_lv2 = parameters.getParameter(CMC_DNS_WELLDEPTH_ACM_LV2);
    if (iDnsWellDepth_acm_lv2 == 0) {
        iDnsWellDepth_acm_lv2 = iDnsWellDepth_acm;
    }

    fRadius_acm_lv2 = parameters.getParameter(CMC_SHA_RADIUS_ACM_LV2);
    fStrength_acm_lv2 = parameters.getParameter(CMC_SHA_STRENGTH_ACM_LV2);
    fThreshold_acm_lv2 = parameters.getParameter(CMC_SHA_THRESH_ACM_LV2);
    fDetail_acm_lv2 = parameters.getParameter(CMC_SHA_DETAIL_ACM_LV2);
    fEdgeScale_acm_lv2 = parameters.getParameter(CMC_SHA_EDGE_SCALE_ACM_LV2);
    fEdgeOffset_acm_lv2 = parameters.getParameter(CMC_SHA_EDGE_OFFSET_ACM_LV2);
    bBypassDenoise_acm_lv2 = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_ACM_LV2);
    fDenoiseTau_acm_lv2 = parameters.getParameter(CMC_SHADN_TAU_ACM_LV2);
    fDenoiseSigma_acm_lv2 = parameters.getParameter(CMC_SHADN_SIGMA_ACM_LV2);

    fContrast_acm_lv2 = parameters.getParameter(CMC_R2Y_CONTRAST_ACM_LV2);
    fSaturation_acm_lv2 = parameters.getParameter(CMC_R2Y_SATURATION_ACM_LV2);

    fBrightness_acm_lv2 = parameters.getParameter(CMC_R2Y_BRIGHTNESS_ACM_LV2);
    for (i = 0 ; i < 3 ; i++) {
        aRangeMult_acm_lv2[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_ACM_LV2, i);
    }

    for (i = 0 ; i < 2 ; i++) {
        iGridStartCoords_acm_lv2[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_ACM_LV2, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iGridTileDimensions_acm_lv2[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2, i);
    }

    fDpfWeight_acm_lv2 = parameters.getParameter(CMC_DPF_WEIGHT_ACM_LV2);
    iDpfThreshold_acm_lv2 = parameters.getParameter(CMC_DPF_THRESHOLD_ACM_LV2);

    fHisMin_acm_lv2 = parameters.getParameter(CMC_TNMC_HISTMIN_ACM_LV2);
    if (fHisMin_acm_lv2 == 0.0)
    {
        fHisMin_acm_lv2 = fHisMin_acm;
    }
    fHisMax_acm_lv2 = parameters.getParameter(CMC_TNMC_HISTMAX_ACM_LV2);
    if (fHisMax_acm_lv2 == 0.0)
    {
        fHisMax_acm_lv2 = fHisMax_acm;
    }
    bTnmcAdaptive_acm_lv2 = parameters.getParameter(CMC_TNMC_ADAPTIVE_ACM_LV2);

    for (i = 0 ; i < 2 ; i++) {
        iInY_acm_lv2[i] = parameters.getParameter(CMC_TNM_IN_Y_ACM_LV2, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutY_acm_lv2[i] = parameters.getParameter(CMC_TNM_OUT_Y_ACM_LV2, i);
    }
    for (i = 0 ; i < 2 ; i++) {
        iOutC_acm_lv2[i] = parameters.getParameter(CMC_TNM_OUT_C_ACM_LV2, i);
    }
    fFlatFactor_acm_lv2 = parameters.getParameter(CMC_TNM_FLAT_FACTOR_ACM_LV2);
    fWeightLine_acm_lv2 = parameters.getParameter(CMC_TNM_WEIGHT_LINE_ACM_LV2);
    fColourConfidence_acm_lv2 = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2);
    fColourSaturation_acm_lv2 = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_ACM_LV2);
    fEqualBrightSupressRatio_acm_lv2 = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2);
    fEqualDarkSupressRatio_acm_lv2 = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2);
    fOvershotThreshold_acm_lv2 = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2);
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrCeiling_acm_lv2[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_ACM_LV2, i);
    }
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        fWdrFloor_acm_lv2[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_ACM_LV2, i);
    }
    ui32GammaCrvMode_acm_lv2 = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2);
    fTnmGamma_acm_lv2 = parameters.getParameter(CMC_TNMC_GAMMA_ACM_LV2);
    fBezierCtrlPnt_acm_lv2 = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2);

    ///////////////////////////////////////////
    if (bEnableInterpolationGamma) {
        ui32DnTargetIdx_acm_lv3 = parameters.getParameter(CMC_DN_TARGET_IDX_ACM_LV3);

        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_acm_lv3[i] = parameters.getParameter(CMC_BLC_SENSOR_BLACK_ACM_LV3, i);
        }
        ui32SystemBlack_acm_lv3 = parameters.getParameter(CMC_BLC_SYS_BLACK_ACM_LV3);
        if (ui32SystemBlack_acm_lv3 <= 0) {
            ui32SystemBlack_acm_lv3 = ui32SystemBlack_acm;
        }

        fDnsStrength_acm_lv3 = parameters.getParameter(CMC_DNS_STRENGTH_ACM_LV3);
        fDnsReadNoise_acm_lv3 = parameters.getParameter(CMC_DNS_READ_NOISE_ACM_LV3);
        if (fDnsReadNoise_acm_lv3 == 0) {
            fDnsReadNoise_acm_lv3 = fDnsReadNoise_acm;
        }
        iDnsWellDepth_acm_lv3 = parameters.getParameter(CMC_DNS_WELLDEPTH_ACM_LV3);
        if (iDnsWellDepth_acm_lv3 == 0) {
            iDnsWellDepth_acm_lv3 = iDnsWellDepth_acm;
        }

        fRadius_acm_lv3 = parameters.getParameter(CMC_SHA_RADIUS_ACM_LV3);
        fStrength_acm_lv3 = parameters.getParameter(CMC_SHA_STRENGTH_ACM_LV3);
        fThreshold_acm_lv3 = parameters.getParameter(CMC_SHA_THRESH_ACM_LV3);
        fDetail_acm_lv3 = parameters.getParameter(CMC_SHA_DETAIL_ACM_LV3);
        fEdgeScale_acm_lv3 = parameters.getParameter(CMC_SHA_EDGE_SCALE_ACM_LV3);
        fEdgeOffset_acm_lv3 = parameters.getParameter(CMC_SHA_EDGE_OFFSET_ACM_LV3);
        bBypassDenoise_acm_lv3 = parameters.getParameter(CMC_SHA_DENOISE_BYPASS_ACM_LV3);
        fDenoiseTau_acm_lv3 = parameters.getParameter(CMC_SHADN_TAU_ACM_LV3);
        fDenoiseSigma_acm_lv3 = parameters.getParameter(CMC_SHADN_SIGMA_ACM_LV3);

        fContrast_acm_lv3 = parameters.getParameter(CMC_R2Y_CONTRAST_ACM_LV3);
        fSaturation_acm_lv3 = parameters.getParameter(CMC_R2Y_SATURATION_ACM_LV3);
        
        fBrightness_acm_lv3 = parameters.getParameter(CMC_R2Y_BRIGHTNESS_ACM_LV3);
        for (i = 0 ; i < 3 ; i++) {
            aRangeMult_acm_lv3[i] = parameters.getParameter(CMC_R2Y_RANGE_MUL_ACM_LV3, i);
        }
        
        for (i = 0 ; i < 2 ; i++) {
            iGridStartCoords_acm_lv3[i] = parameters.getParameter(CMC_HIS_GRID_START_COORDS_ACM_LV3, i);
        }
        for (i = 0 ; i < 2 ; i++) {
            iGridTileDimensions_acm_lv3[i] = parameters.getParameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3, i);
        }

        fDpfWeight_acm_lv3 = parameters.getParameter(CMC_DPF_WEIGHT_ACM_LV3);
        iDpfThreshold_acm_lv3 = parameters.getParameter(CMC_DPF_THRESHOLD_ACM_LV3);

        fHisMin_acm_lv3 = parameters.getParameter(CMC_TNMC_HISTMIN_ACM_LV3);
        if (fHisMin_acm_lv3 == 0.0)
        {
            fHisMin_acm_lv3 = fHisMin_acm;
        }
        fHisMax_acm_lv3 = parameters.getParameter(CMC_TNMC_HISTMAX_ACM_LV3);
        if (fHisMax_acm_lv3 == 0.0)
        {
            fHisMax_acm_lv3 = fHisMax_acm;
        }
        bTnmcAdaptive_acm_lv3 = parameters.getParameter(CMC_TNMC_ADAPTIVE_ACM_LV3);

        for (i = 0 ; i < 2 ; i++) {
            iInY_acm_lv3[i] = parameters.getParameter(CMC_TNM_IN_Y_ACM_LV3, i);
        }
        for (i = 0 ; i < 2 ; i++) {
            iOutY_acm_lv3[i] = parameters.getParameter(CMC_TNM_OUT_Y_ACM_LV3, i);
        }
        for (i = 0 ; i < 2 ; i++) {
            iOutC_acm_lv3[i] = parameters.getParameter(CMC_TNM_OUT_C_ACM_LV3, i);
        }
        fFlatFactor_acm_lv3 = parameters.getParameter(CMC_TNM_FLAT_FACTOR_ACM_LV3);
        fWeightLine_acm_lv3 = parameters.getParameter(CMC_TNM_WEIGHT_LINE_ACM_LV3);
        fColourConfidence_acm_lv3 = parameters.getParameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3);
        fColourSaturation_acm_lv3 = parameters.getParameter(CMC_TNM_COLOUR_SATURATION_ACM_LV3);
        fEqualBrightSupressRatio_acm_lv3 = parameters.getParameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3);
        fEqualDarkSupressRatio_acm_lv3 = parameters.getParameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3);
        fOvershotThreshold_acm_lv3 = parameters.getParameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3);
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            fWdrCeiling_acm_lv3[i] = parameters.getParameter(CMC_TNMC_WDR_CEILING_ACM_LV3, i);
        }
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            fWdrFloor_acm_lv3[i] = parameters.getParameter(CMC_TNMC_WDR_FLOOR_ACM_LV3, i);
        }
        ui32GammaCrvMode_acm_lv3 = parameters.getParameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3);
        fTnmGamma_acm_lv3 = parameters.getParameter(CMC_TNMC_GAMMA_ACM_LV3);
        fBezierCtrlPnt_acm_lv3 = parameters.getParameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3);
    }
    ///////////////////////////////////////////
#endif //INFOTM_ENABLE_GAIN_LEVEL_IDX

#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
    if (iCmcCaptureInY[0] == iCmcCaptureInY[1]) {
        iCmcCaptureInY[0] = iInY_acm[0];
        iCmcCaptureInY[1] = iInY_acm[1];
    }
    if (iCmcCaptureOutY[0] == iCmcCaptureOutY[1]) {
        iCmcCaptureOutY[0] = iOutY_acm[0];
        iCmcCaptureOutY[1] = iOutY_acm[1];
    }
    if (iCmcCaptureOutC[0] == iCmcCaptureOutC[1]) {
        iCmcCaptureOutC[0] = iOutC_acm[0];
        iCmcCaptureOutC[1] = iOutC_acm[1];
    }

    //BLC_SENSOR_BLACK
    if ((-128 == ui32BlcSensorBlack_fcm[0]) &&
        (-128 == ui32BlcSensorBlack_fcm[1]) &&
        (-128 == ui32BlcSensorBlack_fcm[2]) &&
        (-128 == ui32BlcSensorBlack_fcm[3])) {
        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_fcm[i] = ui32BlcSensorBlack_acm[i];
        }
    }

    // SHA
    fShaStrengthOffset_acm = 0;
    fShaStrengthOffset_fcm = fStrength_acm - fStrength_fcm;

    //HIS
    if (iGridStartCoords_fcm[0] < 0 || iGridStartCoords_fcm[1] < 0) {
        iGridStartCoords_fcm[0] = iGridStartCoords_acm[0];
        iGridStartCoords_fcm[1] = iGridStartCoords_acm[1];
    }
    if (iGridTileDimensions_fcm[0] < 0 || iGridTileDimensions_fcm[1] < 0) {
        iGridTileDimensions_fcm[0] = iGridTileDimensions_acm[0];
        iGridTileDimensions_fcm[1] = iGridTileDimensions_acm[1];
    }

    //DPF
    if (fDpfWeight_fcm < 0) {
        fDpfWeight_fcm = fDpfWeight_acm;
    }
    if (iDpfThreshold_fcm < 0) {
        iDpfThreshold_fcm = iDpfThreshold_acm;
    }

    // TNM
    if (iInY_fcm[0] == iInY_fcm[1]) {
        iInY_fcm[0] = iInY_acm[0];
        iInY_fcm[1] = iInY_acm[1];
    }
    if (iOutY_fcm[0] == iOutY_fcm[1]) {
        iOutY_fcm[0] = iOutY_acm[0];
        iOutY_fcm[1] = iOutY_acm[1];
    }
    if (iOutC_fcm[0] == iOutC_fcm[1]) {
        iOutC_fcm[0] = iOutC_acm[0];
        iOutC_fcm[1] = iOutC_acm[1];
    }

    if (0 > fColourConfidence_fcm) {
        fColourConfidence_fcm = fColourConfidence_acm;
    }
#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE
#if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    if ((-128 == ui32BlcSensorBlack_acm_lv1[0]) &&
        (-128 == ui32BlcSensorBlack_acm_lv1[1]) &&
        (-128 == ui32BlcSensorBlack_acm_lv1[2]) &&
        (-128 == ui32BlcSensorBlack_acm_lv1[3])) {
        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_acm_lv1[i] = ui32BlcSensorBlack_acm[i];
        }
    }
    if ((-128 == ui32BlcSensorBlack_acm_lv2[0]) &&
        (-128 == ui32BlcSensorBlack_acm_lv2[1]) &&
        (-128 == ui32BlcSensorBlack_acm_lv2[2]) &&
        (-128 == ui32BlcSensorBlack_acm_lv2[3])) {
        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_acm_lv2[i] = ui32BlcSensorBlack_acm[i];
        }
    }
    if (bEnableInterpolationGamma) {
        if ((-128 == ui32BlcSensorBlack_acm_lv3[0]) &&
            (-128 == ui32BlcSensorBlack_acm_lv3[1]) &&
            (-128 == ui32BlcSensorBlack_acm_lv3[2]) &&
            (-128 == ui32BlcSensorBlack_acm_lv3[3])) {
            for (i = 0 ; i < 4 ; i++) {
                ui32BlcSensorBlack_acm_lv3[i] = ui32BlcSensorBlack_acm[i];
            }
        }
    }
    if ((-128 == ui32BlcSensorBlack_fcm_lv1[0]) &&
        (-128 == ui32BlcSensorBlack_fcm_lv1[1]) &&
        (-128 == ui32BlcSensorBlack_fcm_lv1[2]) &&
        (-128 == ui32BlcSensorBlack_fcm_lv1[3])) {
        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_fcm_lv1[i] = ui32BlcSensorBlack_acm[i];
        }
    }
    if ((-128 == ui32BlcSensorBlack_fcm_lv2[0]) &&
        (-128 == ui32BlcSensorBlack_fcm_lv2[1]) &&
        (-128 == ui32BlcSensorBlack_fcm_lv2[2]) &&
        (-128 == ui32BlcSensorBlack_fcm_lv2[3])) {
        for (i = 0 ; i < 4 ; i++) {
            ui32BlcSensorBlack_fcm_lv2[i] = ui32BlcSensorBlack_acm[i];
        }
    }
    if (bEnableInterpolationGamma) {
        if ((-128 == ui32BlcSensorBlack_fcm_lv3[0]) &&
            (-128 == ui32BlcSensorBlack_fcm_lv3[1]) &&
            (-128 == ui32BlcSensorBlack_fcm_lv3[2]) &&
            (-128 == ui32BlcSensorBlack_fcm_lv3[3])) {
            for (i = 0 ; i < 4 ; i++) {
                ui32BlcSensorBlack_fcm_lv3[i] = ui32BlcSensorBlack_acm[i];
            }
        }
    }

    fShaStrengthOffset_acm_lv1 = fStrength_acm - fStrength_acm_lv1;
    fShaStrengthOffset_acm_lv2 = fStrength_acm - fStrength_acm_lv2;
    if (bEnableInterpolationGamma) {
        fShaStrengthOffset_acm_lv3 = fStrength_acm - fStrength_acm_lv3;
    }
    fShaStrengthOffset_fcm_lv1 = fStrength_acm - fStrength_fcm_lv1;
    fShaStrengthOffset_fcm_lv2 = fStrength_acm - fStrength_fcm_lv2;
    if (bEnableInterpolationGamma) {
        fShaStrengthOffset_fcm_lv3 = fStrength_acm - fStrength_fcm_lv3;
    }

    if (0.0f > fContrast_acm_lv1) {
        fContrast_acm_lv1 = fContrast_acm;
    }
    if (0.0f > fContrast_acm_lv2) {
        fContrast_acm_lv2 = fContrast_acm;
    }
    if (bEnableInterpolationGamma) {
        if (0.0f > fContrast_acm_lv3) {
            fContrast_acm_lv3 = fContrast_acm;
        }
    }
    if (0.0f > fContrast_fcm_lv1) {
        fContrast_fcm_lv1 = fContrast_fcm;
    }
    if (0.0f > fContrast_fcm_lv2) {
        fContrast_fcm_lv2 = fContrast_fcm;
    }
    if (bEnableInterpolationGamma) {
        if (0.0f > fContrast_fcm_lv3) {
            fContrast_fcm_lv3 = fContrast_fcm;
        }
    }

    if (fBrightness_acm_lv1 == -1.0)
    {
        fBrightness_acm_lv1 = fBrightness_acm;
    }
    
    if (fBrightness_acm_lv2 == -1.0)
    {
        fBrightness_acm_lv2 = fBrightness_acm;
    }
    
    if (fBrightness_acm_lv3 == -1.0)
    {
        fBrightness_acm_lv3 = fBrightness_acm;
    }

    if (fBrightness_fcm_lv1 == -1.0)
    {
        fBrightness_fcm_lv1 = fBrightness_fcm;
    }
    
    if (fBrightness_fcm_lv2 == -1.0)
    {
        fBrightness_fcm_lv2 = fBrightness_fcm;
    }
    
    if (fBrightness_fcm_lv3 == -1.0)
    {
        fBrightness_fcm_lv3 = fBrightness_fcm;
    }

    if (aRangeMult_acm_lv1[0] == 0.0 && aRangeMult_acm_lv1[1] == 0.0 && aRangeMult_acm_lv1[2] == 0.0)
    {
        aRangeMult_acm_lv1[0] = aRangeMult_acm[0];
        aRangeMult_acm_lv1[1] = aRangeMult_acm[1];
        aRangeMult_acm_lv1[2] = aRangeMult_acm[2];
    }
    
    if (aRangeMult_acm_lv2[0] == 0.0 && aRangeMult_acm_lv2[1] == 0.0 && aRangeMult_acm_lv2[2] == 0.0)
    {
        aRangeMult_acm_lv2[0] = aRangeMult_acm[0];
        aRangeMult_acm_lv2[1] = aRangeMult_acm[1];
        aRangeMult_acm_lv2[2] = aRangeMult_acm[2];
    }

    if (aRangeMult_acm_lv3[0] == 0.0 && aRangeMult_acm_lv3[1] == 0.0 && aRangeMult_acm_lv3[2] == 0.0)
    {
        aRangeMult_acm_lv3[0] = aRangeMult_acm[0];
        aRangeMult_acm_lv3[1] = aRangeMult_acm[1];
        aRangeMult_acm_lv3[2] = aRangeMult_acm[2];
    }

    if (aRangeMult_fcm_lv1[0] == 0.0 && aRangeMult_fcm_lv1[1] == 0.0 && aRangeMult_fcm_lv1[2] == 0.0)
    {
        aRangeMult_fcm_lv1[0] = aRangeMult_fcm[0];
        aRangeMult_fcm_lv1[1] = aRangeMult_fcm[1];
        aRangeMult_fcm_lv1[2] = aRangeMult_fcm[2];
    }
    
    if (aRangeMult_fcm_lv2[0] == 0.0 && aRangeMult_fcm_lv2[1] == 0.0 && aRangeMult_fcm_lv2[2] == 0.0)
    {
        aRangeMult_fcm_lv2[0] = aRangeMult_fcm[0];
        aRangeMult_fcm_lv2[1] = aRangeMult_fcm[1];
        aRangeMult_fcm_lv2[2] = aRangeMult_fcm[2];
    }

    if (aRangeMult_fcm_lv3[0] == 0.0 && aRangeMult_fcm_lv3[1] == 0.0 && aRangeMult_fcm_lv3[2] == 0.0)
    {
        aRangeMult_fcm_lv3[0] = aRangeMult_fcm[0];
        aRangeMult_fcm_lv3[1] = aRangeMult_fcm[1];
        aRangeMult_fcm_lv3[2] = aRangeMult_fcm[2];
    }

    if (iGridStartCoords_acm_lv1[0] < 0 || iGridStartCoords_acm_lv1[1] < 0) {
        iGridStartCoords_acm_lv1[0] = iGridStartCoords_acm[0];
        iGridStartCoords_acm_lv1[1] = iGridStartCoords_acm[1];
    }
    if (iGridTileDimensions_acm_lv1[0] < 0 || iGridTileDimensions_acm_lv1[1] < 0) {
        iGridTileDimensions_acm_lv1[0] = iGridTileDimensions_acm[0];
        iGridTileDimensions_acm_lv1[1] = iGridTileDimensions_acm[1];
    }
    if (fDpfWeight_acm_lv1 < 0) {
        fDpfWeight_acm_lv1 = fDpfWeight_acm;
    }
    if (iDpfThreshold_acm_lv1 < 0) {
        iDpfThreshold_acm_lv1 = iDpfThreshold_acm;
    }
    if (iGridStartCoords_acm_lv2[0] < 0 || iGridStartCoords_acm_lv2[1] < 0) {
        iGridStartCoords_acm_lv2[0] = iGridStartCoords_acm[0];
        iGridStartCoords_acm_lv2[1] = iGridStartCoords_acm[1];
    }
    if (iGridTileDimensions_acm_lv2[0] < 0 || iGridTileDimensions_acm_lv2[1] < 0) {
        iGridTileDimensions_acm_lv2[0] = iGridTileDimensions_acm[0];
        iGridTileDimensions_acm_lv2[1] = iGridTileDimensions_acm[1];
    }
    if (fDpfWeight_acm_lv2 < 0) {
        fDpfWeight_acm_lv2 = fDpfWeight_acm;
    }
    if (iDpfThreshold_acm_lv2 < 0) {
        iDpfThreshold_acm_lv2 = iDpfThreshold_acm;
    }
    if (bEnableInterpolationGamma) {
        if (iGridStartCoords_acm_lv3[0] < 0 || iGridStartCoords_acm_lv3[1] < 0) {
            iGridStartCoords_acm_lv3[0] = iGridStartCoords_acm[0];
            iGridStartCoords_acm_lv3[1] = iGridStartCoords_acm[1];
        }
        if (iGridTileDimensions_acm_lv3[0] < 0 || iGridTileDimensions_acm_lv3[1] < 0) {
            iGridTileDimensions_acm_lv3[0] = iGridTileDimensions_acm[0];
            iGridTileDimensions_acm_lv3[1] = iGridTileDimensions_acm[1];
        }
        if (fDpfWeight_acm_lv3 < 0) {
            fDpfWeight_acm_lv3 = fDpfWeight_acm;
        }
        if (iDpfThreshold_acm_lv3 < 0) {
            iDpfThreshold_acm_lv3 = iDpfThreshold_acm;
        }
    }
    if (iGridStartCoords_fcm_lv1[0] < 0 || iGridStartCoords_fcm_lv1[1] < 0) {
        iGridStartCoords_fcm_lv1[0] = iGridStartCoords_fcm[0];
        iGridStartCoords_fcm_lv1[1] = iGridStartCoords_fcm[1];
    }
    if (iGridTileDimensions_fcm_lv1[0] < 0 || iGridTileDimensions_fcm_lv1[1] < 0) {
        iGridTileDimensions_fcm_lv1[0] = iGridTileDimensions_fcm[0];
        iGridTileDimensions_fcm_lv1[1] = iGridTileDimensions_fcm[1];
    }
    if (fDpfWeight_fcm_lv1 < 0) {
        fDpfWeight_fcm_lv1 = fDpfWeight_fcm;
    }
    if (iDpfThreshold_fcm_lv1 < 0) {
        iDpfThreshold_fcm_lv1 = iDpfThreshold_fcm;
    }
    if (iGridStartCoords_fcm_lv2[0] < 0 || iGridStartCoords_fcm_lv2[1] < 0) {
        iGridStartCoords_fcm_lv2[0] = iGridStartCoords_fcm[0];
        iGridStartCoords_fcm_lv2[1] = iGridStartCoords_fcm[1];
    }
    if (iGridTileDimensions_fcm_lv2[0] < 0 || iGridTileDimensions_fcm_lv2[1] < 0) {
        iGridTileDimensions_fcm_lv2[0] = iGridTileDimensions_fcm[0];
        iGridTileDimensions_fcm_lv2[1] = iGridTileDimensions_fcm[1];
    }
    if (fDpfWeight_fcm_lv2 < 0) {
        fDpfWeight_fcm_lv2 = fDpfWeight_fcm;
    }
    if (iDpfThreshold_fcm_lv2 < 0) {
        iDpfThreshold_fcm_lv2 = iDpfThreshold_fcm;
    }
    if (bEnableInterpolationGamma) {
        if (iGridStartCoords_fcm_lv3[0] < 0 || iGridStartCoords_fcm_lv3[1] < 0) {
            iGridStartCoords_fcm_lv3[0] = iGridStartCoords_fcm[0];
            iGridStartCoords_fcm_lv3[1] = iGridStartCoords_fcm[1];
        }
        if (iGridTileDimensions_fcm_lv3[0] < 0 || iGridTileDimensions_fcm_lv3[1] < 0) {
            iGridTileDimensions_fcm_lv3[0] = iGridTileDimensions_fcm[0];
            iGridTileDimensions_fcm_lv3[1] = iGridTileDimensions_fcm[1];
        }
        if (fDpfWeight_fcm_lv3 < 0) {
            fDpfWeight_fcm_lv3 = fDpfWeight_fcm;
        }
        if (iDpfThreshold_fcm_lv3 < 0) {
            iDpfThreshold_fcm_lv3 = iDpfThreshold_fcm;
        }
    }

    if (iInY_acm_lv1[0] == iInY_acm_lv1[1]) {
        iInY_acm_lv1[0] = iInY_acm[0];
        iInY_acm_lv1[1] = iInY_acm[1];
    }
    if (iOutY_acm_lv1[0] == iOutY_acm_lv1[1]) {
        iOutY_acm_lv1[0] = iOutY_acm[0];
        iOutY_acm_lv1[1] = iOutY_acm[1];
    }
    if (iOutC_acm_lv1[0] == iOutC_acm_lv1[1]) {
        iOutC_acm_lv1[0] = iOutC_acm[0];
        iOutC_acm_lv1[1] = iOutC_acm[1];
    }
    if (iInY_acm_lv2[0] == iInY_acm_lv2[1]) {
        iInY_acm_lv2[0] = iInY_acm[0];
        iInY_acm_lv2[1] = iInY_acm[1];
    }
    if (iOutY_acm_lv2[0] == iOutY_acm_lv2[1]) {
        iOutY_acm_lv2[0] = iOutY_acm[0];
        iOutY_acm_lv2[1] = iOutY_acm[1];
    }
    if (iOutC_acm_lv2[0] == iOutC_acm_lv2[1]) {
        iOutC_acm_lv2[0] = iOutC_acm[0];
        iOutC_acm_lv2[1] = iOutC_acm[1];
    }
    if (bEnableInterpolationGamma) {
        if (iInY_acm_lv3[0] == iInY_acm_lv3[1]) {
            iInY_acm_lv3[0] = iInY_acm[0];
            iInY_acm_lv3[1] = iInY_acm[1];
        }
        if (iOutY_acm_lv3[0] == iOutY_acm_lv3[1]) {
            iOutY_acm_lv3[0] = iOutY_acm[0];
            iOutY_acm_lv3[1] = iOutY_acm[1];
        }
        if (iOutC_acm_lv3[0] == iOutC_acm_lv3[1]) {
            iOutC_acm_lv3[0] = iOutC_acm[0];
            iOutC_acm_lv3[1] = iOutC_acm[1];
        }
    }
    if (iInY_fcm_lv1[0] == iInY_fcm_lv1[1]) {
        iInY_fcm_lv1[0] = iInY_fcm[0];
        iInY_fcm_lv1[1] = iInY_fcm[1];
    }
    if (iOutY_fcm_lv1[0] == iOutY_fcm_lv1[1]) {
        iOutY_fcm_lv1[0] = iOutY_fcm[0];
        iOutY_fcm_lv1[1] = iOutY_fcm[1];
    }
    if (iOutC_fcm_lv1[0] == iOutC_fcm_lv1[1]) {
        iOutC_fcm_lv1[0] = iOutC_fcm[0];
        iOutC_fcm_lv1[1] = iOutC_fcm[1];
    }
    if (iInY_fcm_lv2[0] == iInY_fcm_lv2[1]) {
        iInY_fcm_lv2[0] = iInY_fcm[0];
        iInY_fcm_lv2[1] = iInY_fcm[1];
    }
    if (iOutY_fcm_lv2[0] == iOutY_fcm_lv2[1]) {
        iOutY_fcm_lv2[0] = iOutY_fcm[0];
        iOutY_fcm_lv2[1] = iOutY_fcm[1];
    }
    if (iOutC_fcm_lv2[0] == iOutC_fcm_lv2[1]) {
        iOutC_fcm_lv2[0] = iOutC_fcm[0];
        iOutC_fcm_lv2[1] = iOutC_fcm[1];
    }
    if (bEnableInterpolationGamma) {
        if (iInY_fcm_lv3[0] == iInY_fcm_lv3[1]) {
            iInY_fcm_lv3[0] = iInY_fcm[0];
            iInY_fcm_lv3[1] = iInY_fcm[1];
        }
        if (iOutY_fcm_lv3[0] == iOutY_fcm_lv3[1]) {
            iOutY_fcm_lv3[0] = iOutY_fcm[0];
            iOutY_fcm_lv3[1] = iOutY_fcm[1];
        }
        if (iOutC_fcm_lv3[0] == iOutC_fcm_lv3[1]) {
            iOutC_fcm_lv3[0] = iOutC_fcm[0];
            iOutC_fcm_lv3[1] = iOutC_fcm[1];
        }
    }

    if (0.0f > fColourConfidence_acm_lv1) {
        fColourConfidence_acm_lv1 = fColourConfidence_acm;
    }
    if (0.0f > fColourConfidence_acm_lv2) {
        fColourConfidence_acm_lv2 = fColourConfidence_acm;
    }
    if (bEnableInterpolationGamma) {
        if (0.0f > fColourConfidence_acm_lv3) {
            fColourConfidence_acm_lv3 = fColourConfidence_acm;
        }
    }
    if (0.0f > fColourConfidence_fcm_lv1) {
        fColourConfidence_fcm_lv1 = fColourConfidence_fcm;
    }
    if (0.0f > fColourConfidence_fcm_lv2) {
        fColourConfidence_fcm_lv2 = fColourConfidence_fcm;
    }
    if (bEnableInterpolationGamma) {
        if (0.0f > fColourConfidence_fcm_lv2) {
            fColourConfidence_fcm_lv2 = fColourConfidence_fcm;
        }
    }

    if (0.0f > fColourSaturation_acm_lv1) {
        fColourSaturation_acm_lv1 = fColourSaturation_acm;
    }
    if (0.0f > fColourSaturation_acm_lv2) {
        fColourSaturation_acm_lv2 = fColourSaturation_acm;
    }
    if (bEnableInterpolationGamma) {
        if (0.0f > fColourSaturation_acm_lv3) {
            fColourSaturation_acm_lv3 = fColourSaturation_acm;
        }
    }
    if (0.0f > fColourSaturation_fcm_lv1) {
        fColourSaturation_fcm_lv1 = fColourSaturation_fcm;
    }
    if (0.0f > fColourSaturation_fcm_lv2) {
        fColourSaturation_fcm_lv2 = fColourSaturation_fcm;
    }
    if (bEnableInterpolationGamma) {
        if (0.0f > fColourSaturation_fcm_lv2) {
            fColourSaturation_fcm_lv2 = fColourSaturation_fcm;
        }
    }
#endif //INFOTM_ENABLE_GAIN_LEVEL_IDX

#if defined(INFOTM_CMC_DEBUG_MESSAGE)
    printf("bCmcEnable=%d\n", bCmcEnable);
    printf("bDnTargetIdxChageEnable=%d\n", bDnTargetIdxChageEnable);
    printf("bEnableCalcAvgGain=%d\n", bEnableCalcAvgGain);

    printf("fR2YSaturationExpect=%f\n", fR2YSaturationExpect);

    printf("fShaStrengthExpect=%f\n", fShaStrengthExpect);

    printf("bEnableCaptureIQ=%d\n", bEnableCaptureIQ);
    printf("fCmcCaptureModeCCMRatio=%f\n", fCmcCaptureModeCCMRatio);
    printf("fCmcCaptureR2YRangeMul=%f %f %f\n", fCmcCaptureR2YRangeMul[0], fCmcCaptureR2YRangeMul[1], fCmcCaptureR2YRangeMul[2]);
    printf("iCmcCaptureInY=%d %d\n", iCmcCaptureInY[0], iCmcCaptureInY[1]);
    printf("iCmcCaptureOutY=%d %d\n", iCmcCaptureOutY[0], iCmcCaptureOutY[1]);
    printf("iCmcCaptureOutC=%d %d\n", iCmcCaptureOutC[0], iCmcCaptureOutC[1]);

    printf("---------------------------------------------FCM\n");
    printf("fBrightness_fcm=%f\n", fBrightness_fcm);
    printf("aRangeMult_fcm=%f %f %f\n", aRangeMult_fcm[0], aRangeMult_fcm[1], aRangeMult_fcm[2]);

    printf("targetBrightness_fcm=%f\n", targetBrightness_fcm);
    printf("fSensorMaxGain_fcm=%f\n", fSensorMaxGain_fcm);
    printf("fAeTargetMin_fcm=%f\n\n", fAeTargetMin_fcm);

    printf("------- CMC FCM LEVEL 0 -------\n");
    printf("ui32DnTargetIdx_fcm=%d\n\n", ui32DnTargetIdx_fcm);
    printf("ui32BlcSensorBlack_fcm=%d %d %d %d\n", ui32BlcSensorBlack_fcm[0], ui32BlcSensorBlack_fcm[1], ui32BlcSensorBlack_fcm[2], ui32BlcSensorBlack_fcm[3]);
    printf("fDnsStrength_fcm=%f\n\n", fDnsStrength_fcm);
    printf("fRadius_fcm=%f\n", fRadius_fcm);
    printf("fStrength_fcm=%f\n", fStrength_fcm);
    printf("fThreshold_fcm=%f\n", fThreshold_fcm);
    printf("fDetail_fcm=%f\n", fDetail_fcm);
    printf("fEdgeScale_fcm=%f\n", fEdgeScale_fcm);
    printf("fEdgeOffset_fcm=%f\n", fEdgeOffset_fcm);
    printf("bBypassDenoise_fcm=%d\n", bBypassDenoise_fcm);
    printf("fDenoiseTau_fcm=%f\n", fDenoiseTau_fcm);
    printf("fDenoiseSigma_fcm=%f\n\n", fDenoiseSigma_fcm);
    printf("fContrast_fcm=%f\n", fContrast_fcm);
    printf("fSaturation_fcm=%f\n\n", fSaturation_fcm);
    printf("iGridStartCoords_fcm=%d %d\n", iGridStartCoords_fcm[0], iGridStartCoords_fcm[1]);
    printf("iGridTileDimensions_fcm=%d %d\n", iGridTileDimensions_fcm[0], iGridTileDimensions_fcm[1]);
    printf("fDpfWeight_fcm=%f\n", fDpfWeight_fcm);
    printf("iDpfThreshold_fcm=%d\n", iDpfThreshold_fcm);
    printf("iInY_fcm=%d %d\n", iInY_fcm[0], iInY_fcm[1]);
    printf("iOutY_fcm=%d %d\n", iOutY_fcm[0], iOutY_fcm[1]);
    printf("iOutC_fcm=%d %d\n", iOutC_fcm[0], iOutC_fcm[1]);
    printf("fFlatFactor_fcm=%f\n", fFlatFactor_fcm);
    printf("fWeightLine_fcm=%f\n\n", fWeightLine_fcm);
    printf("fColourConfidence_fcm=%f\n", fColourConfidence_fcm);
    printf("fColourSaturation_fcm=%f\n\n", fColourSaturation_fcm);
    printf("bEnableGamma_fcm=%d\n", bEnableGamma_fcm);
    printf("fEqualBrightSupressRatio_fcm=%f\n", fEqualBrightSupressRatio_fcm);
    printf("fEqualDarkSupressRatio_fcm=%f\n", fEqualDarkSupressRatio_fcm);
    printf("fOvershotThreshold_fcm=%f\n", fOvershotThreshold_fcm);
    printf("fWdrCeiling_fcm=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrCeiling_fcm[i]);
    }
    printf("\n");
    printf("fWdrFloor_fcm=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrFloor_fcm[i]);
    }
    printf("\n");
    printf("ui32GammaCrvMode_fcm=%d\n", ui32GammaCrvMode_fcm);
    printf("fTnmGamma_fcm=%f\n", fTnmGamma_fcm);
    printf("fBezierCtrlPnt_fcm=%f\n\n", fBezierCtrlPnt_fcm);

    printf("------- CMC FCM LEVEL 1 -------\n");
    printf("ui32DnTargetIdx_fcm_lv1=%d\n\n", ui32DnTargetIdx_fcm_lv1);
    printf("ui32BlcSensorBlack_fcm_lv1=%d %d %d %d\n", ui32BlcSensorBlack_fcm_lv1[0], ui32BlcSensorBlack_fcm_lv1[1], ui32BlcSensorBlack_fcm_lv1[2], ui32BlcSensorBlack_fcm_lv1[3]);
    printf("fDnsStrength_fcm_lv1=%f\n\n", fDnsStrength_fcm_lv1);
    printf("fRadius_fcm_lv1=%f\n", fRadius_fcm_lv1);
    printf("fStrength_fcm_lv1=%f\n", fStrength_fcm_lv1);
    printf("fThreshold_fcm_lv1=%f\n", fThreshold_fcm_lv1);
    printf("fDetail_fcm_lv1=%f\n", fDetail_fcm_lv1);
    printf("fEdgeScale_fcm_lv1=%f\n", fEdgeScale_fcm_lv1);
    printf("fEdgeOffset_fcm_lv1=%f\n", fEdgeOffset_fcm_lv1);
    printf("bBypassDenoise_fcm_lv1=%d\n", bBypassDenoise_fcm_lv1);
    printf("fDenoiseTau_fcm_lv1=%f\n", fDenoiseTau_fcm_lv1);
    printf("fDenoiseSigma_fcm_lv1=%f\n\n", fDenoiseSigma_fcm_lv1);
    printf("fContrast_fcm_lv1=%f\n", fContrast_fcm_lv1);
    printf("fSaturation_fcm_lv1=%f\n\n", fSaturation_fcm_lv1);
    printf("iGridStartCoords_fcm_lv1=%d %d\n", iGridStartCoords_fcm_lv1[0], iGridStartCoords_fcm_lv1[1]);
    printf("iGridTileDimensions_fcm_lv1=%d %d\n", iGridTileDimensions_fcm_lv1[0], iGridTileDimensions_fcm_lv1[1]);
    printf("fDpfWeight_fcm_lv1=%f\n", fDpfWeight_fcm_lv1);
    printf("iDpfThreshold_fcm_lv1=%d\n", iDpfThreshold_fcm_lv1);
    printf("iInY_fcm_lv1=%d %d\n", iInY_fcm_lv1[0], iInY_fcm_lv1[1]);
    printf("iOutY_fcm_lv1=%d %d\n", iOutY_fcm_lv1[0], iOutY_fcm_lv1[1]);
    printf("iOutC_fcm_lv1=%d %d\n", iOutC_fcm_lv1[0], iOutC_fcm_lv1[1]);
    printf("fFlatFactor_fcm_lv1=%f\n", fFlatFactor_fcm_lv1);
    printf("fWeightLine_fcm_lv1=%f\n\n", fWeightLine_fcm_lv1);
    printf("fColourConfidence_fcm_lv1=%f\n", fColourConfidence_fcm_lv1);
    printf("fColourSaturation_fcm_lv1=%f\n\n", fColourSaturation_fcm_lv1);
    printf("fEqualBrightSupressRatio_fcm_lv1=%f\n", fEqualBrightSupressRatio_fcm_lv1);
    printf("fEqualDarkSupressRatio_fcm_lv1=%f\n", fEqualDarkSupressRatio_fcm_lv1);
    printf("fOvershotThreshold_fcm_lv1=%f\n", fOvershotThreshold_fcm_lv1);
    printf("fWdrCeiling_fcm_lv1=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrCeiling_fcm_lv1[i]);
    }
    printf("\n");
    printf("fWdrFloor_fcm_lv1=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrFloor_fcm_lv1[i]);
    }
    printf("\n");
    printf("ui32GammaCrvMode_fcm_lv1=%d\n", ui32GammaCrvMode_fcm_lv1);
    printf("fTnmGamma_fcm_lv1=%f\n", fTnmGamma_fcm_lv1);
    printf("fBezierCtrlPnt_fcm_lv1=%f\n\n", fBezierCtrlPnt_fcm_lv1);

    printf("------- CMC FCM LEVEL 2 -------\n");
    printf("ui32DnTargetIdx_fcm_lv2=%d\n\n", ui32DnTargetIdx_fcm_lv2);
    printf("ui32BlcSensorBlack_fcm_lv2=%d %d %d %d\n", ui32BlcSensorBlack_fcm_lv2[0], ui32BlcSensorBlack_fcm_lv2[1], ui32BlcSensorBlack_fcm_lv2[2], ui32BlcSensorBlack_fcm_lv2[3]);
    printf("fDnsStrength_fcm_lv2=%f\n\n", fDnsStrength_fcm_lv2);
    printf("fRadius_fcm_lv2=%f\n", fRadius_fcm_lv2);
    printf("fStrength_fcm_lv2=%f\n", fStrength_fcm_lv2);
    printf("fThreshold_fcm_lv2=%f\n", fThreshold_fcm_lv2);
    printf("fDetail_fcm_lv2=%f\n", fDetail_fcm_lv2);
    printf("fEdgeScale_fcm_lv2=%f\n", fEdgeScale_fcm_lv2);
    printf("fEdgeOffset_fcm_lv2=%f\n", fEdgeOffset_fcm_lv2);
    printf("bBypassDenoise_fcm_lv2=%d\n", bBypassDenoise_fcm_lv2);
    printf("fDenoiseTau_fcm_lv2=%f\n", fDenoiseTau_fcm_lv2);
    printf("fDenoiseSigma_fcm_lv2=%f\n\n", fDenoiseSigma_fcm_lv2);
    printf("fContrast_fcm_lv2=%f\n", fContrast_fcm_lv2);
    printf("fSaturation_fcm_lv2=%f\n\n", fSaturation_fcm_lv2);
    printf("iGridStartCoords_fcm_lv2=%d %d\n", iGridStartCoords_fcm_lv2[0], iGridStartCoords_fcm_lv2[1]);
    printf("iGridTileDimensions_fcm_lv2=%d %d\n", iGridTileDimensions_fcm_lv2[0], iGridTileDimensions_fcm_lv2[1]);
    printf("fDpfWeight_fcm_lv2=%f\n", fDpfWeight_fcm_lv2);
    printf("iDpfThreshold_fcm_lv2=%d\n", iDpfThreshold_fcm_lv2);
    printf("iInY_fcm_lv2=%d %d\n", iInY_fcm_lv2[0], iInY_fcm_lv2[1]);
    printf("iOutY_fcm_lv2=%d %d\n", iOutY_fcm_lv2[0], iOutY_fcm_lv2[1]);
    printf("iOutC_fcm_lv2=%d %d\n", iOutC_fcm_lv2[0], iOutC_fcm_lv2[1]);
    printf("fFlatFactor_fcm_lv2=%f\n", fFlatFactor_fcm_lv2);
    printf("fWeightLine_fcm_lv2=%f\n\n", fWeightLine_fcm_lv2);
    printf("fColourConfidence_fcm_lv2=%f\n", fColourConfidence_fcm_lv2);
    printf("fColourSaturation_fcm_lv2=%f\n\n", fColourSaturation_fcm_lv2);
    printf("fEqualBrightSupressRatio_fcm_lv2=%f\n", fEqualBrightSupressRatio_fcm_lv2);
    printf("fEqualDarkSupressRatio_fcm_lv2=%f\n", fEqualDarkSupressRatio_fcm_lv2);
    printf("fOvershotThreshold_fcm_lv2=%f\n", fOvershotThreshold_fcm_lv2);
    printf("fWdrCeiling_fcm_lv2=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrCeiling_fcm_lv2[i]);
    }
    printf("\n");
    printf("fWdrFloor_fcm_lv2=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrFloor_fcm_lv2[i]);
    }
    printf("\n");
    printf("ui32GammaCrvMode_fcm_lv2=%d\n", ui32GammaCrvMode_fcm_lv2);
    printf("fTnmGamma_fcm_lv2=%f\n", fTnmGamma_fcm_lv2);
    printf("fBezierCtrlPnt_fcm_lv2=%f\n\n", fBezierCtrlPnt_fcm_lv2);

    if (bEnableInterpolationGamma) {
        printf("------- CMC FCM LEVEL 3 -------\n");
        printf("ui32DnTargetIdx_fcm_lv3=%d\n\n", ui32DnTargetIdx_fcm_lv3);
        printf("ui32BlcSensorBlack_fcm_lv3=%d %d %d %d\n", ui32BlcSensorBlack_fcm_lv3[0], ui32BlcSensorBlack_fcm_lv3[1], ui32BlcSensorBlack_fcm_lv3[2], ui32BlcSensorBlack_fcm_lv3[3]);
        printf("fDnsStrength_fcm_lv3=%f\n\n", fDnsStrength_fcm_lv3);
        printf("fRadius_fcm_lv3=%f\n", fRadius_fcm_lv3);
        printf("fStrength_fcm_lv3=%f\n", fStrength_fcm_lv3);
        printf("fThreshold_fcm_lv3=%f\n", fThreshold_fcm_lv3);
        printf("fDetail_fcm_lv3=%f\n", fDetail_fcm_lv3);
        printf("fEdgeScale_fcm_lv3=%f\n", fEdgeScale_fcm_lv3);
        printf("fEdgeOffset_fcm_lv3=%f\n", fEdgeOffset_fcm_lv3);
        printf("bBypassDenoise_fcm_lv3=%d\n", bBypassDenoise_fcm_lv3);
        printf("fDenoiseTau_fcm_lv3=%f\n", fDenoiseTau_fcm_lv3);
        printf("fDenoiseSigma_fcm_lv3=%f\n\n", fDenoiseSigma_fcm_lv3);
        printf("fContrast_fcm_lv3=%f\n", fContrast_fcm_lv3);
        printf("fSaturation_fcm_lv3=%f\n\n", fSaturation_fcm_lv3);
        printf("iGridStartCoords_fcm_lv3=%d %d\n", iGridStartCoords_fcm_lv3[0], iGridStartCoords_fcm_lv3[1]);
        printf("iGridTileDimensions_fcm_lv3=%d %d\n", iGridTileDimensions_fcm_lv3[0], iGridTileDimensions_fcm_lv3[1]);
        printf("fDpfWeight_fcm_lv3=%f\n", fDpfWeight_fcm_lv3);
        printf("iDpfThreshold_fcm_lv3=%d\n", iDpfThreshold_fcm_lv3);
        printf("iInY_fcm_lv3=%d %d\n", iInY_fcm_lv3[0], iInY_fcm_lv3[1]);
        printf("iOutY_fcm_lv3=%d %d\n", iOutY_fcm_lv3[0], iOutY_fcm_lv3[1]);
        printf("iOutC_fcm_lv3=%d %d\n", iOutC_fcm_lv3[0], iOutC_fcm_lv3[1]);
        printf("fFlatFactor_fcm_lv3=%f\n", fFlatFactor_fcm_lv3);
        printf("fWeightLine_fcm_lv3=%f\n\n", fWeightLine_fcm_lv3);
        printf("fColourConfidence_fcm_lv3=%f\n", fColourConfidence_fcm_lv3);
        printf("fColourSaturation_fcm_lv3=%f\n\n", fColourSaturation_fcm_lv3);
        printf("fEqualBrightSupressRatio_fcm_lv3=%f\n", fEqualBrightSupressRatio_fcm_lv3);
        printf("fEqualDarkSupressRatio_fcm_lv3=%f\n", fEqualDarkSupressRatio_fcm_lv3);
        printf("fOvershotThreshold_fcm_lv3=%f\n", fOvershotThreshold_fcm_lv3);
        printf("fWdrCeiling_fcm_lv3=");
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            printf(" %f", fWdrCeiling_fcm_lv3[i]);
        }
        printf("\n");
        printf("fWdrFloor_fcm_lv3=");
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            printf(" %f", fWdrFloor_fcm_lv3[i]);
        }
        printf("\n");
        printf("ui32GammaCrvMode_fcm_lv3=%d\n", ui32GammaCrvMode_fcm_lv3);
        printf("fTnmGamma_fcm_lv3=%f\n", fTnmGamma_fcm_lv3);
        printf("fBezierCtrlPnt_fcm_lv3=%f\n\n", fBezierCtrlPnt_fcm_lv3);
    }


    printf("---------------------------------------------ACM\n");
    printf("blSensorGainLevelCtrl=%d\n", blSensorGainLevelCtrl);
    printf("fSensorGain_lv1=%f\n", fSensorGain_lv1);
    printf("fSensorGain_lv2=%f\n\n", fSensorGain_lv2);
    printf("fSensorGainLv1Interpolation=%f\n", fSensorGainLv1Interpolation);
    printf("fSensorGainLv2Interpolation=%f\n\n", fSensorGainLv2Interpolation);
    printf("bEnableInterpolationGamma=%d\n", bEnableInterpolationGamma);
    printf("fCmcInterpolationGamma[0]=%f\n", fCmcInterpolationGamma[0]);
    printf("fCmcInterpolationGamma[1]=%f\n", fCmcInterpolationGamma[1]);
    printf("fCmcInterpolationGamma[2]=%f\n\n", fCmcInterpolationGamma[2]);

    printf("dbCcmAttenuation_lv1=%f\n", dbCcmAttenuation_lv1);
    printf("dbCcmAttenuation_lv2=%f\n", dbCcmAttenuation_lv2);
    printf("dbCcmAttenuation_lv3=%f\n\n", dbCcmAttenuation_lv3);

    printf("fBrightness_acm=%f\n", fBrightness_acm);
    printf("aRangeMult_acm=%f %f %f\n", aRangeMult_acm[0], aRangeMult_acm[1], aRangeMult_acm[2]);

    printf("targetBrightness_acm=%f\n", targetBrightness_acm);
    printf("fSensorMaxGain_acm=%f\n", fSensorMaxGain_acm);
    printf("fAeTargetMin_acm=%f\n\n", fAeTargetMin_acm);

    printf("------- CMC ACM LEVEL 0 -------\n");
    printf("ui32DnTargetIdx_acm=%d\n\n", ui32DnTargetIdx_acm);
    printf("ui32BlcSensorBlack_acm=%d %d %d %d\n", ui32BlcSensorBlack_acm[0], ui32BlcSensorBlack_acm[1], ui32BlcSensorBlack_acm[2], ui32BlcSensorBlack_acm[3]);
    printf("fDnsStrength_acm=%f\n\n", fDnsStrength_acm);
    printf("fRadius_acm=%f\n", fRadius_acm);
    printf("fStrength_acm=%f\n", fStrength_acm);
    printf("fThreshold_acm=%f\n", fThreshold_acm);
    printf("fDetail_acm=%f\n", fDetail_acm);
    printf("fEdgeScale_acm=%f\n", fEdgeScale_acm);
    printf("fEdgeOffset_acm=%f\n", fEdgeOffset_acm);
    printf("bBypassDenoise_acm=%d\n", bBypassDenoise_acm);
    printf("fDenoiseTau_acm=%f\n", fDenoiseTau_acm);
    printf("fDenoiseSigma_acm=%f\n\n", fDenoiseSigma_acm);
    printf("fContrast_acm=%f\n", fContrast_acm);
    printf("fSaturation_acm_=%f\n\n", fSaturation_acm);
    printf("iGridStartCoords_acm=%d %d\n", iGridStartCoords_acm[0], iGridStartCoords_acm[1]);
    printf("iGridTileDimensions_acm=%d %d\n", iGridTileDimensions_acm[0], iGridTileDimensions_acm[1]);
    printf("fDpfWeight_acm=%f\n", fDpfWeight_acm);
    printf("iDpfThreshold_acm=%d\n", iDpfThreshold_acm);
    printf("iInY_acm=%d %d\n", iInY_acm[0], iInY_acm[1]);
    printf("iOutY_acm=%d %d\n", iOutY_acm[0], iOutY_acm[1]);
    printf("iOutC_acm=%d %d\n", iOutC_acm[0], iOutC_acm[1]);
    printf("fFlatFactor_acm=%f\n", fFlatFactor_acm);
    printf("fWeightLine_acm=%f\n\n", fWeightLine_acm);
    printf("fColourConfidence_acm=%f\n", fColourConfidence_acm);
    printf("fColourSaturation_acm=%f\n\n", fColourSaturation_acm);
    printf("fEqualBrightSupressRatio_acm=%f\n", fEqualBrightSupressRatio_acm);
    printf("fEqualDarkSupressRatio_acm=%f\n", fEqualDarkSupressRatio_acm);
    printf("fOvershotThreshold_acm=%f\n", fOvershotThreshold_acm);
    printf("fWdrCeiling_acm=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrCeiling_acm[i]);
    }
    printf("\n");
    printf("fWdrFloor_acm=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrFloor_acm[i]);
    }
    printf("\n");
    printf("ui32GammaCrvMode_acm=%d\n", ui32GammaCrvMode_acm);
    printf("fTnmGamma_acm=%f\n", fTnmGamma_acm);
    printf("fBezierCtrlPnt_acm=%f\n\n", fBezierCtrlPnt_acm);

    printf("------- CMC ACM LEVEL 1 -------\n");
    printf("ui32DnTargetIdx_acm_lv1=%d\n\n", ui32DnTargetIdx_acm_lv1);
    printf("ui32BlcSensorBlack_acm_lv1=%d %d %d %d\n", ui32BlcSensorBlack_acm_lv1[0], ui32BlcSensorBlack_acm_lv1[1], ui32BlcSensorBlack_acm_lv1[2], ui32BlcSensorBlack_acm_lv1[3]);
    printf("fDnsStrength_acm_lv1=%f\n\n", fDnsStrength_acm_lv1);
    printf("fRadius_acm_lv1=%f\n", fRadius_acm_lv1);
    printf("fStrength_acm_lv1=%f\n", fStrength_acm_lv1);
    printf("fThreshold_acm_lv1=%f\n", fThreshold_acm_lv1);
    printf("fDetail_acm_lv1=%f\n", fDetail_acm_lv1);
    printf("fEdgeScale_acm_lv1=%f\n", fEdgeScale_acm_lv1);
    printf("fEdgeOffset_acm_lv1=%f\n", fEdgeOffset_acm_lv1);
    printf("bBypassDenoise_acm_lv1=%d\n", bBypassDenoise_acm_lv1);
    printf("fDenoiseTau_acm_lv1=%f\n", fDenoiseTau_acm_lv1);
    printf("fDenoiseSigma_acm_lv1=%f\n\n", fDenoiseSigma_acm_lv1);
    printf("fContrast_acm_lv1=%f\n", fContrast_acm_lv1);
    printf("fSaturation_acm_lv1=%f\n\n", fSaturation_acm_lv1);
    printf("iGridStartCoords_acm_lv1=%d %d\n", iGridStartCoords_acm_lv1[0], iGridStartCoords_acm_lv1[1]);
    printf("iGridTileDimensions_acm_lv1=%d %d\n", iGridTileDimensions_acm_lv1[0], iGridTileDimensions_acm_lv1[1]);
    printf("fDpfWeight_acm_lv1=%f\n", fDpfWeight_acm_lv1);
    printf("iDpfThreshold_acm_lv1=%d\n", iDpfThreshold_acm_lv1);
    printf("iInY_acm_lv1=%d %d\n", iInY_acm_lv1[0], iInY_acm_lv1[1]);
    printf("iOutY_acm_lv1=%d %d\n", iOutY_acm_lv1[0], iOutY_acm_lv1[1]);
    printf("iOutC_acm_lv1=%d %d\n", iOutC_acm_lv1[0], iOutC_acm_lv1[1]);
    printf("fFlatFactor_acm_lv1=%f\n", fFlatFactor_acm_lv1);
    printf("fWeightLine_acm_lv1=%f\n\n", fWeightLine_acm_lv1);
    printf("fColourConfidence_acm_lv1=%f\n", fColourConfidence_acm_lv1);
    printf("fColourSaturation_acm_lv1=%f\n\n", fColourSaturation_acm_lv1);
    printf("fEqualBrightSupressRatio_acm_lv1=%f\n", fEqualBrightSupressRatio_acm_lv1);
    printf("fEqualDarkSupressRatio_acm_lv1=%f\n", fEqualDarkSupressRatio_acm_lv1);
    printf("fOvershotThreshold_acm_lv1=%f\n", fOvershotThreshold_acm_lv1);
    printf("fWdrCeiling_acm_lv1=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrCeiling_acm_lv1[i]);
    }
    printf("\n");
    printf("fWdrFloor_acm_lv1=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrFloor_acm_lv1[i]);
    }
    printf("\n");
    printf("ui32GammaCrvMode_acm_lv1=%d\n", ui32GammaCrvMode_acm_lv1);
    printf("fTnmGamma_acm_lv1=%f\n", fTnmGamma_acm_lv1);
    printf("fBezierCtrlPnt_acm_lv1=%f\n\n", fBezierCtrlPnt_acm_lv1);

    printf("------- CMC ACM LEVEL 2 -------\n");
    printf("ui32DnTargetIdx_acm_lv2=%d\n\n", ui32DnTargetIdx_acm_lv2);
    printf("ui32BlcSensorBlack_acm_lv2=%d %d %d %d\n", ui32BlcSensorBlack_acm_lv2[0], ui32BlcSensorBlack_acm_lv2[1], ui32BlcSensorBlack_acm_lv2[2], ui32BlcSensorBlack_acm_lv2[3]);
    printf("fDnsStrength_acm_lv2=%f\n\n", fDnsStrength_acm_lv2);
    printf("fRadius_acm_lv2=%f\n", fRadius_acm_lv2);
    printf("fStrength_acm_lv2=%f\n", fStrength_acm_lv2);
    printf("fThreshold_acm_lv2=%f\n", fThreshold_acm_lv2);
    printf("fDetail_acm_lv2=%f\n", fDetail_acm_lv2);
    printf("fEdgeScale_acm_lv2=%f\n", fEdgeScale_acm_lv2);
    printf("fEdgeOffset_acm_lv2=%f\n", fEdgeOffset_acm_lv2);
    printf("bBypassDenoise_acm_lv2=%d\n", bBypassDenoise_acm_lv2);
    printf("fDenoiseTau_acm_lv2=%f\n", fDenoiseTau_acm_lv2);
    printf("fDenoiseSigma_acm_lv2=%f\n\n", fDenoiseSigma_acm_lv2);
    printf("fContrast_acm_lv2=%f\n", fContrast_acm_lv2);
    printf("fSaturation_acm_lv2=%f\n\n", fSaturation_acm_lv2);
    printf("iGridStartCoords_acm_lv2=%d %d\n", iGridStartCoords_acm_lv2[0], iGridStartCoords_acm_lv2[1]);
    printf("iGridTileDimensions_acm_lv2=%d %d\n", iGridTileDimensions_acm_lv2[0], iGridTileDimensions_acm_lv2[1]);
    printf("fDpfWeight_acm_lv2=%f\n", fDpfWeight_acm_lv2);
    printf("iDpfThreshold_acm_lv2=%d\n", iDpfThreshold_acm_lv2);
    printf("iInY_acm_lv2=%d %d\n", iInY_acm_lv2[0], iInY_acm_lv2[1]);
    printf("iOutY_acm_lv2=%d %d\n", iOutY_acm_lv2[0], iOutY_acm_lv2[1]);
    printf("iOutC_acm_lv2=%d %d\n", iOutC_acm_lv2[0], iOutC_acm_lv2[1]);
    printf("fFlatFactor_acm_lv2=%f\n", fFlatFactor_acm_lv2);
    printf("fWeightLine_acm_lv2=%f\n\n", fWeightLine_acm_lv2);
    printf("fColourConfidence_acm_lv2=%f\n", fColourConfidence_acm_lv2);
    printf("fColourSaturation_acm_lv2=%f\n\n", fColourSaturation_acm_lv2);
    printf("fEqualBrightSupressRatio_acm_lv2=%f\n", fEqualBrightSupressRatio_acm_lv2);
    printf("fEqualDarkSupressRatio_acm_lv2=%f\n", fEqualDarkSupressRatio_acm_lv2);
    printf("fOvershotThreshold_acm_lv2=%f\n", fOvershotThreshold_acm_lv2);
    printf("fWdrCeiling_acm_lv2=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrCeiling_acm_lv2[i]);
    }
    printf("\n");
    printf("fWdrFloor_acm_lv2=");
    for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
        printf(" %f", fWdrFloor_acm_lv2[i]);
    }
    printf("\n");
    printf("ui32GammaCrvMode_acm_lv2=%d\n", ui32GammaCrvMode_acm_lv2);
    printf("fTnmGamma_acm_lv2=%f\n", fTnmGamma_acm_lv2);
    printf("fBezierCtrlPnt_acm_lv2=%f\n\n", fBezierCtrlPnt_acm_lv2);

    if (bEnableInterpolationGamma) {
        printf("------- CMC ACM LEVEL 3 -------\n");
        printf("ui32DnTargetIdx_acm_lv3=%d\n\n", ui32DnTargetIdx_acm_lv3);
        printf("ui32BlcSensorBlack_acm_lv3=%d %d %d %d\n", ui32BlcSensorBlack_acm_lv3[0], ui32BlcSensorBlack_acm_lv3[1], ui32BlcSensorBlack_acm_lv3[2], ui32BlcSensorBlack_acm_lv3[3]);
        printf("fDnsStrength_acm_lv3=%f\n\n", fDnsStrength_acm_lv3);
        printf("fRadius_acm_lv3=%f\n", fRadius_acm_lv3);
        printf("fStrength_acm_lv3=%f\n", fStrength_acm_lv3);
        printf("fThreshold_acm_lv3=%f\n", fThreshold_acm_lv3);
        printf("fDetail_acm_lv3=%f\n", fDetail_acm_lv3);
        printf("fEdgeScale_acm_lv3=%f\n", fEdgeScale_acm_lv3);
        printf("fEdgeOffset_acm_lv3=%f\n", fEdgeOffset_acm_lv3);
        printf("bBypassDenoise_acm_lv3=%d\n", bBypassDenoise_acm_lv3);
        printf("fDenoiseTau_acm_lv3=%f\n", fDenoiseTau_acm_lv3);
        printf("fDenoiseSigma_acm_lv3=%f\n\n", fDenoiseSigma_acm_lv3);
        printf("fContrast_acm_lv3=%f\n", fContrast_acm_lv3);
        printf("fSaturation_acm_lv3=%f\n\n", fSaturation_acm_lv3);
        printf("iGridStartCoords_acm_lv3=%d %d\n", iGridStartCoords_acm_lv3[0], iGridStartCoords_acm_lv3[1]);
        printf("iGridTileDimensions_acm_lv3=%d %d\n", iGridTileDimensions_acm_lv3[0], iGridTileDimensions_acm_lv3[1]);
        printf("fDpfWeight_acm_lv3=%f\n", fDpfWeight_acm_lv3);
        printf("iDpfThreshold_acm_lv3=%d\n", iDpfThreshold_acm_lv3);
        printf("iInY_acm_lv3=%d %d\n", iInY_acm_lv3[0], iInY_acm_lv3[1]);
        printf("iOutY_acm_lv3=%d %d\n", iOutY_acm_lv3[0], iOutY_acm_lv3[1]);
        printf("iOutC_acm_lv3=%d %d\n", iOutC_acm_lv3[0], iOutC_acm_lv3[1]);
        printf("fFlatFactor_acm_lv3=%f\n", fFlatFactor_acm_lv3);
        printf("fWeightLine_acm_lv3=%f\n\n", fWeightLine_acm_lv3);
        printf("fColourConfidence_acm_lv3=%f\n", fColourConfidence_acm_lv3);
        printf("fColourSaturation_acm_lv3=%f\n\n", fColourSaturation_acm_lv3);
        printf("fEqualBrightSupressRatio_acm_lv3=%f\n", fEqualBrightSupressRatio_acm_lv3);
        printf("fEqualDarkSupressRatio_acm_lv3=%f\n", fEqualDarkSupressRatio_acm_lv3);
        printf("fOvershotThreshold_acm_lv3=%f\n", fOvershotThreshold_acm_lv3);
        printf("fWdrCeiling_acm_lv3=");
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            printf(" %f", fWdrCeiling_acm_lv3[i]);
        }
        printf("\n");
        printf("fWdrFloor_acm_lv3=");
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            printf(" %f", fWdrFloor_acm_lv3[i]);
        }
        printf("\n");
        printf("ui32GammaCrvMode_acm_lv3=%d\n", ui32GammaCrvMode_acm_lv3);
        printf("fTnmGamma_acm_lv3=%f\n", fTnmGamma_acm_lv3);
        printf("fBezierCtrlPnt_acm_lv3=%f\n\n", fBezierCtrlPnt_acm_lv3);
    }
#endif //INFOTM_CMC_DEBUG_MESSAGE

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::save(ParameterList &parameters, SaveType t) const
{
    std::vector<std::string> values;
    int i;

    static ParameterGroup group;

    if (0 == group.parameters.size())
    {
        group = ControlCMC::getGroup();
    }

    parameters.addGroup("ControlCMC", group);

    switch (t)
    {
    case SAVE_VAL:
        parameters.addParameter(Parameter(CMC_ENABLE.name, toString(this->bCmcEnable)));
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_CHANGE_ENABLE.name, toString(this->bDnTargetIdxChageEnable)));
        parameters.addParameter(Parameter(CMC_ENABLE_AVG_GAIN.name, toString(this->bEnableCalcAvgGain)));

        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_EXPECT.name, toString(this->fR2YSaturationExpect)));

        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_EXPECT.name, toString(this->fShaStrengthExpect)));

        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_ENABLE.name, toString(this->bCmcNightModeDetectEnable)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.name, toString(this->fCmcNightModeDetectBrightnessEnter)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.name, toString(this->fCmcNightModeDetectBrightnessExit)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.name, toString(this->fCmcNightModeDetectGainEnter)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.name, toString(this->fCmcNightModeDetectGainExit)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_WEIGHTING.name, toString(this->fCmcNightModeDetectWeighting)));

        parameters.addParameter(Parameter(CMC_ENABLE_CAPTURE_IQ.name, toString(this->bEnableCaptureIQ)));
        parameters.addParameter(Parameter(CMC_CAPTURE_CCM_RATIO.name, toString(this->fCmcCaptureModeCCMRatio)));
        values.clear();
        for (i = 0 ; i < 3 ; i++)
            values.push_back(toString(this->fCmcCaptureR2YRangeMul[i]));
        parameters.addParameter(Parameter(CMC_R2Y_CAPTURE_RANGE_MUL.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++)
            values.push_back(toString(this->iCmcCaptureInY[i]));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_IN_Y.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++)
            values.push_back(toString(this->iCmcCaptureOutY[i]));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_Y.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++)
            values.push_back(toString(this->iCmcCaptureOutC[i]));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_C.name, values));

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM.name, toString((int)this->ui32DnTargetIdx_fcm)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Flat Color Mode setting
        //BLC SENSOR BLACK
        values.clear();
        for (i = 0 ; i < 4 ; i++) {
            values.push_back(toString(this->ui32BlcSensorBlack_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM.name, values));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM.name, toString(this->ui32SystemBlack_fcm)));

        //DNS
        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM.name, toString(this->fDnsStrength_fcm)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM.name, toString(this->fDnsReadNoise_fcm)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM.name, toString(this->iDnsWellDepth_fcm)));

        //SHA
        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM.name, toString(this->fRadius_fcm)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM.name, toString(this->fStrength_fcm)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM.name, toString(this->fThreshold_fcm)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM.name, toString(this->fDetail_fcm)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM.name, toString(this->fEdgeScale_fcm)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM.name, toString(this->fEdgeOffset_fcm)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM.name, toString(this->bBypassDenoise_fcm)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM.name, toString(this->fDenoiseTau_fcm)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM.name, toString(this->fDenoiseSigma_fcm)));

        //R2Y
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM.name, toString(this->fBrightness_fcm)));
        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM.name, toString(this->fContrast_fcm)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM.name, toString(this->fSaturation_fcm)));
        values.clear();
        for (i = 0 ; i < 3 ; i++)
            values.push_back(toString(this->aRangeMult_fcm[i]));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM.name, values));

        //HIS
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridStartCoords_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridTileDimensions_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.name, values));

        //DPF
        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM.name, toString(this->fDpfWeight_fcm)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM.name, toString(this->iDpfThreshold_fcm)));

        //TNM
        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM.name, toString(this->fHisMin_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM.name, toString(this->fHisMax_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM.name, toString(this->bTnmcAdaptive_fcm)));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iInY_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutY_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutC_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM.name, values));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM.name, toString(this->fFlatFactor_fcm)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM.name, toString(this->fWeightLine_fcm)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM.name, toString(this->fColourConfidence_fcm)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM.name, toString(this->fColourSaturation_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_FCM.name, toString(this->bEnableGamma_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.name, toString(this->fEqualBrightSupressRatio_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.name, toString(this->fEqualDarkSupressRatio_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.name, toString(fOvershotThreshold_fcm)));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrCeiling_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM.name, values));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrFloor_fcm[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM.name, values));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM.name, toString(this->ui32GammaCrvMode_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM.name, toString(this->fTnmGamma_fcm)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM.name, toString(this->fBezierCtrlPnt_fcm)));

        //AE
        parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_FCM.name, toString(this->targetBrightness_fcm)));
        parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_FCM.name, toString(this->fAeTargetMin_fcm)));

        //Sensor Max Gain
        parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_FCM.name, toString(this->fSensorMaxGain_fcm)));
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV1.name, toString((int)this->ui32DnTargetIdx_fcm_lv1)));

        values.clear();
        for (i = 0 ; i < 4 ; i++) {
            values.push_back(toString(this->ui32BlcSensorBlack_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV1.name, values));
		parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV1.name, toString(this->ui32SystemBlack_fcm_lv1)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV1.name, toString(this->fDnsStrength_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV1.name, toString(this->fDnsReadNoise_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV1.name, toString(this->iDnsWellDepth_fcm_lv1)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV1.name, toString(this->fRadius_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV1.name, toString(this->fStrength_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV1.name, toString(this->fThreshold_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV1.name, toString(this->fDetail_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV1.name, toString(this->fEdgeScale_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV1.name, toString(this->fEdgeOffset_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV1.name, toString(this->bBypassDenoise_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV1.name, toString(this->fDenoiseTau_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV1.name, toString(this->fDenoiseSigma_fcm_lv1)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV1.name, toString(this->fContrast_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV1.name, toString(this->fSaturation_fcm_lv1)));

        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV1.name, toString(this->fBrightness_fcm_lv1)));
        values.clear();
        for (i = 0 ; i < 3 ; i++)
            values.push_back(toString(this->aRangeMult_fcm_lv1[i]));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV1.name, values));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridStartCoords_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridTileDimensions_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.name, values));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV1.name, toString(this->fDpfWeight_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV1.name, toString(this->iDpfThreshold_fcm_lv1)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV1.name, toString(this->fHisMin_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV1.name, toString(this->fHisMax_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV1.name, toString(this->bTnmcAdaptive_fcm_lv1)));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iInY_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutY_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutC_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV1.name, values));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV1.name, toString(this->fFlatFactor_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV1.name, toString(this->fWeightLine_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.name, toString(this->fColourConfidence_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV1.name, toString(this->fColourSaturation_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.name, toString(this->fEqualBrightSupressRatio_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.name, toString(this->fEqualDarkSupressRatio_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.name, toString(fOvershotThreshold_fcm_lv1)));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrCeiling_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrFloor_fcm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV1.name, values));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.name, toString(this->ui32GammaCrvMode_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV1.name, toString(this->fTnmGamma_fcm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.name, toString(this->fBezierCtrlPnt_fcm_lv1)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV2.name, toString((int)this->ui32DnTargetIdx_fcm_lv2)));

        values.clear();
        for (i = 0 ; i < 4 ; i++) {
            values.push_back(toString(this->ui32BlcSensorBlack_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV2.name, toString(this->ui32SystemBlack_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV2.name, values));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV2.name, toString(this->fDnsStrength_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV2.name, toString(this->fDnsReadNoise_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV2.name, toString(this->iDnsWellDepth_fcm_lv2)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV2.name, toString(this->fRadius_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV2.name, toString(this->fStrength_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV2.name, toString(this->fThreshold_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV2.name, toString(this->fDetail_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV2.name, toString(this->fEdgeScale_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV2.name, toString(this->fEdgeOffset_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV2.name, toString(this->bBypassDenoise_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV2.name, toString(this->fDenoiseTau_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV2.name, toString(this->fDenoiseSigma_fcm_lv2)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV2.name, toString(this->fContrast_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV2.name, toString(this->fSaturation_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV2.name, toString(this->fBrightness_fcm_lv2)));
        values.clear();
        for (i = 0 ; i < 3 ; i++)
            values.push_back(toString(this->aRangeMult_fcm_lv2[i]));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV2.name, values));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridStartCoords_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridTileDimensions_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.name, values));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV2.name, toString(this->fDpfWeight_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV2.name, toString(this->iDpfThreshold_fcm_lv2)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV2.name, toString(this->fHisMin_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV2.name, toString(this->fHisMax_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV2.name, toString(this->bTnmcAdaptive_fcm_lv2)));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iInY_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutY_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutC_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV2.name, values));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV2.name, toString(this->fFlatFactor_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV2.name, toString(this->fWeightLine_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.name, toString(this->fColourConfidence_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV2.name, toString(this->fColourSaturation_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.name, toString(this->fEqualBrightSupressRatio_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.name, toString(this->fEqualDarkSupressRatio_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.name, toString(fOvershotThreshold_fcm_lv2)));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrCeiling_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrFloor_fcm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV2.name, values));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.name, toString(this->ui32GammaCrvMode_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV2.name, toString(this->fTnmGamma_fcm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.name, toString(this->fBezierCtrlPnt_fcm_lv2)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV3.name, toString((int)this->ui32DnTargetIdx_fcm_lv3)));

            values.clear();
            for (i = 0 ; i < 4 ; i++) {
                values.push_back(toString(this->ui32BlcSensorBlack_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV3.name, values));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV3.name, toString(this->fDnsStrength_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV3.name, toString(this->fDnsReadNoise_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV3.name, toString(this->iDnsWellDepth_fcm_lv3)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV3.name, toString(this->fRadius_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV3.name, toString(this->fStrength_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV3.name, toString(this->fThreshold_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV3.name, toString(this->fDetail_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV3.name, toString(this->fEdgeScale_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV3.name, toString(this->fEdgeOffset_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV3.name, toString(this->bBypassDenoise_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV3.name, toString(this->fDenoiseTau_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV3.name, toString(this->fDenoiseSigma_fcm_lv3)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV3.name, toString(this->fContrast_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV3.name, toString(this->fSaturation_fcm_lv3)));

            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV3.name, toString(this->fBrightness_fcm_lv3)));
            values.clear();
            for (i = 0 ; i < 3 ; i++)
                values.push_back(toString(this->aRangeMult_fcm_lv3[i]));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV3.name, values));

            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(this->iGridStartCoords_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(this->iGridTileDimensions_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.name, values));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV3.name, toString(this->fDpfWeight_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV3.name, toString(this->iDpfThreshold_fcm_lv3)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV3.name, toString(this->fHisMin_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV3.name, toString(this->fHisMax_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV3.name, toString(this->bTnmcAdaptive_fcm_lv3)));

            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iInY_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iOutY_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iOutC_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV3.name, values));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV3.name, toString(this->fFlatFactor_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV3.name, toString(this->fWeightLine_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.name, toString(this->fColourConfidence_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV3.name, toString(this->fColourSaturation_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.name, toString(this->fEqualBrightSupressRatio_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.name, toString(this->fEqualDarkSupressRatio_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.name, toString(fOvershotThreshold_fcm_lv3)));
            values.clear();
            for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
                values.push_back(toString(fWdrCeiling_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
                values.push_back(toString(fWdrFloor_fcm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV3.name, values));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.name, toString(this->ui32GammaCrvMode_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV3.name, toString(this->fTnmGamma_fcm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.name, toString(this->fBezierCtrlPnt_fcm_lv3)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM.name, toString((int)this->ui32DnTargetIdx_acm)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Advanced Color Mode setting
        if (bCmcEnable) {
            //BLC SENSOR BLACK
            values.clear();
            for (i = 0 ; i < 4 ; i++) {
                values.push_back(toString(this->ui32BlcSensorBlack_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM.name, values));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM.name, toString(this->ui32SystemBlack_acm)));

            //DNS
            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM.name, toString(this->fDnsStrength_acm)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM.name, toString(this->fDnsReadNoise_acm)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM.name, toString(this->iDnsWellDepth_acm)));

            //SHA
            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM.name, toString(this->fRadius_acm)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM.name, toString(this->fStrength_acm)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM.name, toString(this->fThreshold_acm)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM.name, toString(this->fDetail_acm)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM.name, toString(this->fEdgeScale_acm)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM.name, toString(this->fEdgeOffset_acm)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM.name, toString(this->bBypassDenoise_acm)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM.name, toString(this->fDenoiseTau_acm)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM.name, toString(this->fDenoiseSigma_acm)));

            //R2Y
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM.name, toString(this->fBrightness_acm)));
            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM.name, toString(this->fContrast_acm)));
            values.clear();
            for (i = 0 ; i < 3 ; i++)
                values.push_back(toString(this->aRangeMult_acm[i]));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM.name, values));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM.name, toString(this->fSaturation_acm)));

            //HIS
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(this->iGridStartCoords_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(this->iGridTileDimensions_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.name, values));

            //DPF
            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM.name, toString(this->fDpfWeight_acm)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM.name, toString(this->iDpfThreshold_acm)));

            //TNM
            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM.name, toString(this->fHisMin_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM.name, toString(this->fHisMax_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM.name, toString(this->bTnmcAdaptive_acm)));

            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iInY_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iOutY_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iOutC_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM.name, values));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM.name, toString(this->fFlatFactor_acm)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM.name, toString(this->fWeightLine_acm)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM.name, toString(this->fColourConfidence_acm)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM.name, toString(this->fColourSaturation_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_ACM.name, toString(this->bEnableGamma_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.name, toString(this->fEqualBrightSupressRatio_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.name, toString(this->fEqualDarkSupressRatio_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.name, toString(fOvershotThreshold_acm)));
            values.clear();
            for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
                values.push_back(toString(fWdrCeiling_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM.name, values));
            values.clear();
            for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
                values.push_back(toString(fWdrFloor_acm[i]));
            }
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM.name, values));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM.name, toString(this->ui32GammaCrvMode_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM.name, toString(this->fTnmGamma_acm)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM.name, toString(this->fBezierCtrlPnt_acm)));

            //AE
            parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_ACM.name, toString(this->targetBrightness_acm)));
            parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_ACM.name, toString(this->fAeTargetMin_acm)));

            //Sensor Max Gain
            parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_ACM.name, toString(this->fSensorMaxGain_acm)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LEVEL_CTRL.name, toString(this->blSensorGainLevelCtrl)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1.name, toString(this->fSensorGain_lv1)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2.name, toString(this->fSensorGain_lv2)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1_INTERPOLATION.name, toString(this->fSensorGainLv1Interpolation)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2_INTERPOLATION.name, toString(this->fSensorGainLv2Interpolation)));
        parameters.addParameter(Parameter(CMC_ENABLE_INTERPOLATION_GAMMA.name, toString(this->bEnableInterpolationGamma)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_0.name, toString(this->fCmcInterpolationGamma[0])));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_1.name, toString(this->fCmcInterpolationGamma[1])));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_2.name, toString(this->fCmcInterpolationGamma[2])));

        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV1.name, toString(this->dbCcmAttenuation_lv1)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV2.name, toString(this->dbCcmAttenuation_lv2)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV3.name, toString(this->dbCcmAttenuation_lv3)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV1.name, toString((int)this->ui32DnTargetIdx_acm_lv1)));

        values.clear();
        for (i = 0 ; i < 4 ; i++) {
            values.push_back(toString(this->ui32BlcSensorBlack_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV1.name, values));
		parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV1.name, toString(this->ui32SystemBlack_acm_lv1)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV1.name, toString(this->fDnsStrength_acm_lv1)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV1.name, toString(this->fDnsReadNoise_acm_lv1)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV1.name, toString(this->iDnsWellDepth_acm_lv1)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV1.name, toString(this->fRadius_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV1.name, toString(this->fStrength_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV1.name, toString(this->fThreshold_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV1.name, toString(this->fDetail_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV1.name, toString(this->fEdgeScale_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV1.name, toString(this->fEdgeOffset_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV1.name, toString(this->bBypassDenoise_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV1.name, toString(this->fDenoiseTau_acm_lv1)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV1.name, toString(this->fDenoiseSigma_acm_lv1)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV1.name, toString(this->fContrast_acm_lv1)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV1.name, toString(this->fSaturation_acm_lv1)));

        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV1.name, toString(this->fBrightness_acm_lv1)));
        values.clear();
        for (i = 0 ; i < 3 ; i++)
            values.push_back(toString(this->aRangeMult_acm_lv1[i]));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV1.name, values));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridStartCoords_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridTileDimensions_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.name, values));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV1.name, toString(this->fDpfWeight_acm_lv1)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV1.name, toString(this->iDpfThreshold_acm_lv1)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV1.name, toString(this->fHisMin_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV1.name, toString(this->fHisMax_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV1.name, toString(this->bTnmcAdaptive_acm_lv1)));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iInY_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutY_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutC_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV1.name, values));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV1.name, toString(this->fFlatFactor_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV1.name, toString(this->fWeightLine_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.name, toString(this->fColourConfidence_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV1.name, toString(this->fColourSaturation_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.name, toString(this->fEqualBrightSupressRatio_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.name, toString(this->fEqualDarkSupressRatio_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.name, toString(fOvershotThreshold_acm_lv1)));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrCeiling_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV1.name, values));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrFloor_acm_lv1[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV1.name, values));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.name, toString(this->ui32GammaCrvMode_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV1.name, toString(this->fTnmGamma_acm_lv1)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.name, toString(this->fBezierCtrlPnt_acm_lv1)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV2.name, toString((int)this->ui32DnTargetIdx_acm_lv2)));

        values.clear();
        for (i = 0 ; i < 4 ; i++) {
            values.push_back(toString(this->ui32BlcSensorBlack_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV2.name, values));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV2.name, toString(this->ui32SystemBlack_acm_lv2)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV2.name, toString(this->fDnsStrength_acm_lv2)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV2.name, toString(this->fDnsReadNoise_acm_lv2)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV2.name, toString(this->iDnsWellDepth_acm_lv2)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV2.name, toString(this->fRadius_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV2.name, toString(this->fStrength_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV2.name, toString(this->fThreshold_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV2.name, toString(this->fDetail_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV2.name, toString(this->fEdgeScale_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV2.name, toString(this->fEdgeOffset_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV2.name, toString(this->bBypassDenoise_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV2.name, toString(this->fDenoiseTau_acm_lv2)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV2.name, toString(this->fDenoiseSigma_acm_lv2)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV2.name, toString(this->fContrast_acm_lv2)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV2.name, toString(this->fSaturation_acm_lv2)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV2.name, toString(this->fBrightness_acm_lv2)));
        values.clear();
        for (i = 0 ; i < 3 ; i++)
            values.push_back(toString(this->aRangeMult_acm_lv2[i]));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV2.name, values));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridStartCoords_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(this->iGridTileDimensions_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.name, values));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV2.name, toString(this->fDpfWeight_acm_lv2)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV2.name, toString(this->iDpfThreshold_acm_lv2)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV2.name, toString(this->fHisMin_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV2.name, toString(this->fHisMax_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV2.name, toString(this->bTnmcAdaptive_acm_lv2)));

        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iInY_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutY_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < 2 ; i++) {
            values.push_back(toString(iOutC_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV2.name, values));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV2.name, toString(this->fFlatFactor_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV2.name, toString(this->fWeightLine_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.name, toString(this->fColourConfidence_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV2.name, toString(this->fColourSaturation_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.name, toString(this->fEqualBrightSupressRatio_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.name, toString(this->fEqualDarkSupressRatio_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.name, toString(fOvershotThreshold_acm_lv2)));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrCeiling_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV2.name, values));
        values.clear();
        for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
            values.push_back(toString(fWdrFloor_acm_lv2[i]));
        }
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV2.name, values));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.name, toString(this->ui32GammaCrvMode_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV2.name, toString(this->fTnmGamma_acm_lv2)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.name, toString(this->fBezierCtrlPnt_acm_lv2)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV3.name, toString((int)this->ui32DnTargetIdx_acm_lv3)));

            values.clear();
            for (i = 0 ; i < 4 ; i++) {
                values.push_back(toString(this->ui32BlcSensorBlack_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV3.name, values));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV3.name, toString(this->ui32SystemBlack_acm_lv3)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV3.name, toString(this->fDnsStrength_acm_lv3)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV3.name, toString(this->fDnsReadNoise_acm_lv3)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV3.name, toString(this->iDnsWellDepth_acm_lv3)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV3.name, toString(this->fRadius_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV3.name, toString(this->fStrength_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV3.name, toString(this->fThreshold_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV3.name, toString(this->fDetail_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV3.name, toString(this->fEdgeScale_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV3.name, toString(this->fEdgeOffset_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV3.name, toString(this->bBypassDenoise_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV3.name, toString(this->fDenoiseTau_acm_lv3)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV3.name, toString(this->fDenoiseSigma_acm_lv3)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV3.name, toString(this->fContrast_acm_lv3)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV3.name, toString(this->fSaturation_acm_lv3)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV3.name, toString(this->fBrightness_acm_lv3)));
            values.clear();
            for (i = 0 ; i < 3 ; i++)
                values.push_back(toString(this->aRangeMult_acm_lv3[i]));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV3.name, values));

            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(this->iGridStartCoords_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(this->iGridTileDimensions_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.name, values));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV3.name, toString(this->fDpfWeight_acm_lv3)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV3.name, toString(this->iDpfThreshold_acm_lv3)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV3.name, toString(this->fHisMin_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV3.name, toString(this->fHisMax_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV3.name, toString(this->bTnmcAdaptive_acm_lv3)));

            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iInY_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iOutY_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < 2 ; i++) {
                values.push_back(toString(iOutC_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV3.name, values));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV3.name, toString(this->fFlatFactor_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV3.name, toString(this->fWeightLine_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.name, toString(this->fColourConfidence_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV3.name, toString(this->fColourSaturation_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.name, toString(this->fEqualBrightSupressRatio_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.name, toString(this->fEqualDarkSupressRatio_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.name, toString(fOvershotThreshold_acm_lv3)));
            values.clear();
            for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
                values.push_back(toString(fWdrCeiling_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV3.name, values));
            values.clear();
            for (i = 0 ; i < TNMC_WDR_SEGMENT_CNT ; i++) {
                values.push_back(toString(fWdrFloor_acm_lv3[i]));
            }
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV3.name, values));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.name, toString(this->ui32GammaCrvMode_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV3.name, toString(this->fTnmGamma_acm_lv3)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.name, toString(this->fBezierCtrlPnt_acm_lv3)));
        }
        #endif //INFOTM_ENABLE_GAIN_LEVEL_IDX
        break;

    case SAVE_MIN:
        parameters.addParameter(Parameter(CMC_ENABLE.name, toString(CMC_ENABLE.def)));
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_CHANGE_ENABLE.name, toString(CMC_DN_TARGET_IDX_CHANGE_ENABLE.def)));
        parameters.addParameter(Parameter(CMC_ENABLE_AVG_GAIN.name, toString(CMC_ENABLE_AVG_GAIN.def)));

        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_EXPECT.name, toString(CMC_SHA_STRENGTH_EXPECT.min)));

        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_ENABLE.name, toString(CMC_NIGHT_MODE_DETECT_ENABLE.def)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.name, toString(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.min)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.name, toString(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.min)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.name, toString(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.min)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.name, toString(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.min)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_WEIGHTING.name, toString(CMC_NIGHT_MODE_DETECT_WEIGHTING.min)));

        parameters.addParameter(Parameter(CMC_ENABLE_CAPTURE_IQ.name, toString(CMC_ENABLE_CAPTURE_IQ.def)));
        parameters.addParameter(Parameter(CMC_CAPTURE_CCM_RATIO.name, toString(CMC_CAPTURE_CCM_RATIO.min)));
        parameters.addParameter(Parameter(CMC_R2Y_CAPTURE_RANGE_MUL.name, toString(CMC_R2Y_CAPTURE_RANGE_MUL.min)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_IN_Y.name, toString(CMC_TNM_CAPTURE_IN_Y.min)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_Y.name, toString(CMC_TNM_CAPTURE_OUT_Y.min)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_C.name, toString(CMC_TNM_CAPTURE_OUT_C.min)));

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM.name, toString(CMC_DN_TARGET_IDX_FCM.min)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Flat Color Mode setting
        //BLC SENSOR BLACK
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM.name, toString(CMC_BLC_SENSOR_BLACK_FCM.min)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM.name, toString(CMC_BLC_SYS_BLACK_FCM.min)));

        //DNS
        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM.name, toString(CMC_DNS_STRENGTH_FCM.min)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM.name, toString(CMC_DNS_READ_NOISE_FCM.min)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM.name, toString(CMC_DNS_WELLDEPTH_FCM.min)));

        //SHA
        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM.name, toString(CMC_SHA_RADIUS_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM.name, toString(CMC_SHA_STRENGTH_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM.name, toString(CMC_SHA_THRESH_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM.name, toString(CMC_SHA_DETAIL_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM.name, toString(CMC_SHA_EDGE_SCALE_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM.name, toString(CMC_SHA_EDGE_OFFSET_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM.name, toString(CMC_SHA_DENOISE_BYPASS_FCM.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM.name, toString(CMC_SHADN_TAU_FCM.min)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM.name, toString(CMC_SHADN_SIGMA_FCM.min)));

        //R2Y
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM.name, toString(CMC_R2Y_BRIGHTNESS_FCM.min)));
        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM.name, toString(CMC_R2Y_CONTRAST_FCM.min)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM.name, toString(CMC_R2Y_SATURATION_FCM.min)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM.name, toString(CMC_R2Y_RANGE_MUL_FCM.min)));

        //HIS
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM.name, toString(CMC_HIS_GRID_START_COORDS_FCM.min)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.min)));

        //DPF
        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM.name, toString(CMC_DPF_WEIGHT_FCM.min)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM.name, toString(CMC_DPF_THRESHOLD_FCM.min)));

        //TNM
        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM.name, toString(CMC_TNMC_HISTMIN_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM.name, toString(CMC_TNMC_HISTMAX_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM.name, toString(CMC_TNMC_ADAPTIVE_FCM.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM.name, toString(CMC_TNM_IN_Y_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM.name, toString(CMC_TNM_OUT_Y_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM.name, toString(CMC_TNM_OUT_C_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM.name, toString(CMC_TNM_FLAT_FACTOR_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM.name, toString(CMC_TNM_WEIGHT_LINE_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM.name, toString(CMC_TNM_COLOUR_SATURATION_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_FCM.name, toString(CMC_TNMC_ENABLE_GAMMA_FCM.def)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM.name, toString(CMC_TNMC_WDR_CEILING_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM.name, toString(CMC_TNMC_WDR_FLOOR_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM.name, toString(CMC_TNMC_GAMMA_FCM.min)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM.min)));

        //AE
        parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_FCM.name, toString(CMC_AE_TARGET_BRIGHTNESS_FCM.min)));
        parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_FCM.name, toString(CMC_AE_TARGET_MIN_FCM.min)));

        //Sensor Max Gain
        parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_FCM.name, toString(CMC_SENSOR_MAX_GAIN_FCM.min)));
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV1.name, toString(CMC_DN_TARGET_IDX_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV1.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV1.name, toString(CMC_BLC_SYS_BLACK_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV1.name, toString(CMC_DNS_STRENGTH_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV1.name, toString(CMC_DNS_READ_NOISE_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV1.name, toString(CMC_DNS_WELLDEPTH_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV1.name, toString(CMC_SHA_RADIUS_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV1.name, toString(CMC_SHA_STRENGTH_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV1.name, toString(CMC_SHA_THRESH_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV1.name, toString(CMC_SHA_DETAIL_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV1.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV1.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV1.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV1.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV1.name, toString(CMC_SHADN_TAU_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV1.name, toString(CMC_SHADN_SIGMA_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV1.name, toString(CMC_R2Y_CONTRAST_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV1.name, toString(CMC_R2Y_SATURATION_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV1.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV1.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV1.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV1.name, toString(CMC_DPF_WEIGHT_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV1.name, toString(CMC_DPF_THRESHOLD_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV1.name, toString(CMC_TNMC_HISTMIN_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV1.name, toString(CMC_TNMC_HISTMAX_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV1.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV1.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV1.name, toString(CMC_TNM_IN_Y_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV1.name, toString(CMC_TNM_OUT_Y_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV1.name, toString(CMC_TNM_OUT_C_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV1.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV1.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV1.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV1.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV1.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV1.name, toString(CMC_TNMC_GAMMA_FCM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.min)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV2.name, toString(CMC_DN_TARGET_IDX_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV2.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV2.name, toString(CMC_BLC_SYS_BLACK_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV2.name, toString(CMC_DNS_STRENGTH_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV2.name, toString(CMC_DNS_READ_NOISE_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV2.name, toString(CMC_DNS_WELLDEPTH_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV2.name, toString(CMC_SHA_RADIUS_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV2.name, toString(CMC_SHA_STRENGTH_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV2.name, toString(CMC_SHA_THRESH_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV2.name, toString(CMC_SHA_DETAIL_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV2.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV2.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV2.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV2.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV2.name, toString(CMC_SHADN_TAU_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV2.name, toString(CMC_SHADN_SIGMA_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV2.name, toString(CMC_R2Y_CONTRAST_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV2.name, toString(CMC_R2Y_SATURATION_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV2.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV2.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV2.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV2.name, toString(CMC_DPF_WEIGHT_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV2.name, toString(CMC_DPF_THRESHOLD_FCM_LV2.min)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV2.name, toString(CMC_TNMC_HISTMIN_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV2.name, toString(CMC_TNMC_HISTMAX_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV2.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV2.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV2.name, toString(CMC_TNM_IN_Y_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV2.name, toString(CMC_TNM_OUT_Y_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV2.name, toString(CMC_TNM_OUT_C_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV2.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV2.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV2.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV2.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV2.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV2.name, toString(CMC_TNMC_GAMMA_FCM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.min)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV3.name, toString(CMC_DN_TARGET_IDX_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV3.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV3.name, toString(CMC_BLC_SYS_BLACK_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV3.name, toString(CMC_DNS_STRENGTH_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV3.name, toString(CMC_DNS_READ_NOISE_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV3.name, toString(CMC_DNS_WELLDEPTH_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV3.name, toString(CMC_SHA_RADIUS_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV3.name, toString(CMC_SHA_STRENGTH_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV3.name, toString(CMC_SHA_THRESH_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV3.name, toString(CMC_SHA_DETAIL_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV3.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV3.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV3.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV3.def)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV3.name, toString(CMC_SHADN_TAU_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV3.name, toString(CMC_SHADN_SIGMA_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV3.name, toString(CMC_R2Y_CONTRAST_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV3.name, toString(CMC_R2Y_SATURATION_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV3.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV3.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV3.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV3.name, toString(CMC_DPF_WEIGHT_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV3.name, toString(CMC_DPF_THRESHOLD_FCM_LV3.min)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV3.name, toString(CMC_TNMC_HISTMIN_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV3.name, toString(CMC_TNMC_HISTMAX_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV3.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV3.def)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV3.name, toString(CMC_TNM_IN_Y_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV3.name, toString(CMC_TNM_OUT_Y_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV3.name, toString(CMC_TNM_OUT_C_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV3.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV3.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV3.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV3.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV3.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV3.name, toString(CMC_TNMC_GAMMA_FCM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.min)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM.name, toString(CMC_DN_TARGET_IDX_ACM.min)));
        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Advanced Color Mode setting
        if (bCmcEnable) {
            //BLC SENSOR BLACK
            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM.name, toString(CMC_BLC_SENSOR_BLACK_ACM.min)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM.name, toString(CMC_BLC_SYS_BLACK_ACM.min)));

            //DNS
            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM.name, toString(CMC_DNS_STRENGTH_ACM.min)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM.name, toString(CMC_DNS_READ_NOISE_ACM.min)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM.name, toString(CMC_DNS_WELLDEPTH_ACM.min)));

            //SHA
            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM.name, toString(CMC_SHA_RADIUS_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM.name, toString(CMC_SHA_STRENGTH_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM.name, toString(CMC_SHA_THRESH_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM.name, toString(CMC_SHA_DETAIL_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM.name, toString(CMC_SHA_EDGE_SCALE_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM.name, toString(CMC_SHA_EDGE_OFFSET_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM.name, toString(CMC_SHA_DENOISE_BYPASS_ACM.def)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM.name, toString(CMC_SHADN_TAU_ACM.min)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM.name, toString(CMC_SHADN_SIGMA_ACM.min)));

            //R2Y
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM.name, toString(CMC_R2Y_BRIGHTNESS_ACM.min)));
            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM.name, toString(CMC_R2Y_CONTRAST_ACM.min)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM.name, toString(CMC_R2Y_SATURATION_ACM.min)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM.name, toString(CMC_R2Y_RANGE_MUL_ACM.min)));

            //HIS
            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM.name, toString(CMC_HIS_GRID_START_COORDS_ACM.min)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.min)));

            //DPF
            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM.name, toString(CMC_DPF_WEIGHT_ACM.min)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM.name, toString(CMC_DPF_THRESHOLD_ACM.min)));

            //TNM
            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM.name, toString(CMC_TNMC_HISTMIN_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM.name, toString(CMC_TNMC_HISTMAX_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM.name, toString(CMC_TNMC_ADAPTIVE_ACM.def)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM.name, toString(CMC_TNM_IN_Y_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM.name, toString(CMC_TNM_OUT_Y_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM.name, toString(CMC_TNM_OUT_C_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM.name, toString(CMC_TNM_FLAT_FACTOR_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM.name, toString(CMC_TNM_WEIGHT_LINE_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM.name, toString(CMC_TNM_COLOUR_SATURATION_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_ACM.name, toString(CMC_TNMC_ENABLE_GAMMA_ACM.def)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM.name, toString(CMC_TNMC_WDR_CEILING_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM.name, toString(CMC_TNMC_WDR_FLOOR_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM.name, toString(CMC_TNMC_GAMMA_ACM.min)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM.min)));

            //AE
            parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_ACM.name, toString(CMC_AE_TARGET_BRIGHTNESS_ACM.min)));
            parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_ACM.name, toString(CMC_AE_TARGET_MIN_ACM.min)));

            //Sensor Max Gain
            parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_ACM.name, toString(CMC_SENSOR_MAX_GAIN_ACM.min)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LEVEL_CTRL.name, toString(CMC_SENSOR_GAIN_LEVEL_CTRL.def)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1.name, toString(CMC_SENSOR_GAIN_LV1.min)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2.name, toString(CMC_SENSOR_GAIN_LV2.min)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1_INTERPOLATION.name, toString(CMC_SENSOR_GAIN_LV1_INTERPOLATION.min)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2_INTERPOLATION.name, toString(CMC_SENSOR_GAIN_LV2_INTERPOLATION.min)));
        parameters.addParameter(Parameter(CMC_ENABLE_INTERPOLATION_GAMMA.name, toString(CMC_ENABLE_INTERPOLATION_GAMMA.def)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_0.name, toString(CMC_INTERPOLATION_GAMMA_0.min)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_1.name, toString(CMC_INTERPOLATION_GAMMA_1.min)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_2.name, toString(CMC_INTERPOLATION_GAMMA_2.min)));

        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV1.name, toString(CMC_CCM_ATTENUATION_LV1.min)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV2.name, toString(CMC_CCM_ATTENUATION_LV2.min)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV3.name, toString(CMC_CCM_ATTENUATION_LV3.min)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV1.name, toString(CMC_DN_TARGET_IDX_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV1.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV1.name, toString(CMC_BLC_SYS_BLACK_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV1.name, toString(CMC_DNS_STRENGTH_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV1.name, toString(CMC_DNS_READ_NOISE_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV1.name, toString(CMC_DNS_WELLDEPTH_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV1.name, toString(CMC_SHA_RADIUS_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV1.name, toString(CMC_SHA_STRENGTH_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV1.name, toString(CMC_SHA_THRESH_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV1.name, toString(CMC_SHA_DETAIL_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV1.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV1.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV1.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV1.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV1.name, toString(CMC_SHADN_TAU_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV1.name, toString(CMC_SHADN_SIGMA_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV1.name, toString(CMC_R2Y_CONTRAST_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV1.name, toString(CMC_R2Y_SATURATION_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV1.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV1.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV1.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV1.name, toString(CMC_DPF_WEIGHT_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV1.name, toString(CMC_DPF_THRESHOLD_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV1.name, toString(CMC_TNMC_HISTMIN_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV1.name, toString(CMC_TNMC_HISTMAX_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV1.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV1.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV1.name, toString(CMC_TNM_IN_Y_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV1.name, toString(CMC_TNM_OUT_Y_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV1.name, toString(CMC_TNM_OUT_C_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV1.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV1.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV1.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV1.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV1.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV1.name, toString(CMC_TNMC_GAMMA_ACM_LV1.min)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.min)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV2.name, toString(CMC_DN_TARGET_IDX_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV2.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV2.name, toString(CMC_BLC_SYS_BLACK_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV2.name, toString(CMC_DNS_STRENGTH_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV2.name, toString(CMC_DNS_READ_NOISE_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV2.name, toString(CMC_DNS_WELLDEPTH_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV2.name, toString(CMC_SHA_RADIUS_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV2.name, toString(CMC_SHA_STRENGTH_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV2.name, toString(CMC_SHA_THRESH_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV2.name, toString(CMC_SHA_DETAIL_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV2.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV2.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV2.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV2.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV2.name, toString(CMC_SHADN_TAU_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV2.name, toString(CMC_SHADN_SIGMA_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV2.name, toString(CMC_R2Y_CONTRAST_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV2.name, toString(CMC_R2Y_SATURATION_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV2.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV2.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV2.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV2.name, toString(CMC_DPF_WEIGHT_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV2.name, toString(CMC_DPF_THRESHOLD_ACM_LV2.min)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV2.name, toString(CMC_TNMC_HISTMIN_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV2.name, toString(CMC_TNMC_HISTMAX_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV2.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV2.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV2.name, toString(CMC_TNM_IN_Y_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV2.name, toString(CMC_TNM_OUT_Y_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV2.name, toString(CMC_TNM_OUT_C_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV2.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV2.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV2.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV2.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV2.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV2.name, toString(CMC_TNMC_GAMMA_ACM_LV2.min)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.min)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV3.name, toString(CMC_DN_TARGET_IDX_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV3.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV3.name, toString(CMC_BLC_SYS_BLACK_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV3.name, toString(CMC_DNS_STRENGTH_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV3.name, toString(CMC_DNS_READ_NOISE_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV3.name, toString(CMC_DNS_WELLDEPTH_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV3.name, toString(CMC_SHA_RADIUS_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV3.name, toString(CMC_SHA_STRENGTH_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV3.name, toString(CMC_SHA_THRESH_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV3.name, toString(CMC_SHA_DETAIL_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV3.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV3.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV3.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV3.def)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV3.name, toString(CMC_SHADN_TAU_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV3.name, toString(CMC_SHADN_SIGMA_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV3.name, toString(CMC_R2Y_CONTRAST_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV3.name, toString(CMC_R2Y_SATURATION_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV3.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV3.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV3.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV3.name, toString(CMC_DPF_WEIGHT_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV3.name, toString(CMC_DPF_THRESHOLD_ACM_LV3.min)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV3.name, toString(CMC_TNMC_HISTMIN_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV3.name, toString(CMC_TNMC_HISTMAX_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV3.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV3.def)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV3.name, toString(CMC_TNM_IN_Y_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV3.name, toString(CMC_TNM_OUT_Y_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV3.name, toString(CMC_TNM_OUT_C_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV3.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV3.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV3.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV3.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV3.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV3.name, toString(CMC_TNMC_GAMMA_ACM_LV3.min)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.min)));
        }
        #endif //INFOTM_ENABLE_GAIN_LEVEL_IDX
        break;

    case SAVE_MAX:
        parameters.addParameter(Parameter(CMC_ENABLE.name, toString(CMC_ENABLE.def)));
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_CHANGE_ENABLE.name, toString(CMC_DN_TARGET_IDX_CHANGE_ENABLE.def)));
        parameters.addParameter(Parameter(CMC_ENABLE_AVG_GAIN.name, toString(CMC_ENABLE_AVG_GAIN.def)));

        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_EXPECT.name, toString(CMC_SHA_STRENGTH_EXPECT.max)));

        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_ENABLE.name, toString(CMC_NIGHT_MODE_DETECT_ENABLE.def)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.name, toString(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.max)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.name, toString(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.max)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.name, toString(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.max)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.name, toString(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.max)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_WEIGHTING.name, toString(CMC_NIGHT_MODE_DETECT_WEIGHTING.max)));

        parameters.addParameter(Parameter(CMC_ENABLE_CAPTURE_IQ.name, toString(CMC_ENABLE_CAPTURE_IQ.def)));
        parameters.addParameter(Parameter(CMC_CAPTURE_CCM_RATIO.name, toString(CMC_CAPTURE_CCM_RATIO.max)));
        parameters.addParameter(Parameter(CMC_R2Y_CAPTURE_RANGE_MUL.name, toString(CMC_R2Y_CAPTURE_RANGE_MUL.max)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_IN_Y.name, toString(CMC_TNM_CAPTURE_IN_Y.max)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_Y.name, toString(CMC_TNM_CAPTURE_OUT_Y.max)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_C.name, toString(CMC_TNM_CAPTURE_OUT_C.max)));

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM.name, toString(CMC_DN_TARGET_IDX_FCM.max)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Flat Color Mode setting
        //BLC SENSOR BLACK
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM.name, toString(CMC_BLC_SENSOR_BLACK_FCM.max)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM.name, toString(CMC_BLC_SYS_BLACK_FCM.max)));

        //DNS
        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM.name, toString(CMC_DNS_STRENGTH_FCM.max)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM.name, toString(CMC_DNS_READ_NOISE_FCM.max)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM.name, toString(CMC_DNS_WELLDEPTH_FCM.max)));

        //SHA
        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM.name, toString(CMC_SHA_RADIUS_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM.name, toString(CMC_SHA_STRENGTH_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM.name, toString(CMC_SHA_THRESH_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM.name, toString(CMC_SHA_DETAIL_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM.name, toString(CMC_SHA_EDGE_SCALE_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM.name, toString(CMC_SHA_EDGE_OFFSET_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM.name, toString(CMC_SHA_DENOISE_BYPASS_FCM.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM.name, toString(CMC_SHADN_TAU_FCM.max)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM.name, toString(CMC_SHADN_SIGMA_FCM.max)));

        //R2Y
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM.name, toString(CMC_R2Y_BRIGHTNESS_FCM.max)));
        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM.name, toString(CMC_R2Y_CONTRAST_FCM.max)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM.name, toString(CMC_R2Y_SATURATION_FCM.max)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM.name, toString(CMC_R2Y_RANGE_MUL_FCM.max)));

        //HIS
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM.name, toString(CMC_HIS_GRID_START_COORDS_FCM.max)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.max)));

        //DPF
        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM.name, toString(CMC_DPF_WEIGHT_FCM.max)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM.name, toString(CMC_DPF_THRESHOLD_FCM.max)));

        //TNM
        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM.name, toString(CMC_TNMC_HISTMIN_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM.name, toString(CMC_TNMC_HISTMAX_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM.name, toString(CMC_TNMC_ADAPTIVE_FCM.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM.name, toString(CMC_TNM_IN_Y_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM.name, toString(CMC_TNM_OUT_Y_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM.name, toString(CMC_TNM_OUT_C_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM.name, toString(CMC_TNM_FLAT_FACTOR_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM.name, toString(CMC_TNM_WEIGHT_LINE_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM.name, toString(CMC_TNM_COLOUR_SATURATION_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_FCM.name, toString(CMC_TNMC_ENABLE_GAMMA_FCM.def)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM.name, toString(CMC_TNMC_WDR_CEILING_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM.name, toString(CMC_TNMC_WDR_FLOOR_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM.name, toString(CMC_TNMC_GAMMA_FCM.max)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM.max)));

        //AE
        parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_FCM.name, toString(CMC_AE_TARGET_BRIGHTNESS_FCM.max)));
        parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_FCM.name, toString(CMC_AE_TARGET_MIN_FCM.max)));

        //Sensor Max Gain
        parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_FCM.name, toString(CMC_SENSOR_MAX_GAIN_FCM.max)));
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV1.name, toString(CMC_DN_TARGET_IDX_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV1.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV1.name, toString(CMC_BLC_SYS_BLACK_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV1.name, toString(CMC_DNS_STRENGTH_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV1.name, toString(CMC_DNS_READ_NOISE_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV1.name, toString(CMC_DNS_WELLDEPTH_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV1.name, toString(CMC_SHA_RADIUS_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV1.name, toString(CMC_SHA_STRENGTH_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV1.name, toString(CMC_SHA_THRESH_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV1.name, toString(CMC_SHA_DETAIL_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV1.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV1.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV1.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV1.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV1.name, toString(CMC_SHADN_TAU_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV1.name, toString(CMC_SHADN_SIGMA_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV1.name, toString(CMC_R2Y_CONTRAST_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV1.name, toString(CMC_R2Y_SATURATION_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV1.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV1.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV1.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV1.name, toString(CMC_DPF_WEIGHT_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV1.name, toString(CMC_DPF_THRESHOLD_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV1.name, toString(CMC_TNMC_HISTMIN_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV1.name, toString(CMC_TNMC_HISTMAX_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV1.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV1.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV1.name, toString(CMC_TNM_IN_Y_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV1.name, toString(CMC_TNM_OUT_Y_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV1.name, toString(CMC_TNM_OUT_C_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV1.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV1.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV1.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV1.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV1.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV1.name, toString(CMC_TNMC_GAMMA_FCM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.max)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV2.name, toString(CMC_DN_TARGET_IDX_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV2.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV2.name, toString(CMC_BLC_SYS_BLACK_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV2.name, toString(CMC_DNS_STRENGTH_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV2.name, toString(CMC_DNS_READ_NOISE_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV2.name, toString(CMC_DNS_WELLDEPTH_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV2.name, toString(CMC_SHA_RADIUS_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV2.name, toString(CMC_SHA_STRENGTH_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV2.name, toString(CMC_SHA_THRESH_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV2.name, toString(CMC_SHA_DETAIL_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV2.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV2.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV2.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV2.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV2.name, toString(CMC_SHADN_TAU_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV2.name, toString(CMC_SHADN_SIGMA_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV2.name, toString(CMC_R2Y_CONTRAST_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV2.name, toString(CMC_R2Y_SATURATION_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV2.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV2.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV2.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV2.name, toString(CMC_DPF_WEIGHT_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV2.name, toString(CMC_DPF_THRESHOLD_FCM_LV2.max)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV2.name, toString(CMC_TNMC_HISTMIN_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV2.name, toString(CMC_TNMC_HISTMAX_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV2.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV2.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV2.name, toString(CMC_TNM_IN_Y_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV2.name, toString(CMC_TNM_OUT_Y_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV2.name, toString(CMC_TNM_OUT_C_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV2.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV2.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV2.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV2.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV2.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV2.name, toString(CMC_TNMC_GAMMA_FCM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.max)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV3.name, toString(CMC_DN_TARGET_IDX_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV3.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV3.name, toString(CMC_BLC_SYS_BLACK_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV3.name, toString(CMC_DNS_STRENGTH_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV3.name, toString(CMC_DNS_READ_NOISE_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV3.name, toString(CMC_DNS_WELLDEPTH_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV3.name, toString(CMC_SHA_RADIUS_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV3.name, toString(CMC_SHA_STRENGTH_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV3.name, toString(CMC_SHA_THRESH_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV3.name, toString(CMC_SHA_DETAIL_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV3.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV3.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV3.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV3.def)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV3.name, toString(CMC_SHADN_TAU_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV3.name, toString(CMC_SHADN_SIGMA_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV3.name, toString(CMC_R2Y_CONTRAST_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV3.name, toString(CMC_R2Y_SATURATION_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV3.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV3.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV3.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV3.name, toString(CMC_DPF_WEIGHT_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV3.name, toString(CMC_DPF_THRESHOLD_FCM_LV3.max)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV3.name, toString(CMC_TNMC_HISTMIN_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV3.name, toString(CMC_TNMC_HISTMAX_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV3.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV3.def)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV3.name, toString(CMC_TNM_IN_Y_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV3.name, toString(CMC_TNM_OUT_Y_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV3.name, toString(CMC_TNM_OUT_C_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV3.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV3.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV3.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV3.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV3.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV3.name, toString(CMC_TNMC_GAMMA_FCM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.max)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM.name, toString(CMC_DN_TARGET_IDX_ACM.max)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Advanced Color Mode setting
        if (bCmcEnable) {
            //BLC SENSOR BLACK
            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM.name, toString(CMC_BLC_SENSOR_BLACK_ACM.max)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM.name, toString(CMC_BLC_SYS_BLACK_ACM.max)));

            //DNS
            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM.name, toString(CMC_DNS_STRENGTH_ACM.max)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM.name, toString(CMC_DNS_READ_NOISE_ACM.max)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM.name, toString(CMC_DNS_WELLDEPTH_ACM.max)));

            //SHA
            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM.name, toString(CMC_SHA_RADIUS_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM.name, toString(CMC_SHA_STRENGTH_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM.name, toString(CMC_SHA_THRESH_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM.name, toString(CMC_SHA_DETAIL_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM.name, toString(CMC_SHA_EDGE_SCALE_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM.name, toString(CMC_SHA_EDGE_OFFSET_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM.name, toString(CMC_SHA_DENOISE_BYPASS_ACM.def)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM.name, toString(CMC_SHADN_TAU_ACM.max)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM.name, toString(CMC_SHADN_SIGMA_ACM.max)));

            //R2Y
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM.name, toString(CMC_R2Y_BRIGHTNESS_ACM.max)));
            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM.name, toString(CMC_R2Y_CONTRAST_ACM.max)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM.name, toString(CMC_R2Y_SATURATION_ACM.max)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM.name, toString(CMC_R2Y_RANGE_MUL_ACM.max)));

            //HIS
            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM.name, toString(CMC_HIS_GRID_START_COORDS_ACM.max)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.max)));

            //DPF
            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM.name, toString(CMC_DPF_WEIGHT_ACM.max)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM.name, toString(CMC_DPF_THRESHOLD_ACM.max)));

            //TNM
            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM.name, toString(CMC_TNMC_HISTMIN_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM.name, toString(CMC_TNMC_HISTMAX_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM.name, toString(CMC_TNMC_ADAPTIVE_ACM.def)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM.name, toString(CMC_TNM_IN_Y_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM.name, toString(CMC_TNM_OUT_Y_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM.name, toString(CMC_TNM_OUT_C_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM.name, toString(CMC_TNM_FLAT_FACTOR_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM.name, toString(CMC_TNM_WEIGHT_LINE_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM.name, toString(CMC_TNM_COLOUR_SATURATION_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_ACM.name, toString(CMC_TNMC_ENABLE_GAMMA_ACM.def)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM.name, toString(CMC_TNMC_WDR_CEILING_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM.name, toString(CMC_TNMC_WDR_FLOOR_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM.name, toString(CMC_TNMC_GAMMA_ACM.max)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM.max)));

            //AE
            parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_ACM.name, toString(CMC_AE_TARGET_BRIGHTNESS_ACM.max)));
            parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_ACM.name, toString(CMC_AE_TARGET_MIN_ACM.max)));

            //Sensor Max Gain
            parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_ACM.name, toString(CMC_SENSOR_MAX_GAIN_ACM.max)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LEVEL_CTRL.name, toString(CMC_SENSOR_GAIN_LEVEL_CTRL.def)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1.name, toString(CMC_SENSOR_GAIN_LV1.max)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2.name, toString(CMC_SENSOR_GAIN_LV2.max)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1_INTERPOLATION.name, toString(CMC_SENSOR_GAIN_LV1_INTERPOLATION.max)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2_INTERPOLATION.name, toString(CMC_SENSOR_GAIN_LV2_INTERPOLATION.max)));
        parameters.addParameter(Parameter(CMC_ENABLE_INTERPOLATION_GAMMA.name, toString(CMC_ENABLE_INTERPOLATION_GAMMA.def)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_0.name, toString(CMC_INTERPOLATION_GAMMA_0.max)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_1.name, toString(CMC_INTERPOLATION_GAMMA_1.max)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_2.name, toString(CMC_INTERPOLATION_GAMMA_2.max)));

        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV1.name, toString(CMC_CCM_ATTENUATION_LV1.max)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV2.name, toString(CMC_CCM_ATTENUATION_LV2.max)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV3.name, toString(CMC_CCM_ATTENUATION_LV3.max)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV1.name, toString(CMC_DN_TARGET_IDX_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV1.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV1.name, toString(CMC_BLC_SYS_BLACK_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV1.name, toString(CMC_DNS_STRENGTH_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV1.name, toString(CMC_DNS_READ_NOISE_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV1.name, toString(CMC_DNS_WELLDEPTH_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV1.name, toString(CMC_SHA_RADIUS_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV1.name, toString(CMC_SHA_STRENGTH_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV1.name, toString(CMC_SHA_THRESH_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV1.name, toString(CMC_SHA_DETAIL_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV1.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV1.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV1.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV1.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV1.name, toString(CMC_SHADN_TAU_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV1.name, toString(CMC_SHADN_SIGMA_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV1.name, toString(CMC_R2Y_CONTRAST_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV1.name, toString(CMC_R2Y_SATURATION_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV1.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV1.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV1.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV1.name, toString(CMC_DPF_WEIGHT_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV1.name, toString(CMC_DPF_THRESHOLD_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV1.name, toString(CMC_TNMC_HISTMIN_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV1.name, toString(CMC_TNMC_HISTMAX_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV1.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV1.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV1.name, toString(CMC_TNM_IN_Y_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV1.name, toString(CMC_TNM_OUT_Y_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV1.name, toString(CMC_TNM_OUT_C_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV1.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV1.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV1.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV1.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV1.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV1.name, toString(CMC_TNMC_GAMMA_ACM_LV1.max)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.max)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV2.name, toString(CMC_DN_TARGET_IDX_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV2.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV2.name, toString(CMC_BLC_SYS_BLACK_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV2.name, toString(CMC_DNS_STRENGTH_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV2.name, toString(CMC_DNS_READ_NOISE_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV2.name, toString(CMC_DNS_WELLDEPTH_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV2.name, toString(CMC_SHA_RADIUS_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV2.name, toString(CMC_SHA_STRENGTH_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV2.name, toString(CMC_SHA_THRESH_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV2.name, toString(CMC_SHA_DETAIL_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV2.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV2.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV2.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV2.def)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV2.name, toString(CMC_SHADN_TAU_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV2.name, toString(CMC_SHADN_SIGMA_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV2.name, toString(CMC_R2Y_CONTRAST_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV2.name, toString(CMC_R2Y_SATURATION_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV2.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV2.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV2.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV2.name, toString(CMC_DPF_WEIGHT_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV2.name, toString(CMC_DPF_THRESHOLD_ACM_LV2.max)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV2.name, toString(CMC_TNMC_HISTMIN_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV2.name, toString(CMC_TNMC_HISTMAX_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV2.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV2.def)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV2.name, toString(CMC_TNM_IN_Y_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV2.name, toString(CMC_TNM_OUT_Y_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV2.name, toString(CMC_TNM_OUT_C_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV2.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV2.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV2.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV2.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV2.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV2.name, toString(CMC_TNMC_GAMMA_ACM_LV2.max)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.max)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV3.name, toString(CMC_DN_TARGET_IDX_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV3.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV3.name, toString(CMC_BLC_SYS_BLACK_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV3.name, toString(CMC_DNS_STRENGTH_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV3.name, toString(CMC_DNS_READ_NOISE_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV3.name, toString(CMC_DNS_WELLDEPTH_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV3.name, toString(CMC_SHA_RADIUS_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV3.name, toString(CMC_SHA_STRENGTH_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV3.name, toString(CMC_SHA_THRESH_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV3.name, toString(CMC_SHA_DETAIL_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV3.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV3.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV3.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV3.def)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV3.name, toString(CMC_SHADN_TAU_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV3.name, toString(CMC_SHADN_SIGMA_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV3.name, toString(CMC_R2Y_CONTRAST_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV3.name, toString(CMC_R2Y_SATURATION_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV3.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV3.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV3.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV3.name, toString(CMC_DPF_WEIGHT_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV3.name, toString(CMC_DPF_THRESHOLD_ACM_LV3.max)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV3.name, toString(CMC_TNMC_HISTMIN_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV3.name, toString(CMC_TNMC_HISTMAX_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV3.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV3.def)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV3.name, toString(CMC_TNM_IN_Y_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV3.name, toString(CMC_TNM_OUT_Y_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV3.name, toString(CMC_TNM_OUT_C_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV3.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV3.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV3.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV3.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV3.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV3.name, toString(CMC_TNMC_GAMMA_ACM_LV3.max)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.max)));
        }
        #endif //INFOTM_ENABLE_GAIN_LEVEL_IDX
        break;

    case SAVE_DEF:
        parameters.addParameter(Parameter(CMC_ENABLE.name, toString(CMC_ENABLE.def) + " // " + getParameterInfo(CMC_ENABLE)));
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_CHANGE_ENABLE.name, toString(CMC_DN_TARGET_IDX_CHANGE_ENABLE.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_CHANGE_ENABLE)));
        parameters.addParameter(Parameter(CMC_ENABLE_AVG_GAIN.name, toString(CMC_ENABLE_AVG_GAIN.def) + " // " + getParameterInfo(CMC_ENABLE_AVG_GAIN)));

        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_EXPECT.name, toString(CMC_SHA_STRENGTH_EXPECT.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_EXPECT)));

        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_ENABLE.name, toString(CMC_NIGHT_MODE_DETECT_ENABLE.def) + " // " + getParameterInfo(CMC_NIGHT_MODE_DETECT_ENABLE)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.name, toString(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER.def) + " // " + getParameterInfo(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_ENTER)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.name, toString(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT.def) + " // " + getParameterInfo(CMC_NIGHT_MODE_DETECT_BRIGHTNESS_EXIT)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.name, toString(CMC_NIGHT_MODE_DETECT_GAIN_ENTER.def) + " // " + getParameterInfo(CMC_NIGHT_MODE_DETECT_GAIN_ENTER)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.name, toString(CMC_NIGHT_MODE_DETECT_GAIN_EXIT.def) + " // " + getParameterInfo(CMC_NIGHT_MODE_DETECT_GAIN_EXIT)));
        parameters.addParameter(Parameter(CMC_NIGHT_MODE_DETECT_WEIGHTING.name, toString(CMC_NIGHT_MODE_DETECT_WEIGHTING.def) + " // " + getParameterInfo(CMC_NIGHT_MODE_DETECT_WEIGHTING)));

        parameters.addParameter(Parameter(CMC_ENABLE_CAPTURE_IQ.name, toString(CMC_ENABLE_CAPTURE_IQ.def) + " // " + getParameterInfo(CMC_ENABLE_CAPTURE_IQ)));
        parameters.addParameter(Parameter(CMC_CAPTURE_CCM_RATIO.name, toString(CMC_CAPTURE_CCM_RATIO.def) + " // " + getParameterInfo(CMC_CAPTURE_CCM_RATIO)));
        parameters.addParameter(Parameter(CMC_R2Y_CAPTURE_RANGE_MUL.name, toString(CMC_R2Y_CAPTURE_RANGE_MUL.def) + " // " + getParameterInfo(CMC_R2Y_CAPTURE_RANGE_MUL)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_IN_Y.name, toString(CMC_TNM_CAPTURE_IN_Y.def) + " // " + getParameterInfo(CMC_TNM_CAPTURE_IN_Y)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_Y.name, toString(CMC_TNM_CAPTURE_OUT_Y.def) + " // " + getParameterInfo(CMC_TNM_CAPTURE_OUT_Y)));
        parameters.addParameter(Parameter(CMC_TNM_CAPTURE_OUT_C.name, toString(CMC_TNM_CAPTURE_OUT_C.def) + " // " + getParameterInfo(CMC_TNM_CAPTURE_OUT_C)));

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM.name, toString(CMC_DN_TARGET_IDX_FCM.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_FCM)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Flat Color Mode setting
        //BLC SENSOR BLACK
        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM.name, toString(CMC_BLC_SENSOR_BLACK_FCM.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_FCM)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM.name, toString(CMC_BLC_SYS_BLACK_FCM.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_FCM)));

        //DNS
        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM.name, toString(CMC_DNS_STRENGTH_FCM.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_FCM)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM.name, toString(CMC_DNS_READ_NOISE_FCM.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_FCM)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM.name, toString(CMC_DNS_WELLDEPTH_FCM.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_FCM)));

        //SHA
        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM.name, toString(CMC_SHA_RADIUS_FCM.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_FCM)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM.name, toString(CMC_SHA_STRENGTH_FCM.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_FCM)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM.name, toString(CMC_SHA_THRESH_FCM.def) + " // " + getParameterInfo(CMC_SHA_THRESH_FCM)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM.name, toString(CMC_SHA_DETAIL_FCM.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_FCM)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM.name, toString(CMC_SHA_EDGE_SCALE_FCM.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_FCM)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM.name, toString(CMC_SHA_EDGE_OFFSET_FCM.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_FCM)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM.name, toString(CMC_SHA_DENOISE_BYPASS_FCM.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_FCM)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM.name, toString(CMC_SHADN_TAU_FCM.def) + " // " + getParameterInfo(CMC_SHADN_TAU_FCM)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM.name, toString(CMC_SHADN_SIGMA_FCM.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_FCM)));

        //R2Y
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM.name, toString(CMC_R2Y_BRIGHTNESS_FCM.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_FCM)));
        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM.name, toString(CMC_R2Y_CONTRAST_FCM.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_FCM)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM.name, toString(CMC_R2Y_SATURATION_FCM.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_FCM)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM.name, toString(CMC_R2Y_RANGE_MUL_FCM.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_FCM)));

        //HIS
        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM.name, toString(CMC_HIS_GRID_START_COORDS_FCM.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_FCM)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_FCM)));

        //DPF
        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM.name, toString(CMC_DPF_WEIGHT_FCM.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_FCM)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM.name, toString(CMC_DPF_THRESHOLD_FCM.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_FCM)));

        //TNM
        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM.name, toString(CMC_TNMC_HISTMIN_FCM.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM.name, toString(CMC_TNMC_HISTMAX_FCM.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM.name, toString(CMC_TNMC_ADAPTIVE_FCM.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_FCM)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM.name, toString(CMC_TNM_IN_Y_FCM.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_FCM)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM.name, toString(CMC_TNM_OUT_Y_FCM.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_FCM)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM.name, toString(CMC_TNM_OUT_C_FCM.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_FCM)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM.name, toString(CMC_TNM_FLAT_FACTOR_FCM.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_FCM)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM.name, toString(CMC_TNM_WEIGHT_LINE_FCM.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_FCM)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_FCM)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM.name, toString(CMC_TNM_COLOUR_SATURATION_FCM.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_FCM.name, toString(CMC_TNMC_ENABLE_GAMMA_FCM.def) + " // " + getParameterInfo(CMC_TNMC_ENABLE_GAMMA_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM.name, toString(CMC_TNMC_WDR_CEILING_FCM.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM.name, toString(CMC_TNMC_WDR_FLOOR_FCM.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM.name, toString(CMC_TNMC_GAMMA_FCM.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_FCM)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_FCM)));

        //AE
        parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_FCM.name, toString(CMC_AE_TARGET_BRIGHTNESS_FCM.def) + " // " + getParameterInfo(CMC_AE_TARGET_BRIGHTNESS_FCM)));
        parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_FCM.name, toString(CMC_AE_TARGET_MIN_FCM.def) + " // " + getParameterInfo(CMC_AE_TARGET_MIN_FCM)));

        //Sensor Max Gain
        parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_FCM.name, toString(CMC_SENSOR_MAX_GAIN_FCM.def) + " // " + getParameterInfo(CMC_SENSOR_MAX_GAIN_FCM)));
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE) && defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV1.name, toString(CMC_DN_TARGET_IDX_FCM_LV1.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV1.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV1.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV1.name, toString(CMC_BLC_SYS_BLACK_FCM_LV1.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV1.name, toString(CMC_DNS_STRENGTH_FCM_LV1.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV1.name, toString(CMC_DNS_READ_NOISE_FCM_LV1.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV1.name, toString(CMC_DNS_WELLDEPTH_FCM_LV1.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV1.name, toString(CMC_SHA_RADIUS_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV1.name, toString(CMC_SHA_STRENGTH_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV1.name, toString(CMC_SHA_THRESH_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_THRESH_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV1.name, toString(CMC_SHA_DETAIL_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV1.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV1.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV1.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV1.name, toString(CMC_SHADN_TAU_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHADN_TAU_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV1.name, toString(CMC_SHADN_SIGMA_FCM_LV1.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV1.name, toString(CMC_R2Y_CONTRAST_FCM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV1.name, toString(CMC_R2Y_SATURATION_FCM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV1.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV1.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV1.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV1.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV1.name, toString(CMC_DPF_WEIGHT_FCM_LV1.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV1.name, toString(CMC_DPF_THRESHOLD_FCM_LV1.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV1.name, toString(CMC_TNMC_HISTMIN_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV1.name, toString(CMC_TNMC_HISTMAX_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV1.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV1.name, toString(CMC_TNM_IN_Y_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV1.name, toString(CMC_TNM_OUT_Y_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV1.name, toString(CMC_TNM_OUT_C_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV1.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV1.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV1.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV1.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV1.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV1.name, toString(CMC_TNMC_GAMMA_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_FCM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV1)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV2.name, toString(CMC_DN_TARGET_IDX_FCM_LV2.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV2.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV2.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV2.name, toString(CMC_BLC_SYS_BLACK_FCM_LV2.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV2.name, toString(CMC_DNS_STRENGTH_FCM_LV2.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV2.name, toString(CMC_DNS_READ_NOISE_FCM_LV2.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV2.name, toString(CMC_DNS_WELLDEPTH_FCM_LV2.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV2.name, toString(CMC_SHA_RADIUS_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV2.name, toString(CMC_SHA_STRENGTH_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV2.name, toString(CMC_SHA_THRESH_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_THRESH_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV2.name, toString(CMC_SHA_DETAIL_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV2.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV2.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV2.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV2.name, toString(CMC_SHADN_TAU_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHADN_TAU_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV2.name, toString(CMC_SHADN_SIGMA_FCM_LV2.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV2.name, toString(CMC_R2Y_CONTRAST_FCM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV2.name, toString(CMC_R2Y_SATURATION_FCM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV2.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV2.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV2.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV2.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV2.name, toString(CMC_DPF_WEIGHT_FCM_LV2.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV2.name, toString(CMC_DPF_THRESHOLD_FCM_LV2.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV2.name, toString(CMC_TNMC_HISTMIN_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV2.name, toString(CMC_TNMC_HISTMAX_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV2.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_FCM_LV2)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV2.name, toString(CMC_TNM_IN_Y_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV2.name, toString(CMC_TNM_OUT_Y_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV2.name, toString(CMC_TNM_OUT_C_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV2.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV2.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV2.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV2.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV2.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV2.name, toString(CMC_TNMC_GAMMA_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_FCM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV2)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_FCM_LV3.name, toString(CMC_DN_TARGET_IDX_FCM_LV3.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_FCM_LV3.name, toString(CMC_BLC_SENSOR_BLACK_FCM_LV3.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_FCM_LV3.name, toString(CMC_BLC_SYS_BLACK_FCM_LV2.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_FCM_LV3.name, toString(CMC_DNS_STRENGTH_FCM_LV3.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_FCM_LV3.name, toString(CMC_DNS_READ_NOISE_FCM_LV3.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_FCM_LV3.name, toString(CMC_DNS_WELLDEPTH_FCM_LV3.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_FCM_LV3.name, toString(CMC_SHA_RADIUS_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_FCM_LV3.name, toString(CMC_SHA_STRENGTH_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_FCM_LV3.name, toString(CMC_SHA_THRESH_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_THRESH_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_FCM_LV3.name, toString(CMC_SHA_DETAIL_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_FCM_LV3.name, toString(CMC_SHA_EDGE_SCALE_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_FCM_LV3.name, toString(CMC_SHA_EDGE_OFFSET_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_FCM_LV3.name, toString(CMC_SHA_DENOISE_BYPASS_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_FCM_LV3.name, toString(CMC_SHADN_TAU_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHADN_TAU_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_FCM_LV3.name, toString(CMC_SHADN_SIGMA_FCM_LV3.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_FCM_LV3.name, toString(CMC_R2Y_CONTRAST_FCM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_FCM_LV3.name, toString(CMC_R2Y_SATURATION_FCM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_FCM_LV3.name, toString(CMC_R2Y_BRIGHTNESS_FCM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_FCM_LV3.name, toString(CMC_R2Y_RANGE_MUL_FCM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_FCM_LV3.name, toString(CMC_HIS_GRID_START_COORDS_FCM_LV3.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_FCM_LV3.name, toString(CMC_DPF_WEIGHT_FCM_LV3.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_FCM_LV3.name, toString(CMC_DPF_THRESHOLD_FCM_LV3.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_FCM_LV3.name, toString(CMC_TNMC_HISTMIN_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_FCM_LV3.name, toString(CMC_TNMC_HISTMAX_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_FCM_LV3.name, toString(CMC_TNMC_ADAPTIVE_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_FCM_LV3)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_FCM_LV3.name, toString(CMC_TNM_IN_Y_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_FCM_LV3.name, toString(CMC_TNM_OUT_Y_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_FCM_LV3.name, toString(CMC_TNM_OUT_C_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_FCM_LV3.name, toString(CMC_TNM_FLAT_FACTOR_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_FCM_LV3.name, toString(CMC_TNM_WEIGHT_LINE_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.name, toString(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_FCM_LV3.name, toString(CMC_TNM_COLOUR_SATURATION_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_FCM_LV3.name, toString(CMC_TNMC_WDR_CEILING_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_FCM_LV3.name, toString(CMC_TNMC_WDR_FLOOR_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.name, toString(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_FCM_LV3.name, toString(CMC_TNMC_GAMMA_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_FCM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_FCM_LV3)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX

        //3D-Denoise target index.
        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM.name, toString(CMC_DN_TARGET_IDX_ACM.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_ACM)));

        #if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
        ///////////////////////////////////////Advanced Color Mode setting
        if (bCmcEnable) {
            //BLC SENSOR BLACK
            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM.name, toString(CMC_BLC_SENSOR_BLACK_ACM.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_ACM)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM.name, toString(CMC_BLC_SYS_BLACK_ACM.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_ACM)));

            //DNS
            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM.name, toString(CMC_DNS_STRENGTH_ACM.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_ACM)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM.name, toString(CMC_DNS_READ_NOISE_ACM.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_ACM)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM.name, toString(CMC_DNS_WELLDEPTH_ACM.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_ACM)));

            //SHA
            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM.name, toString(CMC_SHA_RADIUS_ACM.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_ACM)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM.name, toString(CMC_SHA_STRENGTH_ACM.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_ACM)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM.name, toString(CMC_SHA_THRESH_ACM.def) + " // " + getParameterInfo(CMC_SHA_THRESH_ACM)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM.name, toString(CMC_SHA_DETAIL_ACM.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_ACM)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM.name, toString(CMC_SHA_EDGE_SCALE_ACM.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_ACM)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM.name, toString(CMC_SHA_EDGE_OFFSET_ACM.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_ACM)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM.name, toString(CMC_SHA_DENOISE_BYPASS_ACM.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_ACM)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM.name, toString(CMC_SHADN_TAU_ACM.def) + " // " + getParameterInfo(CMC_SHADN_TAU_ACM)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM.name, toString(CMC_SHADN_SIGMA_ACM.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_ACM)));

            //R2Y
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM.name, toString(CMC_R2Y_BRIGHTNESS_ACM.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_ACM)));
            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM.name, toString(CMC_R2Y_CONTRAST_ACM.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_ACM)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM.name, toString(CMC_R2Y_SATURATION_ACM.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_ACM)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM.name, toString(CMC_R2Y_RANGE_MUL_ACM.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_ACM)));

            //HIS
            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM.name, toString(CMC_HIS_GRID_START_COORDS_ACM.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_ACM)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_ACM)));

            //DPF
            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM.name, toString(CMC_DPF_WEIGHT_ACM.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_ACM)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM.name, toString(CMC_DPF_THRESHOLD_ACM.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_ACM)));

            //TNM
            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM.name, toString(CMC_TNMC_HISTMIN_ACM.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM.name, toString(CMC_TNMC_HISTMAX_ACM.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM.name, toString(CMC_TNMC_ADAPTIVE_ACM.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_ACM)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM.name, toString(CMC_TNM_IN_Y_ACM.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_ACM)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM.name, toString(CMC_TNM_OUT_Y_ACM.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_ACM)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM.name, toString(CMC_TNM_OUT_C_ACM.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_ACM)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM.name, toString(CMC_TNM_FLAT_FACTOR_ACM.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_ACM)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM.name, toString(CMC_TNM_WEIGHT_LINE_ACM.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_ACM)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_ACM)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM.name, toString(CMC_TNM_COLOUR_SATURATION_ACM.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_ENABLE_GAMMA_ACM.name, toString(CMC_TNMC_ENABLE_GAMMA_ACM.def) + " // " + getParameterInfo(CMC_TNMC_ENABLE_GAMMA_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM.name, toString(CMC_TNMC_WDR_CEILING_ACM.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM.name, toString(CMC_TNMC_WDR_FLOOR_ACM.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM.name, toString(CMC_TNMC_GAMMA_ACM.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_ACM)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_ACM)));

            //AE
            parameters.addParameter(Parameter(CMC_AE_TARGET_BRIGHTNESS_ACM.name, toString(CMC_AE_TARGET_BRIGHTNESS_ACM.def) + " // " + getParameterInfo(CMC_AE_TARGET_BRIGHTNESS_ACM)));
            parameters.addParameter(Parameter(CMC_AE_TARGET_MIN_ACM.name, toString(CMC_AE_TARGET_MIN_ACM.def) + " // " + getParameterInfo(CMC_AE_TARGET_MIN_ACM)));

            //Sensor Max Gain
            parameters.addParameter(Parameter(CMC_SENSOR_MAX_GAIN_ACM.name, toString(CMC_SENSOR_MAX_GAIN_ACM.def) + " // " + getParameterInfo(CMC_SENSOR_MAX_GAIN_ACM)));
        }
        #endif //INFOTM_ENABLE_COLOR_MODE_CHANGE

        #if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LEVEL_CTRL.name, toString(CMC_SENSOR_GAIN_LEVEL_CTRL.def) + " // " + getParameterInfo(CMC_SENSOR_GAIN_LEVEL_CTRL)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1.name, toString(CMC_SENSOR_GAIN_LV1.def) + " // " + getParameterInfo(CMC_SENSOR_GAIN_LV1)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2.name, toString(CMC_SENSOR_GAIN_LV2.def) + " // " + getParameterInfo(CMC_SENSOR_GAIN_LV2)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV1_INTERPOLATION.name, toString(CMC_SENSOR_GAIN_LV1_INTERPOLATION.def) + " // " + getParameterInfo(CMC_SENSOR_GAIN_LV1_INTERPOLATION)));
        parameters.addParameter(Parameter(CMC_SENSOR_GAIN_LV2_INTERPOLATION.name, toString(CMC_SENSOR_GAIN_LV2_INTERPOLATION.def) + " // " + getParameterInfo(CMC_SENSOR_GAIN_LV2_INTERPOLATION)));
        parameters.addParameter(Parameter(CMC_ENABLE_INTERPOLATION_GAMMA.name, toString(CMC_ENABLE_INTERPOLATION_GAMMA.def) + " // " + getParameterInfo(CMC_ENABLE_INTERPOLATION_GAMMA)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_0.name, toString(CMC_INTERPOLATION_GAMMA_0.def) + " // " + getParameterInfo(CMC_INTERPOLATION_GAMMA_0)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_1.name, toString(CMC_INTERPOLATION_GAMMA_1.def) + " // " + getParameterInfo(CMC_INTERPOLATION_GAMMA_1)));
        parameters.addParameter(Parameter(CMC_INTERPOLATION_GAMMA_2.name, toString(CMC_INTERPOLATION_GAMMA_2.def) + " // " + getParameterInfo(CMC_INTERPOLATION_GAMMA_2)));

        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV1.name, toString(CMC_CCM_ATTENUATION_LV1.def) + " // " + getParameterInfo(CMC_CCM_ATTENUATION_LV1)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV2.name, toString(CMC_CCM_ATTENUATION_LV2.def) + " // " + getParameterInfo(CMC_CCM_ATTENUATION_LV2)));
        parameters.addParameter(Parameter(CMC_CCM_ATTENUATION_LV3.name, toString(CMC_CCM_ATTENUATION_LV3.def) + " // " + getParameterInfo(CMC_CCM_ATTENUATION_LV3)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV1.name, toString(CMC_DN_TARGET_IDX_ACM_LV1.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV1.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV1.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV1.name, toString(CMC_BLC_SYS_BLACK_ACM_LV1.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV1.name, toString(CMC_DNS_STRENGTH_ACM_LV1.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV1.name, toString(CMC_DNS_READ_NOISE_ACM_LV1.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV1.name, toString(CMC_DNS_WELLDEPTH_ACM_LV1.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV1.name, toString(CMC_SHA_RADIUS_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV1.name, toString(CMC_SHA_STRENGTH_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV1.name, toString(CMC_SHA_THRESH_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_THRESH_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV1.name, toString(CMC_SHA_DETAIL_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV1.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV1.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV1.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV1.name, toString(CMC_SHADN_TAU_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHADN_TAU_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV1.name, toString(CMC_SHADN_SIGMA_ACM_LV1.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV1.name, toString(CMC_R2Y_CONTRAST_ACM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV1.name, toString(CMC_R2Y_SATURATION_ACM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV1.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV1.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV1.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV1.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV1.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV1.name, toString(CMC_DPF_WEIGHT_ACM_LV1.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV1.name, toString(CMC_DPF_THRESHOLD_ACM_LV1.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV1.name, toString(CMC_TNMC_HISTMIN_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV1.name, toString(CMC_TNMC_HISTMAX_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV1.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV1.name, toString(CMC_TNM_IN_Y_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV1.name, toString(CMC_TNM_OUT_Y_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV1.name, toString(CMC_TNM_OUT_C_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV1.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV1.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV1.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV1.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV1.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV1.name, toString(CMC_TNMC_GAMMA_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_ACM_LV1)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV1)));

        parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV2.name, toString(CMC_DN_TARGET_IDX_ACM_LV2.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV2.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV2.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV2.name, toString(CMC_BLC_SYS_BLACK_ACM_LV2.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV2.name, toString(CMC_DNS_STRENGTH_ACM_LV2.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV2.name, toString(CMC_DNS_READ_NOISE_ACM_LV2.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV2.name, toString(CMC_DNS_WELLDEPTH_ACM_LV2.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV2.name, toString(CMC_SHA_RADIUS_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV2.name, toString(CMC_SHA_STRENGTH_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV2.name, toString(CMC_SHA_THRESH_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_THRESH_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV2.name, toString(CMC_SHA_DETAIL_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV2.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV2.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV2.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV2.name, toString(CMC_SHADN_TAU_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHADN_TAU_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV2.name, toString(CMC_SHADN_SIGMA_ACM_LV2.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV2.name, toString(CMC_R2Y_CONTRAST_ACM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV2.name, toString(CMC_R2Y_SATURATION_ACM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV2.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV2.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV2.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV2.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV2.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV2.name, toString(CMC_DPF_WEIGHT_ACM_LV2.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV2.name, toString(CMC_DPF_THRESHOLD_ACM_LV2.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV2.name, toString(CMC_TNMC_HISTMIN_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV2.name, toString(CMC_TNMC_HISTMAX_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV2.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_ACM_LV2)));

        parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV2.name, toString(CMC_TNM_IN_Y_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV2.name, toString(CMC_TNM_OUT_Y_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV2.name, toString(CMC_TNM_OUT_C_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV2.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV2.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV2.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV2.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV2.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV2.name, toString(CMC_TNMC_GAMMA_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_ACM_LV2)));
        parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV2)));

        if (bEnableInterpolationGamma) {
            parameters.addParameter(Parameter(CMC_DN_TARGET_IDX_ACM_LV3.name, toString(CMC_DN_TARGET_IDX_ACM_LV3.def) + " // " + getParameterInfo(CMC_DN_TARGET_IDX_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_BLC_SENSOR_BLACK_ACM_LV3.name, toString(CMC_BLC_SENSOR_BLACK_ACM_LV3.def) + " // " + getParameterInfo(CMC_BLC_SENSOR_BLACK_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_BLC_SYS_BLACK_ACM_LV3.name, toString(CMC_BLC_SYS_BLACK_ACM_LV3.def) + " // " + getParameterInfo(CMC_BLC_SYS_BLACK_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_DNS_STRENGTH_ACM_LV3.name, toString(CMC_DNS_STRENGTH_ACM_LV3.def) + " // " + getParameterInfo(CMC_DNS_STRENGTH_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_DNS_READ_NOISE_ACM_LV3.name, toString(CMC_DNS_READ_NOISE_ACM_LV3.def) + " // " + getParameterInfo(CMC_DNS_READ_NOISE_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_DNS_WELLDEPTH_ACM_LV3.name, toString(CMC_DNS_WELLDEPTH_ACM_LV3.def) + " // " + getParameterInfo(CMC_DNS_WELLDEPTH_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_SHA_RADIUS_ACM_LV3.name, toString(CMC_SHA_RADIUS_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_RADIUS_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_STRENGTH_ACM_LV3.name, toString(CMC_SHA_STRENGTH_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_STRENGTH_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_THRESH_ACM_LV3.name, toString(CMC_SHA_THRESH_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_THRESH_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_DETAIL_ACM_LV3.name, toString(CMC_SHA_DETAIL_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_DETAIL_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_SCALE_ACM_LV3.name, toString(CMC_SHA_EDGE_SCALE_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_EDGE_SCALE_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_EDGE_OFFSET_ACM_LV3.name, toString(CMC_SHA_EDGE_OFFSET_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_EDGE_OFFSET_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHA_DENOISE_BYPASS_ACM_LV3.name, toString(CMC_SHA_DENOISE_BYPASS_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHA_DENOISE_BYPASS_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHADN_TAU_ACM_LV3.name, toString(CMC_SHADN_TAU_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHADN_TAU_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_SHADN_SIGMA_ACM_LV3.name, toString(CMC_SHADN_SIGMA_ACM_LV3.def) + " // " + getParameterInfo(CMC_SHADN_SIGMA_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_R2Y_CONTRAST_ACM_LV3.name, toString(CMC_R2Y_CONTRAST_ACM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_CONTRAST_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_R2Y_SATURATION_ACM_LV3.name, toString(CMC_R2Y_SATURATION_ACM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_SATURATION_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_R2Y_BRIGHTNESS_ACM_LV3.name, toString(CMC_R2Y_BRIGHTNESS_ACM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_BRIGHTNESS_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_R2Y_RANGE_MUL_ACM_LV3.name, toString(CMC_R2Y_RANGE_MUL_ACM_LV3.def) + " // " + getParameterInfo(CMC_R2Y_RANGE_MUL_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_HIS_GRID_START_COORDS_ACM_LV3.name, toString(CMC_HIS_GRID_START_COORDS_ACM_LV3.def) + " // " + getParameterInfo(CMC_HIS_GRID_START_COORDS_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.name, toString(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3.def) + " // " + getParameterInfo(CMC_HIS_GRID_TILE_DIMENSIONS_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_DPF_WEIGHT_ACM_LV3.name, toString(CMC_DPF_WEIGHT_ACM_LV3.def) + " // " + getParameterInfo(CMC_DPF_WEIGHT_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_DPF_THRESHOLD_ACM_LV3.name, toString(CMC_DPF_THRESHOLD_ACM_LV3.def) + " // " + getParameterInfo(CMC_DPF_THRESHOLD_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_TNMC_HISTMIN_ACM_LV3.name, toString(CMC_TNMC_HISTMIN_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_HISTMIN_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_HISTMAX_ACM_LV3.name, toString(CMC_TNMC_HISTMAX_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_HISTMAX_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_ADAPTIVE_ACM_LV3.name, toString(CMC_TNMC_ADAPTIVE_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_ADAPTIVE_ACM_LV3)));

            parameters.addParameter(Parameter(CMC_TNM_IN_Y_ACM_LV3.name, toString(CMC_TNM_IN_Y_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_IN_Y_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_Y_ACM_LV3.name, toString(CMC_TNM_OUT_Y_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_OUT_Y_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_OUT_C_ACM_LV3.name, toString(CMC_TNM_OUT_C_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_OUT_C_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_FLAT_FACTOR_ACM_LV3.name, toString(CMC_TNM_FLAT_FACTOR_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_FLAT_FACTOR_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_WEIGHT_LINE_ACM_LV3.name, toString(CMC_TNM_WEIGHT_LINE_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_WEIGHT_LINE_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.name, toString(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_CONFIDENCE_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNM_COLOUR_SATURATION_ACM_LV3.name, toString(CMC_TNM_COLOUR_SATURATION_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNM_COLOUR_SATURATION_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.name, toString(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_BRIGHTSUPRESSRATIO_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.name, toString(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_EQUAL_DARKSUPRESSRATIO_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.name, toString(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_OVERSHOT_THRESHOLD_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_CEILING_ACM_LV3.name, toString(CMC_TNMC_WDR_CEILING_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_WDR_CEILING_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_WDR_FLOOR_ACM_LV3.name, toString(CMC_TNMC_WDR_FLOOR_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_WDR_FLOOR_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.name, toString(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_CRV_MODE_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_GAMMA_ACM_LV3.name, toString(CMC_TNMC_GAMMA_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_GAMMA_ACM_LV3)));
            parameters.addParameter(Parameter(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.name, toString(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3.def) + " // " + getParameterInfo(CMC_TNMC_BEZIER_CTRL_PNT_ACM_LV3)));
        }
        #endif //INFOTM_ENABLE_GAIN_LEVEL_IDX
        break;
    }

    return IMG_SUCCESS;
}

#ifdef INFOTM_ISP
IMG_RESULT ISPC::ControlCMC::update(const Metadata &metadata, const Metadata &metadata2)
#else
IMG_RESULT ISPC::ControlCMC::update(const Metadata &metadata)
#endif //INFOTM_DUAL_SENSOR
{
    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::configureStatistics()
{
    // no stats to configure
    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::programCorrection()
{
    return IMG_SUCCESS;
}

#define CLAMP(x, l, h) (((x) > (h)) ? (h) : (((x) < (l)) ? (l) : (x)))

IMG_RESULT ISPC::ControlCMC::GetR2YSaturationExpect(double &fSaturation)
{

    fSaturation = fR2YSaturationExpect;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::SetR2YSaturationExpect(double fSaturation)
{

    fR2YSaturationExpect = fSaturation;

    return IMG_SUCCESS;
}

double ISPC::ControlCMC::CalcR2YSaturation(double fCmcSaturation)
{
    double dbSaturation;

    dbSaturation = fCmcSaturation * fR2YSaturationExpect;
    dbSaturation = CLAMP(dbSaturation, R2Y_SATURATION_MIN, R2Y_SATURATION_MAX);

    return dbSaturation;
}

IMG_RESULT ISPC::ControlCMC::GetShaStrengthExpect(double &fStrength)
{

    fStrength = fShaStrengthExpect;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::SetShaStrengthExpect(double fStrength)
{

    fShaStrengthExpect = fStrength;
    bShaStrengthChange = true;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::CalcShaStrength(void)
{
    ModuleSHA *pSHA = NULL;

    if (getPipelineOwner()) {
        pSHA = getPipelineOwner()->getModule<ModuleSHA>();
    } else {
        MOD_LOG_ERROR("ControlAWB has no pipeline owner! "\
            "Cannot configure statistics.\n");
        return IMG_ERROR_NOT_INITIALISED;
    }

    if (NULL == pSHA) {
        printf("Sharpness module does not exist!\n");
        return IMG_ERROR_COULD_NOT_OBTAIN_RESOURCE;
    }

#if defined(INFOTM_ENABLE_COLOR_MODE_CHANGE)
    fStrength_acm = fShaStrengthExpect + fShaStrengthOffset_acm;
    fStrength_acm = CLAMP(fStrength_acm, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    fStrength_fcm = fShaStrengthExpect + fShaStrengthOffset_fcm;
    fStrength_fcm = CLAMP(fStrength_fcm, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
  #if defined(INFOTM_ENABLE_GAIN_LEVEL_IDX)
    fStrength_acm_lv1 = fShaStrengthExpect + fShaStrengthOffset_acm_lv1;
    fStrength_acm_lv1 = CLAMP(fStrength_acm_lv1, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    fStrength_acm_lv2 = fShaStrengthExpect + fShaStrengthOffset_acm_lv2;
    fStrength_acm_lv2 = CLAMP(fStrength_acm_lv2, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    if (bEnableInterpolationGamma) {
        fStrength_acm_lv3 = fShaStrengthExpect + fShaStrengthOffset_acm_lv3;
        fStrength_acm_lv3 = CLAMP(fStrength_acm_lv3, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    }
    fStrength_fcm_lv1 = fShaStrengthExpect + fShaStrengthOffset_fcm_lv1;
    fStrength_fcm_lv1 = CLAMP(fStrength_fcm_lv1, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    fStrength_fcm_lv2 = fShaStrengthExpect + fShaStrengthOffset_fcm_lv2;
    fStrength_fcm_lv2 = CLAMP(fStrength_fcm_lv2, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    if (bEnableInterpolationGamma) {
        fStrength_fcm_lv3 = fShaStrengthExpect + fShaStrengthOffset_fcm_lv3;
        fStrength_fcm_lv3 = CLAMP(fStrength_fcm_lv3, pSHA->SHA_STRENGTH.min, pSHA->SHA_STRENGTH.max);
    }
  #endif
#else
    pSHA->fStrength = fShaStrengthExpect;
    pSHA->setup();
#endif
    bShaStrengthChange = false;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::CmcNightModeDetectEnableGet(bool &bEnable)
{

    bEnable = bCmcNightModeDetectEnable;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::CmcNightModeDetectEnableSet(bool bEnable)
{

    bCmcNightModeDetectEnable = bEnable;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::CmcNightModeDetectEnableGet(CMC_NIGHT_MODE_DETECT_PARAM &Param)
{

    Param.fCmcNightModeDetectBrightnessEnter = fCmcNightModeDetectBrightnessEnter;
    Param.fCmcNightModeDetectBrightnessExit = fCmcNightModeDetectBrightnessExit;
    Param.fCmcNightModeDetectGainEnter = fCmcNightModeDetectGainEnter;
    Param.fCmcNightModeDetectGainExit = fCmcNightModeDetectGainExit;
    Param.fCmcNightModeDetectWeighting = fCmcNightModeDetectWeighting;

    return IMG_SUCCESS;
}

IMG_RESULT ISPC::ControlCMC::CmcNightModeDetectEnableSet(CMC_NIGHT_MODE_DETECT_PARAM Param)
{

    fCmcNightModeDetectBrightnessEnter = Param.fCmcNightModeDetectBrightnessEnter;
    fCmcNightModeDetectBrightnessExit = Param.fCmcNightModeDetectBrightnessExit;
    fCmcNightModeDetectGainEnter = Param.fCmcNightModeDetectGainEnter;
    fCmcNightModeDetectGainExit = Param.fCmcNightModeDetectGainExit;
    fCmcNightModeDetectWeighting = Param.fCmcNightModeDetectWeighting;

    return IMG_SUCCESS;
}

#endif //INFOTM_ENABLE_COLOR_MODE_CHANGE, INFOTM_ENABLE_GAIN_LEVEL_IDX
