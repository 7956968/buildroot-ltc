/**
******************************************************************************
@file   /home/jenkins/builds/workspace/ISP_PKG/build/CI/felix/regdefs2.7/regdefs//registers/fields_ext_data_generator.h

@brief  FIELDS_EXT_DATA_GENERATOR_H registers and fields property array (name, offset, etc)

@author <Autogenerated>
		<b>Copyright 2005 by Imagination Technologies Limited.</b>
		All rights reserved.  No part of this software, either
		material or conceptual may be copied or distributed,
		transmitted, transcribed, stored in a retrieval system
		or translated into any human or computer language in any
		form by any means, electronic, mechanical, manual or
		other-wise, or disclosed to third parties without the
		express written permission of Imagination Technologies
		Limited, Unit 8, HomePark Industrial Estate,
		King's Langley, Hertfordshire, WD4 8LZ, U.K.


<b>Description:</b>
		Defines the FieldDefnListEl structure if not already defined (FIELD_DEFN_LIST_EL).


		Defines an array of FieldDefnListEl that contains all registers and fields information (non-sorted).
<b>Platform:</b> ?
@Version 1.0

******************************************************************************/

#if !defined (__FIELDS_EXT_DATA_GENERATOR_H__)
#define __FIELDS_EXT_DATA_GENERATOR_H__

#ifdef __cplusplus
extern "C" {
#endif

#ifndef FIELD_DEFN_LIST_EL
#define FIELD_DEFN_LIST_EL
/** @brief Register information structure */
typedef struct _FieldDefnListEl
{
	const IMG_CHAR*		szRegName; /**< @brief Register's name */
	const IMG_CHAR*		szFieldName; /**< @brief Field's name */
	IMG_UINT32		ui32RegOffset; /**< @brief Register's offset in Bytes in the register bank */
	IMG_UINT32		ui32FieldStart; /**< @brief Field's starting offset in bits (from ui32RegOffset) */
	IMG_UINT32		ui32FieldEnd; /**< @brief Field's ending offset in bits (from ui32RegOffset) */
	IMG_UINT32		ui32FieldDefault; /**< @brief Field's default value */
} FieldDefnListEl;
#endif // FIELD_DEFN_LIST_EL


#define FELIX_TEST_DG_FIELDS FieldDefnListEl felix_test_dg_fields[] = {\
	{"DG_CONFIG", "DG_ENABLE_STATUS", 0x00000000, 0, 0, 0x0},\
	{"DG_STATUS", "DG_STATE", 0x00000004, 25, 25, 0x0},\
	{"DG_STATUS", "DG_PIXEL_REF_CLK", 0x00000004, 12, 24, 0x0},\
	{"DG_STATUS", "DG_FRAMES_SENT", 0x00000004, 0, 11, 0x0},\
	{"DG_CTRL", "DG_GROUP_OVERRIDE", 0x00000008, 7, 8, 0x0},\
	{"DG_CTRL", "DG_CRC_CLEAR", 0x00000008, 6, 6, 0x0},\
	{"DG_CTRL", "DG_PRELOAD", 0x00000008, 5, 5, 0x0},\
	{"DG_CTRL", "DG_PIXEL_FORMAT", 0x00000008, 4, 4, 0x0},\
	{"DG_CTRL", "RESERVED", 0x00000008, 3, 3, 0x0},\
	{"DG_CTRL", "DG_IF_MODE", 0x00000008, 2, 2, 0x0},\
	{"DG_CTRL", "DG_MIPI_LS_EN", 0x00000008, 1, 1, 0x0},\
	{"DG_CTRL", "DG_ENABLE", 0x00000008, 0, 0, 0x0},\
	{"DG_MODE", "DG_MODE", 0x0000000C, 0, 1, 0x0},\
	{"DG_RESET", "DG_RESET", 0x00000010, 0, 0, 0x0},\
	{"DG_LINK_ADDR", "DG_LINK_ADDR", 0x00000014, 6, 31, 0x0},\
	{"DG_TAG", "DG_TAG", 0x00000018, 0, 31, 0x0},\
	{"DG_ADDR_DATA", "DG_ADDR_DATA", 0x0000001C, 6, 31, 0x0},\
	{"DG_DATA_STRIDE", "DG_DATA_STRIDE", 0x00000020, 6, 31, 0x0},\
	{"DG_FRAME_SIZE", "DG_FRAME_WIDTH", 0x00000024, 0, 15, 0x0},\
	{"DG_FRAME_SIZE", "DG_FRAME_HEIGHT", 0x00000024, 16, 31, 0x0},\
	{"DG_FRAME_BLANKING", "DG_VERTICAL_BLANKING", 0x00000028, 0, 12, 0x0},\
	{"DG_FRAME_BLANKING", "DG_HORIZONTAL_BLANKING", 0x00000028, 16, 28, 0x0},\
	{"RESERVED_SPACE", "PADDING_0", 0x0000002C, 0, 31, 0x0},\
	{"DG_INTER_STATUS", "DG_INT_ERROR", 0x00000030, 2, 2, 0x0},\
	{"DG_INTER_STATUS", "DG_INT_END_OF_FRAME", 0x00000030, 1, 1, 0x0},\
	{"DG_INTER_STATUS", "DG_INT_START_OF_FRAME", 0x00000030, 0, 0, 0x0},\
	{"DG_INTER_ENABLE", "DG_INT_ERROR_EN", 0x00000034, 2, 2, 0x0},\
	{"DG_INTER_ENABLE", "DG_INT_END_OF_FRAME_EN", 0x00000034, 1, 1, 0x0},\
	{"DG_INTER_ENABLE", "DG_INT_START_OF_FRAME_EN", 0x00000034, 0, 0, 0x0},\
	{"DG_INTER_CLEAR", "DG_INT_ERROR_CL", 0x00000038, 2, 2, 0x0},\
	{"DG_INTER_CLEAR", "DG_INT_END_OF_FRAME_CL", 0x00000038, 1, 1, 0x0},\
	{"DG_INTER_CLEAR", "DG_INT_START_OF_FRAME_CL", 0x00000038, 0, 0, 0x0},\
	{"DG_MIPI_START_OF_DATA_TRANSMISSION", "DG_TLPX", 0x0000003C, 0, 9, 0x1F},\
	{"DG_MIPI_START_OF_DATA_TRANSMISSION", "DG_THS_PREPARE", 0x0000003C, 11, 20, 0x1F},\
	{"DG_MIPI_START_OF_DATA_TRANSMISSION", "DG_THS_ZERO", 0x0000003C, 22, 31, 0x3F},\
	{"DG_MIPI_END_OF_DATA_TRANSMISSION", "DG_THS_TRAIL", 0x00000040, 0, 9, 0x2F},\
	{"DG_MIPI_END_OF_DATA_TRANSMISSION", "DG_THS_EXIT", 0x00000040, 16, 25, 0x3F},\
	{"DG_MIPI_START_OF_CLOCK_TRANSMISSION", "DG_TCLK_PREPARE", 0x00000044, 0, 9, 0x3F},\
	{"DG_MIPI_START_OF_CLOCK_TRANSMISSION", "DG_TCLK_ZERO", 0x00000044, 16, 25, 0xBF},\
	{"DG_MIPI_END_OF_CLOCK_TRANSMISSION", "DG_TCLK_POST", 0x00000048, 0, 9, 0x7F},\
	{"DG_MIPI_END_OF_CLOCK_TRANSMISSION", "DG_TCLK_TRAIL", 0x00000048, 16, 25, 0x2F},\
	{"PARALLEL_CTRL", "PARALLEL_V_SYNC_POLARITY", 0x0000004C, 1, 1, 0x0},\
	{"PARALLEL_CTRL", "PARALLEL_H_SYNC_POLARITY", 0x0000004C, 0, 0, 0x0},\
	{"MIPI_CTRL", "DG_MIPI_LANES", 0x00000050, 0, 1, 0x0},\
	{"DG_READ_REQ_CRC", "DG_READ_REQ_CRC", 0x00000054, 0, 31, 0x0},\
	{"DG_READ_RESPONSE_CRC", "DG_READ_RESPONSE_CRC", 0x00000058, 0, 31, 0x0},\
	{"DG_PWR_CTRL", "CLOCK_GATECTRL_DG", 0x00000060, 0, 1, 0x2},\
	{"DG_PWR_STATUS", "CLOCK_GATESTATUS_DG", 0x00000064, 0, 0, 0x0},\
	{"DG_STALLING", "DG_STALLING", 0x00000068, 0, 3, 0x0},\
};

#define FELIX_TEST_DG_ADD_FIELD_DEFNS(DefnSet, Memspace, MemspaceID) \
	{ \
		int i; \
		FELIX_TEST_DG_FIELDS; \
		for (i = 0; i < (sizeof(felix_test_dg_fields)/sizeof(*felix_test_dg_fields)); i++) \
		{ \
			addFieldDefn(DefnSet, Memspace, MemspaceID, \
				felix_test_dg_fields[i].szRegName, \
				felix_test_dg_fields[i].szFieldName, \
				felix_test_dg_fields[i].ui32RegOffset, \
				felix_test_dg_fields[i].ui32FieldStart, \
				felix_test_dg_fields[i].ui32FieldEnd, \
				felix_test_dg_fields[i].ui32FieldDefault); \
		} \
	}




#ifdef __cplusplus
}
#endif

#endif /* __FIELDS_EXT_DATA_GENERATOR_H__ */
