/**
******************************************************************************
@file   /home/jenkins/builds/workspace/ISP_PKG/build/CI/felix/regdefs2.7/regdefs//registers/fields_mmu.h

@brief  FIELDS_MMU_H registers and fields property array (name, offset, etc)

@author <Autogenerated>
		<b>Copyright 2005 by Imagination Technologies Limited.</b>
		All rights reserved.  No part of this software, either
		material or conceptual may be copied or distributed,
		transmitted, transcribed, stored in a retrieval system
		or translated into any human or computer language in any
		form by any means, electronic, mechanical, manual or
		other-wise, or disclosed to third parties without the
		express written permission of Imagination Technologies
		Limited, Unit 8, HomePark Industrial Estate,
		King's Langley, Hertfordshire, WD4 8LZ, U.K.


<b>Description:</b>
		Defines the FieldDefnListEl structure if not already defined (FIELD_DEFN_LIST_EL).


		Defines an array of FieldDefnListEl that contains all registers and fields information (non-sorted).
<b>Platform:</b> ?
@Version 1.0

******************************************************************************/

#if !defined (__FIELDS_MMU_H__)
#define __FIELDS_MMU_H__

#ifdef __cplusplus
extern "C" {
#endif

#ifndef FIELD_DEFN_LIST_EL
#define FIELD_DEFN_LIST_EL
/** @brief Register information structure */
typedef struct _FieldDefnListEl
{
	const IMG_CHAR*		szRegName; /**< @brief Register's name */
	const IMG_CHAR*		szFieldName; /**< @brief Field's name */
	IMG_UINT32		ui32RegOffset; /**< @brief Register's offset in Bytes in the register bank */
	IMG_UINT32		ui32FieldStart; /**< @brief Field's starting offset in bits (from ui32RegOffset) */
	IMG_UINT32		ui32FieldEnd; /**< @brief Field's ending offset in bits (from ui32RegOffset) */
	IMG_UINT32		ui32FieldDefault; /**< @brief Field's default value */
} FieldDefnListEl;
#endif // FIELD_DEFN_LIST_EL


#define IMG_VIDEO_BUS4_MMU_FIELDS FieldDefnListEl img_video_bus4_mmu_fields[] = {\
	{"MMU_DIR_BASE_ADDR_0", "MMU_DIR_BASE_ADDR_0", 0x00000020, 0, 31, 0x0},\
	{"MMU_DIR_BASE_ADDR_1", "MMU_DIR_BASE_ADDR_1", 0x00000024, 0, 31, 0x0},\
	{"MMU_DIR_BASE_ADDR_2", "MMU_DIR_BASE_ADDR_2", 0x00000028, 0, 31, 0x0},\
	{"MMU_DIR_BASE_ADDR_3", "MMU_DIR_BASE_ADDR_3", 0x0000002C, 0, 31, 0x0},\
	{"MMU_TILE_CFG_0", "TILE_128INTERLEAVE_0", 0x00000040, 4, 4, 0x0},\
	{"MMU_TILE_CFG_0", "TILE_ENABLE_0", 0x00000040, 3, 3, 0x0},\
	{"MMU_TILE_CFG_0", "TILE_STRIDE_0", 0x00000040, 0, 2, 0x0},\
	{"MMU_TILE_CFG_1", "TILE_128INTERLEAVE_1", 0x00000044, 4, 4, 0x0},\
	{"MMU_TILE_CFG_1", "TILE_ENABLE_1", 0x00000044, 3, 3, 0x0},\
	{"MMU_TILE_CFG_1", "TILE_STRIDE_1", 0x00000044, 0, 2, 0x0},\
	{"MMU_TILE_CFG_2", "TILE_128INTERLEAVE_2", 0x00000048, 4, 4, 0x0},\
	{"MMU_TILE_CFG_2", "TILE_ENABLE_2", 0x00000048, 3, 3, 0x0},\
	{"MMU_TILE_CFG_2", "TILE_STRIDE_2", 0x00000048, 0, 2, 0x0},\
	{"MMU_TILE_CFG_3", "TILE_128INTERLEAVE_3", 0x0000004C, 4, 4, 0x0},\
	{"MMU_TILE_CFG_3", "TILE_ENABLE_3", 0x0000004C, 3, 3, 0x0},\
	{"MMU_TILE_CFG_3", "TILE_STRIDE_3", 0x0000004C, 0, 2, 0x0},\
	{"MMU_TILE_MIN_ADDR_0", "TILE_MIN_ADDR_0", 0x00000050, 0, 31, 0x0},\
	{"MMU_TILE_MIN_ADDR_1", "TILE_MIN_ADDR_1", 0x00000054, 0, 31, 0x0},\
	{"MMU_TILE_MIN_ADDR_2", "TILE_MIN_ADDR_2", 0x00000058, 0, 31, 0x0},\
	{"MMU_TILE_MIN_ADDR_3", "TILE_MIN_ADDR_3", 0x0000005C, 0, 31, 0x0},\
	{"MMU_TILE_MAX_ADDR_0", "TILE_MAX_ADDR_0", 0x00000060, 0, 31, 0x0},\
	{"MMU_TILE_MAX_ADDR_1", "TILE_MAX_ADDR_1", 0x00000064, 0, 31, 0x0},\
	{"MMU_TILE_MAX_ADDR_2", "TILE_MAX_ADDR_2", 0x00000068, 0, 31, 0x0},\
	{"MMU_TILE_MAX_ADDR_3", "TILE_MAX_ADDR_3", 0x0000006C, 0, 31, 0x0},\
	{"MMU_CONTROL0", "MMU_TILING_SCHEME", 0x00000000, 0, 0, 0x0},\
	{"MMU_CONTROL0", "MMU_CACHE_POLICY", 0x00000000, 8, 8, 0x0},\
	{"MMU_CONTROL0", "FORCE_CACHE_POLICY_BYPASS", 0x00000000, 9, 9, 0x0},\
	{"MMU_CONTROL0", "STALL_ON_PROTOCOL_FAULT", 0x00000000, 12, 12, 0x0},\
	{"MMU_CONTROL1", "MMU_FLUSH[3]", 0x00000008, 3, 3, 0x0},\
	{"MMU_CONTROL1", "MMU_FLUSH[2]", 0x00000008, 2, 2, 0x0},\
	{"MMU_CONTROL1", "MMU_FLUSH[1]", 0x00000008, 1, 1, 0x0},\
	{"MMU_CONTROL1", "MMU_FLUSH[0]", 0x00000008, 0, 0, 0x0},\
	{"MMU_CONTROL1", "MMU_INVALDC[3]", 0x00000008, 11, 11, 0x0},\
	{"MMU_CONTROL1", "MMU_INVALDC[2]", 0x00000008, 10, 10, 0x0},\
	{"MMU_CONTROL1", "MMU_INVALDC[1]", 0x00000008, 9, 9, 0x0},\
	{"MMU_CONTROL1", "MMU_INVALDC[0]", 0x00000008, 8, 8, 0x0},\
	{"MMU_CONTROL1", "MMU_FAULT_CLEAR", 0x00000008, 16, 16, 0x0},\
	{"MMU_CONTROL1", "PROTOCOL_FAULT_CLEAR", 0x00000008, 20, 20, 0x0},\
	{"MMU_CONTROL1", "MMU_PAUSE_SET", 0x00000008, 24, 24, 0x0},\
	{"MMU_CONTROL1", "MMU_PAUSE_CLEAR", 0x00000008, 25, 25, 0x0},\
	{"MMU_CONTROL1", "MMU_SOFT_RESET", 0x00000008, 28, 28, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[15]", 0x00000010, 30, 31, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[14]", 0x00000010, 28, 29, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[13]", 0x00000010, 26, 27, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[12]", 0x00000010, 24, 25, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[11]", 0x00000010, 22, 23, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[10]", 0x00000010, 20, 21, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[9]", 0x00000010, 18, 19, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[8]", 0x00000010, 16, 17, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[7]", 0x00000010, 14, 15, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[6]", 0x00000010, 12, 13, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[5]", 0x00000010, 10, 11, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[4]", 0x00000010, 8, 9, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[3]", 0x00000010, 6, 7, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[2]", 0x00000010, 4, 5, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[1]", 0x00000010, 2, 3, 0x0},\
	{"MMU_BANK_INDEX", "MMU_BANK_INDEX[0]", 0x00000010, 0, 1, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[15]", 0x00000018, 15, 15, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[14]", 0x00000018, 14, 14, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[13]", 0x00000018, 13, 13, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[12]", 0x00000018, 12, 12, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[11]", 0x00000018, 11, 11, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[10]", 0x00000018, 10, 10, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[9]", 0x00000018, 9, 9, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[8]", 0x00000018, 8, 8, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[7]", 0x00000018, 7, 7, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[6]", 0x00000018, 6, 6, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[5]", 0x00000018, 5, 5, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[4]", 0x00000018, 4, 4, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[3]", 0x00000018, 3, 3, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[2]", 0x00000018, 2, 2, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[1]", 0x00000018, 1, 1, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_PRIORITY_ENABLE[0]", 0x00000018, 0, 0, 0x0},\
	{"REQUEST_PRIORITY_ENABLE", "CMD_MMU_PRIORITY_ENABLE", 0x00000018, 16, 16, 0x1},\
	{"REQUEST_LIMITED_THROUGHPUT", "LIMITED_WORDS", 0x0000001C, 0, 9, 0x0},\
	{"REQUEST_LIMITED_THROUGHPUT", "REQUEST_GAP", 0x0000001C, 16, 27, 0x0},\
	{"MMU_ADDRESS_CONTROL", "MMU_BYPASS", 0x00000070, 0, 0, 0x1},\
	{"MMU_ADDRESS_CONTROL", "MMU_ENABLE_EXT_ADDRESSING", 0x00000070, 4, 4, 0x0},\
	{"MMU_ADDRESS_CONTROL", "UPPER_ADDRESS_FIXED", 0x00000070, 16, 23, 0x0},\
	{"MMU_CONFIG0", "NUM_REQUESTORS", 0x00000080, 0, 3, 0x1},\
	{"MMU_CONFIG0", "EXTENDED_ADDR_RANGE", 0x00000080, 4, 7, 0x8},\
	{"MMU_CONFIG0", "GROUP_OVERRIDE_SIZE", 0x00000080, 8, 10, 0x2},\
	{"MMU_CONFIG0", "ADDR_COHERENCY_SUPPORTED", 0x00000080, 12, 12, 0x1},\
	{"MMU_CONFIG0", "MMU_SUPPORTED", 0x00000080, 13, 13, 0x1},\
	{"MMU_CONFIG0", "TILE_ADDR_GRANULARITY", 0x00000080, 16, 20, 0x0},\
	{"MMU_CONFIG0", "NO_READ_REORDER", 0x00000080, 21, 21, 0x0},\
	{"MMU_CONFIG0", "TAGS_SUPPORTED", 0x00000080, 22, 31, 0x0},\
	{"MMU_CONFIG1", "PAGE_SIZE", 0x00000084, 0, 3, 0x0},\
	{"MMU_CONFIG1", "PAGE_CACHE_ENTRIES", 0x00000084, 8, 15, 0x7},\
	{"MMU_CONFIG1", "DIR_CACHE_ENTRIES", 0x00000084, 16, 20, 0x1},\
	{"MMU_CONFIG1", "BANDWIDTH_COUNT_SUPPORTED", 0x00000084, 24, 24, 0x0},\
	{"MMU_CONFIG1", "STALL_COUNT_SUPPORTED", 0x00000084, 25, 25, 0x0},\
	{"MMU_CONFIG1", "LATENCY_COUNT_SUPPORTED", 0x00000084, 26, 26, 0x0},\
	{"MMU_STATUS0", "MMU_PF_N_RW", 0x00000088, 0, 0, 0x0},\
	{"MMU_STATUS0", "MMU_FAULT_ADDR", 0x00000088, 12, 31, 0x0},\
	{"MMU_STATUS1", "MMU_FAULT_REQ_STAT", 0x0000008C, 0, 15, 0x0},\
	{"MMU_STATUS1", "MMU_FAULT_REQ_ID", 0x0000008C, 16, 19, 0x0},\
	{"MMU_STATUS1", "MMU_FAULT_INDEX", 0x0000008C, 24, 25, 0x0},\
	{"MMU_STATUS1", "MMU_FAULT_RNW", 0x0000008C, 28, 28, 0x0},\
	{"MMU_MEM_REQ", "TAG_OUTSTANDING", 0x00000090, 0, 9, 0x0},\
	{"MMU_MEM_REQ", "EXT_WRRESP_FAULT", 0x00000090, 12, 12, 0x0},\
	{"MMU_MEM_REQ", "EXT_RDRESP_FAULT", 0x00000090, 13, 13, 0x0},\
	{"MMU_MEM_REQ", "EXT_READ_BURST_FAULT", 0x00000090, 14, 14, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[15]", 0x00000090, 31, 31, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[14]", 0x00000090, 30, 30, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[13]", 0x00000090, 29, 29, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[12]", 0x00000090, 28, 28, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[11]", 0x00000090, 27, 27, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[10]", 0x00000090, 26, 26, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[9]", 0x00000090, 25, 25, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[8]", 0x00000090, 24, 24, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[7]", 0x00000090, 23, 23, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[6]", 0x00000090, 22, 22, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[5]", 0x00000090, 21, 21, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[4]", 0x00000090, 20, 20, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[3]", 0x00000090, 19, 19, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[2]", 0x00000090, 18, 18, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[1]", 0x00000090, 17, 17, 0x0},\
	{"MMU_MEM_REQ", "INT_PROTOCOL_FAULT[0]", 0x00000090, 16, 16, 0x0},\
	{"MMU_FAULT_SELECT", "MMU_FAULT_SELECT", 0x000000A0, 0, 3, 0x0},\
	{"PROTOCOL_FAULT", "FAULT_PAGE_BREAK", 0x000000A8, 0, 0, 0x0},\
	{"PROTOCOL_FAULT", "FAULT_WRITE", 0x000000A8, 4, 4, 0x0},\
	{"PROTOCOL_FAULT", "FAULT_READ", 0x000000A8, 5, 5, 0x0},\
	{"TOTAL_READ_REQ", "TOTAL_READ_REQ", 0x00000100, 0, 31, 0x0},\
	{"TOTAL_WRITE_REQ", "TOTAL_WRITE_REQ", 0x00000104, 0, 31, 0x0},\
	{"READS_LESS_64_REQ", "READS_LESS_64_REQ", 0x00000108, 0, 31, 0x0},\
	{"WRITES_LESS_64_REQ", "WRITES_LESS_64_REQ", 0x0000010C, 0, 31, 0x0},\
	{"EXT_CMD_STALL", "EXT_CMD_STALL", 0x00000120, 0, 31, 0x0},\
	{"WRITE_REQ_STALL", "WRITE_REQ_STALL", 0x00000124, 0, 31, 0x0},\
	{"MMU_MISS_STALL", "MMU_MISS_STALL", 0x00000128, 0, 31, 0x0},\
	{"ADDRESS_STALL", "ADDRESS_STALL", 0x0000012C, 0, 31, 0x0},\
	{"TAG_STALL", "TAG_STALL", 0x00000130, 0, 31, 0x0},\
	{"PEAK_READ_OUTSTANDING", "PEAK_TAG_OUTSTANDING", 0x00000140, 0, 9, 0x0},\
	{"PEAK_READ_OUTSTANDING", "PEAK_READ_LATENCY", 0x00000140, 16, 31, 0x0},\
	{"AVERAGE_READ_LATENCY", "AVERAGE_READ_LATENCY", 0x00000144, 0, 31, 0x0},\
	{"STATISTICS_CONTROL", "BANDWIDTH_STATS_INIT", 0x00000160, 0, 0, 0x0},\
	{"STATISTICS_CONTROL", "STALL_STATS_INIT", 0x00000160, 1, 1, 0x0},\
	{"STATISTICS_CONTROL", "LATENCY_STATS_INIT", 0x00000160, 2, 2, 0x0},\
	{"MMU_VERSION", "MMU_MAJOR_REV", 0x000001D0, 16, 23, 0x4},\
	{"MMU_VERSION", "MMU_MINOR_REV", 0x000001D0, 8, 15, 0x0},\
	{"MMU_VERSION", "MMU_MAINT_REV", 0x000001D0, 0, 7, 0x0},\
};

#define IMG_VIDEO_BUS4_MMU_ADD_FIELD_DEFNS(DefnSet, Memspace, MemspaceID) \
	{ \
		int i; \
		IMG_VIDEO_BUS4_MMU_FIELDS; \
		for (i = 0; i < (sizeof(img_video_bus4_mmu_fields)/sizeof(*img_video_bus4_mmu_fields)); i++) \
		{ \
			addFieldDefn(DefnSet, Memspace, MemspaceID, \
				img_video_bus4_mmu_fields[i].szRegName, \
				img_video_bus4_mmu_fields[i].szFieldName, \
				img_video_bus4_mmu_fields[i].ui32RegOffset, \
				img_video_bus4_mmu_fields[i].ui32FieldStart, \
				img_video_bus4_mmu_fields[i].ui32FieldEnd, \
				img_video_bus4_mmu_fields[i].ui32FieldDefault); \
		} \
	}




#ifdef __cplusplus
}
#endif

#endif /* __FIELDS_MMU_H__ */
