cmake_minimum_required(VERSION 2.8)

find_package(MXML REQUIRED) # to know where is the library patch and where to install it

include(ExternalProject)

set(MXML_RELEASE 2.7)
set(MXML_URL ${MXML_PREFIX}/mxml-${MXML_RELEASE}.tar.gz)
#set(MXML_INSTALL_DIR ${CMAKE_BINARY_DIR}/downloads/install)
set(MXML_CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=${MXML_INSTALL_DIR})
set(MXML_PATCH_COMMAND "")
set(MXML_CMAKE_CACHE_ARGS "")

message(STATUS "external mxml")

if(MSVC)
  if(CMAKE_CONFIGURATION_TYPES)
    foreach(CONFIG_NAME ${CMAKE_CONFIGURATION_TYPES})
      string(TOUPPER ${CONFIG_NAME} CONFIG_NAME)
            
      # Don't force /W4 and /WX (print all warnings and error out on warning)
      foreach(FLAGS_NAME CXX_FLAGS C_FLAGS) #Compiler flags
        STRING(REGEX REPLACE "/W4" "" CMAKE_${FLAGS_NAME}_${CONFIG_NAME} "${CMAKE_${FLAGS_NAME}_${CONFIG_NAME}}")
        STRING(REGEX REPLACE "/WX" "" CMAKE_${FLAGS_NAME}_${CONFIG_NAME} "${CMAKE_${FLAGS_NAME}_${CONFIG_NAME}}")
        
        # Disable warnings that prevents compiling on 64 bit
        if(CMAKE_SIZEOF_VOID_P EQUAL 8)
          set(CMAKE_${FLAGS_NAME}_${CONFIG_NAME} "${CMAKE_${FLAGS_NAME}_${CONFIG_NAME}} /wd4244 /wd4267")
        endif()
      endforeach()
    endforeach()
  endif()

  # Force /MT and /MTd
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_C_FLAGS_MINSIZEREL:STRING=${CMAKE_C_FLAGS_MINSIZEREL})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_C_FLAGS_RELWITHDEBINFO})

  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_CXX_FLAGS_MINSIZEREL:STRING=${CMAKE_CXX_FLAGS_MINSIZEREL})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_CXX_FLAGS_RELWITHDEBINFO})

  # Force /MACHINE
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_EXE_LINKER_FLAGS:STRING=${CMAKE_EXE_LINKER_FLAGS})
endif()

if(MINGW)
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DMINGW_PREFIX:STRING=${MINGW_PREFIX})

  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_EXE_LINKER_FLAGS:STRING=${CMAKE_EXE_LINKER_FLAGS})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_SHARED_LINKER_FLAGS:STRING=${CMAKE_SHARED_LINKER_FLAGS})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_SHARED_MODULE_FLAGS:STRING=${CMAKE_MODULE_LINKER_FLAGS})
endif()

if(ANDROID)
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DANDROID_TARGET_PRODUCT:STRING=${ANDROID_TARGET_PRODUCT})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DANDROID_TARGET_OUT:STRING=${ANDROID_TARGET_OUT})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DANDROID_ROOT:STRING=${ANDROID_ROOT})
endif()
  
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")

  if(${FORCE_32BIT_BUILD} MATCHES "ON")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
    set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DFORCE_32BIT_BUILD:BOOL=ON)
  endif()
  
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_EXE_LINKER_FLAGS:STRING=${CMAKE_EXE_LINKER_FLAGS})
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_SHARED_LINKER_FLAGS:STRING=${CMAKE_SHARED_LINKER_FLAGS})

  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS})
endif()

# Pass toolchain
if(NOT "${CMAKE_TOOLCHAIN_FILE}" STREQUAL "")
  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_TOOLCHAIN_FILE:STRING=${CMAKE_TOOLCHAIN_FILE})
endif()

# Need to set the build type
set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE})

# Pass any non default configuration
if(CMAKE_CONFIGURATION_TYPES)
  foreach(CONFIG_NAME ${CMAKE_CONFIGURATION_TYPES})
    if(NOT "${CONFIG_NAME}" STREQUAL "Debug" AND
       NOT "${CONFIG_NAME}" STREQUAL "Release" AND
       NOT "${CONFIG_NAME}" STREQUAL "MinSizeRel" AND
       NOT "${CONFIG_NAME}" STREQUAL "RelWithDebInfo")

      string(TOUPPER ${CONFIG_NAME} CONFIG_NAME)
         
      #Set the flags for this configuration
      foreach(FLAGS_NAME CXX_FLAGS C_FLAGS) #Compiler flags
        set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_${FLAGS_NAME}_${CONFIG_NAME}:STRING=${CMAKE_${FLAGS_NAME}_${CONFIG_NAME}})
      endforeach()
      
      foreach(FLAGS_NAME EXE_LINKER_FLAGS MODULE_LINKER_FLAGS SHARED_LINKER_FLAGS) #Linker flags
        set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_${FLAGS_NAME}_${CONFIG_NAME}:STRING=${CMAKE_${FLAGS_NAME}_${CONFIG_NAME}})
      endforeach()
    endif()
  endforeach()

  set(MXML_CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS} -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES})
endif()

# Copy CMakeList.txt and cmakeconfig.h.in to source directory
set(MXML_PATCH_COMMAND ${CMAKE_COMMAND} -E copy_directory ${MXML_PREFIX}/patch <SOURCE_DIR>)

if ( CMAKE_VERSION VERSION_GREATER "2.8.3" )
  # ExternalProject_Add has CMAKE_CACHE_ARGS and URL_MD5
  ExternalProject_Add(
    ${MXML_NAME}
    URL ${MXML_URL}
    URL_MD5 76f2ae49bf0f5745d5cb5d9507774dc9
    DOWNLOAD_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml/download
    SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml/source
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml
    INSTALL_DIR ${MXML_INSTALL_DIR}
    CMAKE_ARGS ${MXML_CMAKE_ARGS}
    CMAKE_CACHE_ARGS ${MXML_CMAKE_CACHE_ARGS}
    UPDATE_COMMAND ""
    PATCH_COMMAND ${MXML_PATCH_COMMAND}
  )
elseif ( CMAKE_VERSION VERSION_GREATER "2.8.1" )
  # ExternalProject_Add has URL_MD5
  # CMAKE_CACHE_ARGS option in ExternalProject_Add is only implemented in
  # cmake starting in version 2.8.4. Use CMAKE_ARGS for now (this limits
  # the max command line to 8k chars on windows).
  set(MXML_CMAKE_ARGS ${MXML_CMAKE_ARGS} ${MXML_CMAKE_CACHE_ARGS})
  
  ExternalProject_Add(
    ${MXML_NAME}
    URL ${MXML_URL}
    URL_MD5 76f2ae49bf0f5745d5cb5d9507774dc9
    DOWNLOAD_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml/download
    SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml/source
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml
    INSTALL_DIR ${MXML_INSTALL_DIR}
    CMAKE_ARGS ${MXML_CMAKE_ARGS}
    UPDATE_COMMAND ""
    PATCH_COMMAND ${MXML_PATCH_COMMAND}
  )
else()
  # CMAKE_CACHE_ARGS option in ExternalProject_Add is only implemented in
  # cmake starting in version 2.8.4. Use CMAKE_ARGS for now (this limits
  # the max command line to 8k chars on windows).
  set(MXML_CMAKE_ARGS ${MXML_CMAKE_ARGS} ${MXML_CMAKE_CACHE_ARGS})
  
  ExternalProject_Add(
    ${MXML_NAME}
    URL ${MXML_URL}
    DOWNLOAD_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml/download
    SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml/source
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libraries/mxml
    INSTALL_DIR ${MXML_INSTALL_DIR}
    CMAKE_ARGS ${MXML_CMAKE_ARGS}
    UPDATE_COMMAND ""
    PATCH_COMMAND ${MXML_PATCH_COMMAND}
  )
endif()

