#
# (C) Copyright 2006-2007
# Stefan Roese, DENX Software Engineering, sr@denx.de.
#
# (C) Copyright 2008
# Guennadi Liakhovetki, DENX Software Engineering, <lg@denx.de>
#
# See file CREDITS for list of people who contributed to this
# project.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#
ifeq (,$(findstring s,$(MAKEFLAGS)))
XECHO = echo
else
XECHO = :
endif

VERSION = 2009
PATCHLEVEL = 08
SUBLEVEL =
EXTRAVERSION =
ifneq "$(SUBLEVEL)" ""
U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
else
U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL)$(EXTRAVERSION)
endif
TIMESTAMP_FILE = $(obj)include/timestamp_autogenerated.h
VERSION_FILE = $(obj)include/version_autogenerated.h

TOPDIR =$(shell pwd)
OBJTREE := $(if $(BUILD_DIR),$(BUILD_DIR),$(TOPDIR))
SRCTREE := $(shell pwd)
LNDIR := $(OBJTREE)
OBJDIR =$(TOPDIR)/
SRCDIR =$(TOPDIR)/src/
INCDIR =$(TOPDIR)/include/
TOOLDIR =$(TOPDIR)/tool/
export	TOPDIR SRCTREE OBJTREE

MKCONFIG := $(SRCTREE)/imapconfig
export MKCONFIG

obj := $(OBJTREE)/
src := $(SRCTREE)/
export obj src

SUBDIRS	= tools
.PHONY : $(SUBDIRS)

PLATFORM_LDFLAGS= -L
TEXT_BASE := 0x43c00000
RAM_TEXT = 0x43c00000
CPU =armv7
SOC =imapx800
BOARDDIR = infotm
BOARD  = imap_dev
VENDOR = infotm
SOC    = imapx800
CONFIG_NAND_U_BOOT = y
MODE := simple
export	ARCH CPU BOARD VENDOR SOC MODE TEXT_BASE RAM_TEXT

INC_DIR =$(INCDIR)
INC_DIR +=$(INCDIR)asm-arm
INC_DIR +=$(INCDIR)asm
INC_DIR +=$(INCDIR)infotm
INC_DIR +=$(INCDIR)configs

PLATFORM_CPPFLAGS =
PLATFORM_RELFLAGS =
PLATFORM_LDFLAGS =

sinclude $(TOPDIR)/config.mk

# Set flags
CFLAGS =  $(foreach incdir,$(INC_DIR),$(addprefix -I,$(incdir))) \
-g  -Os   -fno-strict-aliasing  -fno-common -ffixed-r8  -fno-strict-aliasing -msoft-float -fno-common -ffixed-r8  \
-DTEXT_BASE=$(TEXT_BASE) -fno-builtin -ffreestanding -nostdinc -pipe \
-DCONFIG_ARM -D__ARM__ -marm -mabi=aapcs-linux -mno-thumb-interwork -march=armv7-a -Wall -Wstrict-prototypes -fno-stack-protector \
-DCONFIG_NAND_SPL -DCONFIG_PRELOADER -D__KERNEL__

LDFLAGS	= -Bstatic -T $(TOPDIR)/u-boot.lds -Ttext $(TEXT_BASE) $(PLATFORM_LDFLAGS) -lgcc
OBJFLAGS = --gap-fill=0xff -O binary

export PLATFORM_CPPFLAGS PLATFORM_RELFLAGS CPPFLAGS CFLAGS AFLAGS

# Add GCC lib
ifdef USE_PRIVATE_LIBGCC
ifeq ("$(USE_PRIVATE_LIBGCC)", "yes")
PLATFORM_LIBGCC = -L $(OBJTREE)/lib_$(ARCH) -lgcc
else
PLATFORM_LIBGCC = -L $(USE_PRIVATE_LIBGCC) -lgcc
endif
else
PLATFORM_LIBGCC = -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc
endif
PLATFORM_LIBS += $(PLATFORM_LIBGCC)
export PLATFORM_LIBS

arch =`uname -m` \
if [ z"$arch" == z"x86_64"] \
then \
	IUW =iuw64 \
else \
 	IUW =iuw32 \
fi

ISI =$(TOOLDIR)iuw32 genisi -n "uboot1" -t rawx -a $(RAM_TEXT) -e $(RAM_TEXT) -f 0x940

cc-option = $(shell if $(CC) $(CFLAGS) $(1) -S -o /dev/null -xc /dev/null \
		> /dev/null 2>&1; then echo "$(1)"; else echo "$(2)"; fi ;)

# Sources
OBJS  = cpu/$(CPU)/start.o
OBJS += cpu/$(CPU)/mmutable.o
OBJS += cpu/$(CPU)/cache_init.o

OBJS := $(addprefix $(obj),$(OBJS))
LIBS  = lib_generic/libgeneric.a
LIBS += $(shell if [ -f board/$(VENDOR)/common/Makefile ]; then echo \
	"board/$(VENDOR)/common/lib$(VENDOR).a"; fi)
LIBS += cpu/$(CPU)/lib$(CPU).a
ifdef SOC
LIBS += cpu/$(CPU)/$(SOC)/lib$(SOC).a
endif
ifeq ($(CPU),ixp)
LIBS += cpu/ixp/npe/libnpe.a
endif
LIBS += lib_$(ARCH)/lib$(ARCH).a
LIBS += fs/fat/libfat.a 
LIBS += net/libnet.a
LIBS += disk/libdisk.a
LIBS += drivers/bios_emulator/libatibiosemu.a
LIBS += drivers/block/libblock.a
LIBS += drivers/dma/libdma.a
LIBS += infotm/boards/libboards.a
LIBS += infotm/drivers/gdma/libgdma.a
LIBS += infotm/drivers/adc/libadc.a
LIBS += infotm/drivers/timer/libtimer.a
LIBS += infotm/drivers/serial/libserial.a
LIBS += infotm/drivers/mmc/libmmc.a
LIBS += infotm/drivers/eeprom/libeeprom.a
LIBS += infotm/drivers/flash/libflash.a
LIBS += infotm/drivers/gpio/libgpio.a
#LIBS += infotm/drivers/sata/libsata.a
LIBS += infotm/drivers/ramdisk/libramdisk.a
LIBS += infotm/drivers/net/libgmac.a
#LIBS += infotm/drivers/udc/libudc.a
LIBS += infotm/drivers/secure/libsecure.a
LIBS += infotm/drivers/led/libled.a
LIBS += infotm/drivers/pmu/libpmu.a
LIBS += infotm/drivers/pwm/libpwm.a
#LIBS += infotm/drivers/display/libdisplay.a
LIBS += infotm/strategy/items/libitems.a
LIBS += infotm/strategy/vstorage/libvs.a
LIBS += infotm/strategy/burn/libburn.a
#LIBS += infotm/strategy/fastboot/libfastboot.a
LIBS += infotm/strategy/ius/libius.a
LIBS += infotm/strategy/isi/libisi.a
LIBS += infotm/strategy/env/libenv.a
LIBS += infotm/strategy/boots/libiboots.a
LIBS += infotm/commands/libicmd.a
LIBS += drivers/rtc/librtc.a
#LIBS += drivers/usb/musb/libusb_musb.a
LIBS += common/libcommon.a

LIBS := $(addprefix $(obj),$(LIBS))
.PHONY : $(LIBS) $(TIMESTAMP_FILE) $(VERSION_FILE)

LIBBOARD = board/$(BOARDDIR)/lib$(BOARD).a
LIBBOARD := $(addprefix $(obj),$(LIBBOARD))

# Special flags for CPP when processing the linker script.
# Pass the version down so we can handle backwards compatibility
# on the fly.
LDPPFLAGS += \
	-include $(TOPDIR)/include/u-boot/u-boot.lds.h \
	$(shell $(LD) --version | \
	  sed -ne 's/GNU ld version \([0-9][0-9]*\)\.\([0-9][0-9]*\).*/-DLD_MAJOR=\1 -DLD_MINOR=\2/p')

__OBJS := $(subst $(obj),,$(OBJS))
__LIBS := $(subst $(obj),,$(LIBS)) $(subst $(obj),,$(LIBBOARD))

ALL += $(obj)u-boot.srec $(obj)u-boot.bin $(obj)u-boot.img $(obj)System.map $(obj)uboot1.isi

all:		$(ALL)

$(obj)u-boot.hex:	$(obj)u-boot
		$(OBJCOPY) ${OBJCFLAGS} -O ihex $< $@

$(obj)u-boot.srec:	$(obj)u-boot
		$(OBJCOPY) -O srec $< $@

$(obj)u-boot.bin:	$(obj)u-boot
		echo "u-boot.bin:\n"
		echo "$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@"
		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@

$(obj)u-boot.ldr:	$(obj)u-boot
		$(obj)tools/envcrc --binary > $(obj)env-ldr.o
		$(LDR) -T $(CONFIG_BFIN_CPU) -c $@ $< $(LDR_FLAGS)

$(obj)u-boot.ldr.hex:	$(obj)u-boot.ldr
		$(OBJCOPY) ${OBJCFLAGS} -O ihex $< $@ -I binary

$(obj)u-boot.ldr.srec:	$(obj)u-boot.ldr
		$(OBJCOPY) ${OBJCFLAGS} -O srec $< $@ -I binary

$(obj)u-boot.img:	$(obj)u-boot.bin
		$(obj)tools/mkimage -A $(ARCH) -T firmware -C none \
		-a $(TEXT_BASE) -e 0 \
		-n $(shell sed -n -e 's/.*U_BOOT_VERSION//p' $(VERSION_FILE) | \
			sed -e 's/"[	 ]*$$/ for $(BOARD) board"/') \
		-d $< $@

$(obj)u-boot.sha1:	$(obj)u-boot.bin
		$(obj)tools/ubsha1 $(obj)u-boot.bin

$(obj)u-boot.dis:	$(obj)u-boot
		$(OBJDUMP) -d $< > $@

GEN_UBOOT = \
		UNDEF_SYM=`$(OBJDUMP) -x $(LIBBOARD) $(LIBS) | \
		sed  -n -e 's/.*\($(SYM_PREFIX)__u_boot_cmd_.*\)/-u\1/p'|sort|uniq`;\
		cd $(LNDIR) && $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \
			--start-group $(__LIBS) --end-group $(PLATFORM_LIBS) \
			-Map u-boot.map -o u-boot
$(obj)u-boot:	depend $(SUBDIRS) $(OBJS) $(LIBBOARD) $(LIBS) $(LDSCRIPT) $(obj)u-boot.lds
		echo "u-boot objs: $(OBJS)"
		echo "u-boot libboard: $(LIBBOARD)"
		echo "u-boot libs: $(LIBS)"
		$(GEN_UBOOT)
		echo "GEN_UBOOT:\n" \
		echo " cd $(LNDIR) && $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) --start-group $(__LIBS) --end-group $(PLATFORM_LIBS) -Map u-boot.map -o u-boot"
ifeq ($(CONFIG_KALLSYMS),y)
		smap=`$(call SYSTEM_MAP,u-boot) | \
			awk '$$2 ~ /[tTwW]/ {printf $$1 $$3 "\\\\000"}'` ; \
		$(CC) $(CFLAGS) -DSYSTEM_MAP="\"$${smap}\"" \
			-c common/system_map.c -o $(obj)common/system_map.o
		$(GEN_UBOOT) $(obj)common/system_map.o
endif

$(OBJS):	depend
		$(MAKE) -C cpu/$(CPU) $(if $(REMOTE_BUILD),$@,$(notdir $@))

$(LIBS):	depend $(SUBDIRS)
		$(MAKE) -C $(dir $(subst $(obj),,$@))

$(LIBBOARD):	depend $(LIBS)
		$(MAKE) -C $(dir $(subst $(obj),,$@))

$(SUBDIRS):	depend
		$(MAKE) -C $@ all

$(LDSCRIPT):	depend
		$(MAKE) -C $(dir $@) $(notdir $@)

$(obj)u-boot.lds: $(LDSCRIPT)
		$(CPP) $(CPPFLAGS) $(LDPPFLAGS) -ansi -D__ASSEMBLY__ -P - <$^ >$@

$(obj)uboot1.isi: $(obj)u-boot.bin
	$(ISI) -d $< -o $@

$(SRCDIR)iex_4e5a75.c: $(INCDIR)/infotm/preloader.h
	@rm -f $@
	$(TOOLDIR)gen-entry.sh 4e5a75 $(TOOLDIR)labels $(TOOLDIR)i4e5a75.S > $@	
	
$(OBJDIR)%.o:	$(SRCDIR)%.S
	$(CC) $(AFLAGS) $(CFLAGS) -c -o $@ $<

$(OBJDIR)%.o:	$(SRCDIR)%.c
	$(CC) $(CFLAGS) -c -o $@ $<

SYSTEM_MAP = \
		$(NM) $1 | \
		grep -v '\(compiled\)\|\(\.o$$\)\|\( [aUw] \)\|\(\.\.ng$$\)\|\(LASH[RL]DI\)' | \
		LC_ALL=C sort
$(obj)System.map:	$(obj)u-boot
		@$(call SYSTEM_MAP,$<) > $(obj)System.map

$(VERSION_FILE):
		@( printf '#define U_BOOT_VERSION "U-Boot %s%s"\n' "$(U_BOOT_VERSION)" ) > $@.tmp
#		@( printf '#define U_BOOT_VERSION "U-Boot %s%s"\n' "$(U_BOOT_VERSION)" \
#		 '$(shell $(TOPDIR)/tools/setlocalversion $(TOPDIR))' ) > $@.tmp
		@cmp -s $@ $@.tmp && rm -f $@.tmp || mv -f $@.tmp $@

$(TIMESTAMP_FILE):
		@date +'#define U_BOOT_DATE "%b %d %C%y"' > $@
		@date +'#define U_BOOT_TIME "%T"' >> $@

$(obj)include/autoconf.mk.dep: $(obj)include/config.h include/common.h
	@$(XECHO) Generating $@ ; \
	set -e ; \
	: Generate the dependancies ; \
	$(CC) -x c -DDO_DEPS_ONLY -M $(HOSTCFLAGS) $(CPPFLAGS) \
		-MQ $(obj)include/autoconf.mk include/common.h > $@

$(obj)include/autoconf.mk: $(obj)include/config.h
	@$(XECHO) Generating $@ ; \
	set -e ; \
	: Extract the config macros ; \
	$(CPP) $(CPPFLAGS) -DDO_DEPS_ONLY -dM include/common.h | \
		sed -n -f tools/scripts/define2mk.sed > $@.tmp && \
	mv $@.tmp $@

unconfig:
	@rm -f $(obj)include/config.h $(obj)include/config.mk \
		$(obj)board/*/config.tmp $(obj)board/*/*/config.tmp 

gdbtools:
		$(MAKE) -C tools/gdb all || exit 1

include $(TOPDIR)/product.mk

updater:
		$(MAKE) -C tools/updater all || exit 1

env:
		$(MAKE) -C tools/env all MTD_VERSION=${MTD_VERSION} || exit 1

depend dep: $(TIMESTAMP_FILE) $(VERSION_FILE)
		for dir in $(SUBDIRS) ; do $(MAKE) -C $$dir _depend ; done

# defines $(out).depend target
#include $(SRCTREE)/rules.mk

clean:
	-rm -rf $(OBJDIR)*
.PHONY:clean $(OBJDIR).depend $(SRCDIR)iex_4e5a75.c
